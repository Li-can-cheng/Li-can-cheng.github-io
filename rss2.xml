<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>绝剑阁</title>
    <link>https://cjliblog.top/</link>
    
    <image>
      <url>https://www.gravatar.com/avatar/9a30667a06f9e54b4502c81e69456aa3</url>
      <title>绝剑阁</title>
      <link>https://cjliblog.top/</link>
    </image>
    
    <atom:link href="https://cjliblog.top/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>银屏之下，龙游四海。</description>
    <pubDate>Sun, 09 Jun 2024 03:37:09 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>大注释实时模版</title>
      <link>https://cjliblog.top/2024/06/09/%E5%A4%A7%E6%B3%A8%E9%87%8A%E5%AE%9E%E6%97%B6%E6%A8%A1%E7%89%88/</link>
      <guid>https://cjliblog.top/2024/06/09/%E5%A4%A7%E6%B3%A8%E9%87%8A%E5%AE%9E%E6%97%B6%E6%A8%A1%E7%89%88/</guid>
      <pubDate>Sat, 08 Jun 2024 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;如图：&lt;/p&gt;
&lt;p&gt;[&lt;img src=&quot;https://raw.githubusercontent.com/Li-can-cheng/Li-can-cheng.github.io/main/img/%E5%A4%A7%E6%B3%A8%E9%87%8A%E5%AE%9E</description>
        
      
      
      
      <content:encoded><![CDATA[<p>如图：</p><p>[<img src="https://raw.githubusercontent.com/Li-can-cheng/Li-can-cheng.github.io/main/img/%E5%A4%A7%E6%B3%A8%E9%87%8A%E5%AE%9E%E6%97%B6%E6%A8%A1%E7%89%88.jpg" alt="大注释实时模版">]</p>]]></content:encoded>
      
      
      <category domain="https://cjliblog.top/categories/%E8%84%9A%E6%9C%AC/">脚本</category>
      
      
      
      <comments>https://cjliblog.top/2024/06/09/%E5%A4%A7%E6%B3%A8%E9%87%8A%E5%AE%9E%E6%97%B6%E6%A8%A1%E7%89%88/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>近来感悟</title>
      <link>https://cjliblog.top/2024/06/07/%E8%BF%91%E6%9D%A5%E6%84%9F%E6%82%9F/</link>
      <guid>https://cjliblog.top/2024/06/07/%E8%BF%91%E6%9D%A5%E6%84%9F%E6%82%9F/</guid>
      <pubDate>Thu, 06 Jun 2024 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;1&quot;&gt;&lt;a href=&quot;#1&quot; class=&quot;headerlink&quot; title=&quot;1&quot;&gt;&lt;/a&gt;1&lt;/h2&gt;&lt;p&gt;有些傻子读了书，也只是读了书的傻子。满嘴科学，逻辑，客观，脑里只有精致利己，“自命不凡”，没有经验积累，逻辑全靠臆想。“知识分子”容易拿臆想当理性，</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="1"><a href="#1" class="headerlink" title="1"></a>1</h2><p>有些傻子读了书，也只是读了书的傻子。满嘴科学，逻辑，客观，脑里只有精致利己，“自命不凡”，没有经验积累，逻辑全靠臆想。“知识分子”容易拿臆想当理性，带着一股子“自我感觉良好实则猪狗不如”还不自知。人的“逻辑”不可能做到客观，因此不是真正的逻辑。对优绩主义深信不疑，忽略运气，以为既得利益都归结于自己的努力。现实里只是个整天和别人以嫉妒心暗暗较劲的垃圾，心里早已做好当人上人的美梦。自诩修养高尚不与人争论的人比比皆是，读了书的傻子是其中之一。</p><h2 id="2"><a href="#2" class="headerlink" title="2"></a>2</h2><p>网上所谓的中西医之争，本质是意识形态之争，利益之争，就不是效果之争，不是帮人与否之争。争来争去，没有一个人是看到病人临死时的痛苦，就是以科学、医学之名来维护各方利益。</p><h2 id="3"><a href="#3" class="headerlink" title="3"></a>3</h2><p>作文写的再好，也不过是满足阅卷人的喜好。我指的是所谓比赛和科研，本质上都是形式主义，而非真才实学。有真才实学之后再出的成就，才是真正的成就。因此不要略过了沉淀就开始水结果。</p><h2 id="4"><a href="#4" class="headerlink" title="4"></a>4</h2><p>十几年的学习的真正作用——储备知识，锻炼思维，进而增强能力，真正的目的在于建立良好的思维习惯，而不是学习得了多少分。不能再去拘泥于形式上有多少荣誉，而是成为自己行业里拿到好结果的那个人。目前对我来说，这个好结果就是好的工作、好的生活。</p><h2 id="5"><a href="#5" class="headerlink" title="5"></a>5</h2><p>相信直觉</p><p>有顶会确实有用</p><p>但是从顶会到变现还需要好几年</p><p>而实习一下一个月都可以拿万把来块了</p><p>算下这笔账</p><p>硕士毕业</p><p>和一个大二开始实习然后本科就业的</p><p>他妈一个都可以买房了</p><p>一个才刚毕业</p>]]></content:encoded>
      
      
      <category domain="https://cjliblog.top/categories/%E6%97%A5%E8%AE%B0/">日记</category>
      
      
      <category domain="https://cjliblog.top/tags/%E6%97%A5%E8%AE%B0-%E7%9F%AD%E5%8F%A5/">日记 短句</category>
      
      
      <comments>https://cjliblog.top/2024/06/07/%E8%BF%91%E6%9D%A5%E6%84%9F%E6%82%9F/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>ubuntuDocker部署</title>
      <link>https://cjliblog.top/2024/04/25/ubuntuDocker%E9%83%A8%E7%BD%B2/</link>
      <guid>https://cjliblog.top/2024/04/25/ubuntuDocker%E9%83%A8%E7%BD%B2/</guid>
      <pubDate>Wed, 24 Apr 2024 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;Ubuntu装docker&quot;&gt;&lt;a href=&quot;#Ubuntu装docker&quot; class=&quot;headerlink&quot; title=&quot;Ubuntu装docker&quot;&gt;&lt;/a&gt;Ubuntu装docker&lt;/h2&gt;&lt;p&gt;在Ubuntu 22.04上执行上述操作需要稍微调整</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="Ubuntu装docker"><a href="#Ubuntu装docker" class="headerlink" title="Ubuntu装docker"></a>Ubuntu装docker</h2><p>在Ubuntu 22.04上执行上述操作需要稍微调整命令，因为Ubuntu使用的是APT包管理器，而不是CentOS的YUM。首先，我们需要更新系统包列表，然后安装一些必要的软件包，如<code>apt-transport-https</code>、<code>ca-certificates</code>、<code>curl</code>、<code>software-properties-common</code>等，这些软件包将帮助我们添加Docker的官方GPG密钥和仓库。接下来，我们将添加Docker的官方APT仓库，然后安装Docker CE（社区版）和它的依赖包。最后，我们启动并使Docker服务开机自启，然后检查Docker版本和列出当前的Docker镜像。下面是具体的命令序列：</p><ol><li><p>更新APT包索引：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure></li><li><p>安装一些必要的包，这些包允许<code>apt</code>通过HTTPS使用仓库：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install -y apt-transport-https ca-certificates curl software-properties-common</span><br></pre></td></tr></table></figure></li><li><p>添加Docker的官方GPG密钥：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure></li><li><p>向<code>sources.list</code>中添加Docker的APT仓库：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository <span class="string">&quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu <span class="subst">$(lsb_release -cs)</span> stable&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>再次更新APT包索引（这一步是为了确保APT可以从新添加的Docker仓库中检索到包）：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure></li><li><p>安装Docker CE及其命令行工具：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install -y docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure></li><li><p>启动Docker服务：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure></li><li><p>设置Docker服务开机自启：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure></li><li><p>检查Docker版本以确认安装成功：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker version</span><br></pre></td></tr></table></figure></li><li><p>列出当前已有的Docker镜像：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure></li></ol>]]></content:encoded>
      
      
      <category domain="https://cjliblog.top/categories/%E7%AC%94%E8%AE%B0/">笔记</category>
      
      
      <category domain="https://cjliblog.top/tags/%E7%AC%94%E8%AE%B0/">笔记</category>
      
      
      <comments>https://cjliblog.top/2024/04/25/ubuntuDocker%E9%83%A8%E7%BD%B2/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>夏季日记</title>
      <link>https://cjliblog.top/2024/04/16/%E5%A4%8F%E5%AD%A3%E6%97%A5%E8%AE%B0/</link>
      <guid>https://cjliblog.top/2024/04/16/%E5%A4%8F%E5%AD%A3%E6%97%A5%E8%AE%B0/</guid>
      <pubDate>Mon, 15 Apr 2024 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;夏季日记&quot;&gt;&lt;a href=&quot;#夏季日记&quot; class=&quot;headerlink&quot; title=&quot;夏季日记&quot;&gt;&lt;/a&gt;夏季日记&lt;/h1&gt;&lt;h2 id=&quot;4-16&quot;&gt;&lt;a href=&quot;#4-16&quot; class=&quot;headerlink&quot; title=&quot;4-16&quot;&gt;&lt;/a</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="夏季日记"><a href="#夏季日记" class="headerlink" title="夏季日记"></a>夏季日记</h1><h2 id="4-16"><a href="#4-16" class="headerlink" title="4-16"></a>4-16</h2><p>​黑奴外包比赛终于结束，开始回归正轨。骗你的，还没。</p><p>​我先说一下接下来要做的事情。只因点方面，一个是补充一下计组和概统的内容，不过更重要的是先应付作业；研狗方面，就是周五之前改好代码，顺便学习一下点云、卷积、特征和GS具体原理与实现的相关的知识；然后是BBS项目方面，现在的团队虽然有一定的规模，但其实比较散，就像我自己其实也东西奔走，很少有空静下心处理这个项目，感觉是有必要花个小周末或小假期精心打磨一下，先把官网搭出来，暂定的话就这周末吧；另外一个是外包的尾巴，其实我这个网站还没部署，有必要把功能做全，其实今天开始就可以陆续开工了，也是尽量在本周末把它搭完，甚至可以把它直接和我们的BBS项目进行结合，当然，尽量不要暴露了学校，不然可能会泡汤。</p><p>​谔谔，不过现在紧要的是把电脑理一理，然后改一下服务器上所有中间件的密码（没错，交作品的时候暴露了），然后给5000端口做一个欢迎界面，给一个详细部署文档和样例服务。ok，接下来飞书布置一下任务，准备动手。</p><h3 id="butterfly框架的段落缩进-转载"><a href="#butterfly框架的段落缩进-转载" class="headerlink" title="butterfly框架的段落缩进(转载)"></a>butterfly框架的段落缩进(转载)</h3><p>​在 Butterfly<code>2.3.0</code> 以上的版本中，我们可以在 inject 里添加额外的 CSS 代码，支持以标准的 HTML 格式插入代码到头部 <code>&lt;/head&gt;</code> 之前和底部 <code>&lt;/body&gt;</code> 之前。</p><p>添加步骤如下：</p><ol><li><p>在 source 目录下创建名为 css 的新文件夹</p></li><li><p>在 css 文件夹下创建 CSS 文件，例如 <code>indent.css</code></p></li><li><p>打开并编辑 <code>indent.css</code> 文件，添加如下代码并保存：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#article-container &gt; p &#123;text-indent: 2em&#125;</span><br></pre></td></tr></table></figure><p><code>em</code> 这个单位的意思是文字的高度，<code>text-indent: 2em</code> 的意思是文本缩进两个个文字的高度。<br>因为汉字是方块字，高度和宽度是一样的，所以缩进两个文字的高度，就等于缩进两个文字的宽度，最后的效果就是缩进了两个文字。</p></li><li><p>修改主题配置文件<code>_config.butterfly.yml</code> 中的 inject 相关配置，插入如下代码：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;/css/indent.css&quot;&gt;</span><br></pre></td></tr></table></figure><p>注意：如果你的网站根目录不是‘&#x2F;’，引用本地 CSS 文件时，需加上你的根目录。<br>假设你的网站是 <code>https://owo.wyc.rest/blog</code>，则设置为：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;/blog/css/indent.css&quot;&gt;</span><br></pre></td></tr></table></figure></li><li><p>直接hexo s查看效果</p><blockquote><p><strong>文章作者:</strong> <a href="https://owo.wyc.rest/about/">忘忧草</a></p><p><strong>文章链接:</strong> <a href="https://owo.wyc.rest/indent/">https://owo.wyc.rest/indent/</a></p><p><strong>版权声明:</strong> 本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/">CC BY-NC-SA 4.0</a> 许可协议。转载请注明来自 <a href="https://owo.wyc.rest/">忘忧草の小破站</a>！</p></blockquote></li></ol><h2 id="4-19"><a href="#4-19" class="headerlink" title="4-19"></a>4-19</h2><p>整理一下这周科研任务：</p><ol><li>把global模型改好跑通，然后给出一个output的文件夹</li><li>用urban数据集给GS，原版Fed，新版fed跑出指标、渲染效果图片、output文件夹（点云然后来渲染）</li></ol><h2 id="4-22"><a href="#4-22" class="headerlink" title="4-22"></a>4-22</h2><p>java开发任务：在A15的基础上继续做，截止时间为五月底。</p><p>1.将微信登录功能做上去，并且与基础登录功能进行整合。</p><p>2.鸡翅的二期全部做上去。包括——多线程，openfeign，本地缓存，es，排行榜，点赞，xxljob等、</p><p>3.每天力扣+408时间大于1H</p><p>创：给套壳网站上GPT4turbo拿去收费，可以五十块一个月，30条&#x2F;3小时，。</p><p>课业：看课，课内内容每天时长大于1H</p><h2 id="4-24"><a href="#4-24" class="headerlink" title="4-24"></a>4-24</h2><p>开发：力扣一道，计网一轮完成、completable异步操作复习、openfeign与RPC的复习、guava本地缓存基本使用、入门了下k8s</p><p>明日开发：搞定一下hyper-v的环境。</p><p>明日科研：把build_global模型改出来点云文件，同时把gs和fs的对比跑一下。读一下论文。</p><h2 id="4-25"><a href="#4-25" class="headerlink" title="4-25"></a>4-25</h2><p>开发：力扣两道，操作系统结构，进程线程开头。</p><p>明日开发：看完操作系统进程和线程。</p><h2 id="4-27"><a href="#4-27" class="headerlink" title="4-27"></a>4-27</h2><p>开发：力扣一道手写哈希随机集合，操作系统看到14，计组4.2_3</p><p>明日开发：尝试泛型抽取本地缓存，然后步入ES基础，主要是做岗位的搜索。</p><p>炼丹：开炼，跑三张图出来</p><h2 id="4-28"><a href="#4-28" class="headerlink" title="4-28"></a>4-28</h2><p>先做一个短期的展望。后面可能会有一个大挑（深度）和一个神经论文，因此深度+神经这些AI基础需要小学一手，况且研狗的话这是必须的，另外GS其实也涉及。因此需要把所谓科研时间稍微分出来一部分用来学神经。那么如果想要好好利用上课时间去摸索，不去打扰主线开发，那么可以考虑一下对着动手学深度学习的书直接啃，没错就干他。其实也就增加这一个事情，其他不必考虑。目前事情有3：冲开发岗、深度与GS、学业。同时GS理论也有必要去补充一下。</p><p>开发：SQL，力扣一道</p><h2 id="4-29"><a href="#4-29" class="headerlink" title="4-29"></a>4-29</h2><p>计组：目前的方案就是删掉一切数电，然后下个vivado2023，重新开始。</p><h2 id="5-17"><a href="#5-17" class="headerlink" title="5-17"></a>5-17</h2><p>ok，鸽了很久，遇到了乱七八糟的事情，总结一下：</p><p>脑残行为： 1.期中考乱考 2.作业乱写 3.炼丹乱炼 4.疯狂旷课却不干正事 5.报了个创营</p><p>认真但收货甚微行为：1.练习算法 2.服创收尾 3.深度学习 4.未央面新人 5.好吧炼丹也算</p><p>结果就是，期中考依托答辩，作业写了没有入脑，旷课学识+6，创营要两个周末，直接鸽了。算法练得很辣鸡，服创也没能进国赛，深度学习学了半天还在线性代数部分，未央面了半天感觉也得不到很好的效果，炼丹炼了半天，老师觉得现在还是先学着，暑假再认真搞。。</p><p>ok，那么现在其实迎来三天小假期。我要做的事情就是重整旗鼓，不要萎靡。</p><p>最大的感受是来了台主机，但其实没啥用，除了做数据库作业可以ssh一下linux。（没错，如果买显卡感觉不划算），然后在寝室呆多了精神状态会萎靡，不如出来，虽然一直坐着也会低效，但是对比起来会更好。或者可以在工作安排里加上一个午休的晚休，会舒适和高效一点。</p><p>然后我肯定暑假会花很多时间去科研以及挑战杯在那里炼丹（也就是积累一下科研了，而且应该要发文章至少），一个是不会回家，还有一个是要花时间去搞数模（还不确定，如果他们要水一个，感觉挺麻烦的，前提是要积累一些方法了，所以最近一直在努力补深度学习和torch的用法）；最重要的是做开发，要有算法、八股、项目三重BUFF，然后冲下学期的日常实习这样，然后如果有paper可以顺势做一个华为的算法实习这样子，多多尝试。嗯没错，暑假就是沉淀。然后开发是面字节嘛？给自己定位是java面go岗。这不得不提到论坛了。暑假前务必要把answer啃下来，然后包括鸡翅club内的所有技术栈，再加上kafka和k8s之类流行的工具，主要目的是让论坛八月前运作起来，然后直接录取通知书宣传。嗯是这样。</p><p>所以长期看，下个暑期主打沉淀，大三上的话应该是实习为主，大三下和大四上ALL IN考研，别的不用想，上岸的话大四下就是实习科研自由分配了，没上岸就直接先求职即可，如果计划正常执行也有两段实习了，没有压力。</p><p>那么现在来规划以下不同方向的追求：</p><p>课业：为了弄点小钱，和考研的体面，稍微注意一下绩点，期末考起码平均90？作业的话平时多花点时间，因为其实看起来多，做完之后又会感觉空虚，不如做的时候好好做，其实也不多。</p><p>开发：answer完整啃下来，并且二开之后作为自己的第二项目。之前的zhipinkk的话可以持续优化，可以试试冲明年的服创。然后旁支就是jcclub的课程，特别是面试辅导部分。扩展技术栈的话，一个是自动化运维要学会，比如gitaction，找个机会学，还有kafka和k8s，这些只是知道但是还没用上过，可以找个机会写进去。然后是八股，主要刷B站的视频和二哥面渣。算法的话，我觉得有必要结合B站看一下，然后力扣平时保持手感，也能学点东西。周赛啥的没必要。最后冲刺阶段，要对自己的项目进行深挖，不过都是后话。</p><p>炼丹：先肯深度学习大书，然后是各种论文研读，还有对应的代码的理解。同时慢慢推这个训练任务，尝试接受超算平台的使用。</p><p>（5-19）六一之前的任务转移到本地了</p><h2 id="5-18"><a href="#5-18" class="headerlink" title="5-18"></a>5-18</h2><p>1.今天还在继续炼丹。</p><p>2.通过代码把go的总体架构了解了一下，但后面决定还是react和go还要再通过视频学习一下，因为直接看虽然宏观上比较高效，但实际体验不太OK。</p><p>3.写了一道滑动窗口算法。</p><p>4.未央拉了点人头</p><h2 id="5-19"><a href="#5-19" class="headerlink" title="5-19"></a>5-19</h2><p>1.王道计组第四章看完，时长约3小时。</p><p>2.体验GPT4o完成概率论作业，看了点概率论</p><p>3.看了点大数和数理统计入门</p><p>4.继续炼丹</p><p>5.开个GS小会，确定接下来任务：1.colmap转移到超算，然后直接训练local; 2.看懂代码、数据集</p><p>6.未央面试</p><p>7.研究后续计划</p><h2 id="5-20"><a href="#5-20" class="headerlink" title="5-20"></a>5-20</h2><p>累了，先总结下。今天由于上课和开会，自学时间有点少，但是明天很炸裂的一天，罕见的满课日子被我搞成都没课233。</p><p>总结下，但是日记版：</p><p>0.计组课又坐牢，等待他人答案了，下波验收，队友人很好，就是有点小摆。</p><p>0.5.下午也坐牢，什么坤吧数据库吼吼吼，没事，明天水一下作业，后面慢慢补。</p><p>1.总算是跑通超算，不过还有待debug。炼丹的话数据出现了些差错，上次的不算数，得重新跑。</p><p>2.无人机小会，确定这周调研方向。</p><p>3.算法两道easy，做得我气喘吁吁。</p><p>4.处理了下论坛进度，对UI姐挺满意的。</p><p>5.对小东西进行了一波指导，周六蹭饭去咯（bushi）</p><p>6.饿了两顿，晚上报复性吃了三顿的量（bushi)，老妈请客吼吼吼，还给我买了好喝的牛奶吼吼吼</p><p>7.英语单词开始刷了，好兆头。</p><p>8.go的课程看了一下，质量很好，我很喜欢，而且基础部分一针见血，不像免费的基础课拖拖拉拉，爱了爱了，原来好老师讲的基础也是很有魅力的，明天加油看。</p><p>9.看了下项目流程的视频，也算是产品的课吧，对于产品、运维和测试的工作还有待学习。</p><p>10.未完成：(react课程，rn课程、expo课程)(1h&#x2F;d)八股：刷计算机基础课(先看王道（去掉计组，因为上面有）0.5h&#x2F;d)、小林coding（1h&#x2F;d）。啃深度学习大书（0.5h&#x2F;d）。不过主打的是在炼丹上透支了太多时间233，明天补上，并且削减炼丹时间。加油。</p><p>11.哦对了想到一个产品，今天稍微随便写了一下，我觉得这个可以放到论坛项目里，就是对于我写的计划，他可以读取，然后形成一个一览无余的视图，然后我可以点击进行执行，然后他会计时，这样他会动态增加进度视图，再点就是暂停，达标了就会有反馈，这样就代表任务完成。还可以自己设置欠债，第二天主动完成。卧槽，这才是理想中的时间管理产品。我随便取了个名字timerMe。</p><h2 id="5-21"><a href="#5-21" class="headerlink" title="5-21"></a>5-21</h2><p>发现一天想做太多事有点碎片化，建议早上就专门用来处理杂项，然后下午晚上集中起来去处理算法。</p><h2 id="6-2"><a href="#6-2" class="headerlink" title="6-2"></a>6-2</h2><h3 id="关于git提交的时候的小bug"><a href="#关于git提交的时候的小bug" class="headerlink" title="关于git提交的时候的小bug"></a>关于git提交的时候的小bug</h3><p>老显示一些不该提交的文件，甚至交上去太大了。</p><p>idea中，搜索设置文件类型，找到忽略的文件和文件夹，添加.idea和target,可以避免提交idea本地配置和jar包等没用玩意，同时也避免了在左侧不小心恶意显示。</p>]]></content:encoded>
      
      
      <category domain="https://cjliblog.top/categories/%E6%97%A5%E8%AE%B0/">日记</category>
      
      
      <category domain="https://cjliblog.top/tags/%E6%97%A5%E8%AE%B0/">日记</category>
      
      
      <comments>https://cjliblog.top/2024/04/16/%E5%A4%8F%E5%AD%A3%E6%97%A5%E8%AE%B0/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Error java 错误 不支持发行版本5</title>
      <link>https://cjliblog.top/2024/04/12/Error%20java%20%E9%94%99%E8%AF%AF%20%E4%B8%8D%E6%94%AF%E6%8C%81%E5%8F%91%E8%A1%8C%E7%89%88%E6%9C%AC5%20/</link>
      <guid>https://cjliblog.top/2024/04/12/Error%20java%20%E9%94%99%E8%AF%AF%20%E4%B8%8D%E6%94%AF%E6%8C%81%E5%8F%91%E8%A1%8C%E7%89%88%E6%9C%AC5%20/</guid>
      <pubDate>Thu, 11 Apr 2024 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;搬运搬运！！！&lt;a href=&quot;https://blog.csdn.net/qq_51263533/article/details/120209830&quot;&gt;https://blog.csdn.net/qq_51263533/article/details/120209830&lt;</description>
        
      
      
      
      <content:encoded><![CDATA[<p>搬运搬运！！！<a href="https://blog.csdn.net/qq_51263533/article/details/120209830">https://blog.csdn.net/qq_51263533/article/details/120209830</a></p>]]></content:encoded>
      
      
      <category domain="https://cjliblog.top/categories/java/">java</category>
      
      
      <category domain="https://cjliblog.top/tags/java/">java</category>
      
      
      <comments>https://cjliblog.top/2024/04/12/Error%20java%20%E9%94%99%E8%AF%AF%20%E4%B8%8D%E6%94%AF%E6%8C%81%E5%8F%91%E8%A1%8C%E7%89%88%E6%9C%AC5%20/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>解决conda太慢的方案</title>
      <link>https://cjliblog.top/2024/04/12/%E8%A7%A3%E5%86%B3conda%E5%A4%AA%E6%85%A2%E7%9A%84%E6%96%B9%E6%A1%88/</link>
      <guid>https://cjliblog.top/2024/04/12/%E8%A7%A3%E5%86%B3conda%E5%A4%AA%E6%85%A2%E7%9A%84%E6%96%B9%E6%A1%88/</guid>
      <pubDate>Thu, 11 Apr 2024 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;conda config –set solver libmamba&lt;/p&gt;
&lt;p&gt;换回去&lt;/p&gt;
&lt;p&gt;conda config –set solver classic&lt;/p&gt;
&lt;p&gt;pip废物的结局方案：结尾加上：&lt;/p&gt;
&lt;figure class=&quot;highlight</description>
        
      
      
      
      <content:encoded><![CDATA[<p>conda config –set solver libmamba</p><p>换回去</p><p>conda config –set solver classic</p><p>pip废物的结局方案：结尾加上：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-i http://mirrors.aliyun.com/pypi/simple --trusted-host mirrors.aliyun.com</span><br></pre></td></tr></table></figure><p>可以在搜狗输入法放入这个自定义短语</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python demo.py --checkpoint-path checkpoint_iter_370000.pth --video 0</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set http_proxy=http://127.0.0.1:1438</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://cjliblog.top/categories/%E6%8A%80%E6%9C%AF/">技术</category>
      
      
      <category domain="https://cjliblog.top/tags/conda/">conda</category>
      
      
      <comments>https://cjliblog.top/2024/04/12/%E8%A7%A3%E5%86%B3conda%E5%A4%AA%E6%85%A2%E7%9A%84%E6%96%B9%E6%A1%88/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>三月日记</title>
      <link>https://cjliblog.top/2024/03/04/%E4%B8%89%E6%9C%88%E7%AC%94%E8%AE%B0/</link>
      <guid>https://cjliblog.top/2024/03/04/%E4%B8%89%E6%9C%88%E7%AC%94%E8%AE%B0/</guid>
      <pubDate>Mon, 04 Mar 2024 08:18:13 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;3-4&quot;&gt;&lt;a href=&quot;#3-4&quot; class=&quot;headerlink&quot; title=&quot;3-4&quot;&gt;&lt;/a&gt;3-4&lt;/h1&gt;&lt;h2 id=&quot;关于hexo部署脚本&quot;&gt;&lt;a href=&quot;#关于hexo部署脚本&quot; class=&quot;headerlink&quot; title=&quot;关</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="3-4"><a href="#3-4" class="headerlink" title="3-4"></a>3-4</h1><h2 id="关于hexo部署脚本"><a href="#关于hexo部署脚本" class="headerlink" title="关于hexo部署脚本"></a>关于hexo部署脚本</h2><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="keyword">call</span> hexo g</span><br><span class="line"><span class="keyword">call</span> hexo d</span><br></pre></td></tr></table></figure><p>后缀为bat，懂的都懂，省的打那么几个重复的字母，双击即可。</p><p>最后别放pause，不然还要手动关闭。</p><h2 id="力扣"><a href="#力扣" class="headerlink" title="力扣"></a>力扣</h2><h3 id="58-最后一个单词的长度"><a href="#58-最后一个单词的长度" class="headerlink" title="58. 最后一个单词的长度"></a>58. 最后一个单词的长度</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lengthOfLastWord</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="comment">// String[] words=s.split(&quot; &quot;);</span></span><br><span class="line">        <span class="comment">// return words[words.length-1].length();</span></span><br><span class="line">        String res=<span class="string">&quot;&quot;</span>;</span><br><span class="line">        ArrayList&lt;String&gt; words=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s.charAt(i)==<span class="string">&#x27; &#x27;</span>&amp;&amp;res!=<span class="string">&quot;&quot;</span>)&#123;</span><br><span class="line">                words.add(res);</span><br><span class="line">                res=<span class="string">&quot;&quot;</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(s.charAt(i)!=<span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">                res=res+s.charAt(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!res.equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">            words.add(res); <span class="comment">// 处理字符串末尾的单词</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> words.get(words.size()-<span class="number">1</span>).length();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="66-加一"><a href="#66-加一" class="headerlink" title="66.加一"></a>66.加一</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] plusOne(<span class="type">int</span>[] digits) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">carry</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        digits[digits.length - <span class="number">1</span>] = digits[digits.length - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> digits.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            digits[i] = digits[i] + carry;</span><br><span class="line">            carry=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (digits[i] == <span class="number">10</span>) &#123;</span><br><span class="line">                carry++;</span><br><span class="line">                digits[i] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (carry != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">int</span>[] ans = <span class="keyword">new</span> <span class="title class_">int</span>[digits.length + <span class="number">1</span>];</span><br><span class="line">            ans[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> digits;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="67-二进制求和"><a href="#67-二进制求和" class="headerlink" title="67.二进制求和"></a>67.二进制求和</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">addBinary</span><span class="params">(String a, String b)</span> &#123;</span><br><span class="line">        StringBuffer ans=<span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> n=Math.max(a.length(),b.length());</span><br><span class="line">        <span class="type">int</span> carry=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i&lt;a.length())&#123;</span><br><span class="line">                carry+=a.charAt(a.length()-<span class="number">1</span>-i)-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i&lt;b.length())&#123;</span><br><span class="line">                carry+=b.charAt(b.length()-<span class="number">1</span>-i)-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ans.append((<span class="type">char</span>)(carry%<span class="number">2</span>+<span class="string">&#x27;0&#x27;</span>));</span><br><span class="line">            carry/=<span class="number">2</span>;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(carry&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            ans.append(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        ans.reverse();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="69-x的平方根"><a href="#69-x的平方根" class="headerlink" title="69.x的平方根"></a>69.x的平方根</h3><p>法一：摸鱼法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">mySqrt</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="type">int</span> ans=(<span class="type">int</span>)Math.exp(<span class="number">0.5</span>*Math.log(x));</span><br><span class="line">        <span class="keyword">if</span>((<span class="type">long</span>)(ans+<span class="number">1</span>)*(ans+<span class="number">1</span>)&lt;=x)&#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="type">int</span>)ans+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">int</span>)ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>法二：二分法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">mySqrt</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">0</span>, r = x, ans = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (l &lt;= r) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (r - l) / <span class="number">2</span> + l;</span><br><span class="line">            <span class="keyword">if</span> ((<span class="type">long</span>)mid * mid &lt;= x) &#123;</span><br><span class="line">                ans = mid;</span><br><span class="line">                l = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                r=mid-<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>法三：牛顿装逼术</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">mySqrt</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(x==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">double</span> <span class="variable">C</span> <span class="operator">=</span> x, x0 = x;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="type">double</span> <span class="variable">xi</span> <span class="operator">=</span> <span class="number">0.5</span> * (x0 + C / x0);</span><br><span class="line">            <span class="keyword">if</span> (Math.abs(xi - x0) &lt; <span class="number">1e-7</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            x0 = xi;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (<span class="type">int</span>) x0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="70-爬楼梯"><a href="#70-爬楼梯" class="headerlink" title="70.爬楼梯"></a>70.爬楼梯</h3><p>法一：滚动数组+递归函数</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">climbStairs</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">int</span> a=<span class="number">0</span>,b=<span class="number">0</span>,c=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            a=b;</span><br><span class="line">            b=c;</span><br><span class="line">            c=a+b;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>法二：斐波那契+矩阵运算+快速幂</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">climbStairs</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[][] myJuzhen = &#123;</span><br><span class="line">                &#123; <span class="number">1</span>, <span class="number">1</span> &#125;,</span><br><span class="line">                &#123; <span class="number">1</span>, <span class="number">0</span> &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">int</span>[][] finalJuzhen = pow(myJuzhen, n);</span><br><span class="line">        <span class="keyword">return</span> finalJuzhen[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[][] pow(<span class="type">int</span>[][] juzhen, <span class="type">int</span> n) &#123;</span><br><span class="line">        <span class="type">int</span>[][] ret = &#123;</span><br><span class="line">                &#123; <span class="number">1</span>, <span class="number">0</span> &#125;,</span><br><span class="line">                &#123; <span class="number">0</span>, <span class="number">1</span> &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">while</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((n &amp; <span class="number">1</span>) == <span class="number">1</span>) &#123;</span><br><span class="line">                ret = multiply(ret, juzhen);</span><br><span class="line">            &#125;</span><br><span class="line">            n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">            juzhen = multiply(juzhen, juzhen);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[][] multiply(<span class="type">int</span>[][] a, <span class="type">int</span>[][] b) &#123;</span><br><span class="line">        <span class="type">int</span>[][] c = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">2</span>; j++) &#123;</span><br><span class="line">                c[i][j] = a[i][<span class="number">0</span>] * b[<span class="number">0</span>][j] + a[i][<span class="number">1</span>] * b[<span class="number">1</span>][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">            <span class="keyword">return</span> c;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="一点感想"><a href="#一点感想" class="headerlink" title="一点感想"></a>一点感想</h2><p>3-16</p><p>发现最近有点抽象了</p><p>干的事情很多又不知道干了什么，也没有记录，也不知道后面要干什么。</p><p>当然，挂在网上也不好意思给别人看，但是没人看还不如挂本地，，</p><h2 id="3-17"><a href="#3-17" class="headerlink" title="3-17"></a>3-17</h2><p>废除八股文计划，另外计划全部迁移到飞书日历（这玩意真好用）</p>]]></content:encoded>
      
      
      <category domain="https://cjliblog.top/categories/%E6%97%A5%E8%AE%B0/">日记</category>
      
      
      
      <comments>https://cjliblog.top/2024/03/04/%E4%B8%89%E6%9C%88%E7%AC%94%E8%AE%B0/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Go项目标准布局</title>
      <link>https://cjliblog.top/2023/12/13/GO%E8%AF%AD%E8%A8%80%E5%B8%83%E5%B1%80-%E4%B8%AD%E6%96%87%E7%89%88/</link>
      <guid>https://cjliblog.top/2023/12/13/GO%E8%AF%AD%E8%A8%80%E5%B8%83%E5%B1%80-%E4%B8%AD%E6%96%87%E7%89%88/</guid>
      <pubDate>Tue, 12 Dec 2023 16:00:00 GMT</pubDate>
      
      <description>大家好，我是description</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="Go项目标准布局"><a href="#Go项目标准布局" class="headerlink" title="Go项目标准布局"></a>Go项目标准布局</h1><ul><li><a href="README.md">English</a></li><li><a href="README_ko.md">한국어 문서</a></li><li><a href="README_zh.md">简体中文</a></li><li><a href="README_zh-TW.md">正體中文</a></li><li><a href="README_zh-CN.md">简体中文</a> - ???</li><li><a href="README_fr.md">Français</a></li><li><a href="README_ja.md">日本語</a></li><li><a href="README_ptBR.md">Portuguese</a></li><li><a href="README_es.md">Español</a></li><li><a href="README_ro.md">Română</a></li><li><a href="README_ru.md">Русский</a></li><li><a href="README_tr.md">Türkçe</a></li><li><a href="README_it.md">Italiano</a></li><li><a href="README_vi.md">Vietnamese</a></li><li><a href="README_ua.md">Українська</a></li><li><a href="README_id.md">Indonesian</a></li></ul><p>这是Go应用程序项目的基础布局。这不是Go核心开发团队定义的官方标准；无论是在经典项目还是在新兴的项目中，这都是Go生态系统中一组常见的项目布局模式。这其中有一些模式比另外的一些更受欢迎。它通过几个支撑目录为任何足够大规模的实际应用程序提供一些增强功能。</p><p>如果你正准备学习Go、正在构建PoC项目或编写玩具项目，那么按照这个项目进行布局就大材小用了。从一些真正简单的事情开始（一个<code>main.go</code>文件就足够了）。随着项目的增长，确保代码结构的合理是非常重要的，否则最终会出现很多隐藏的依赖关系和全局状态而导致这个项目的代码混乱。当一个项目多人同时进行时，就更需要有清晰的结构，此时引入一种通用的项目包&#x2F;标准库管理工具就显得尤为重要。当你维护一个开源项目或者有其他项目导入了你的代码，那么有一个私有的包（如<code>internal</code>）就很重要了。克隆这个项目，保留你项目中需要的部分，并删除其他部分。通常来说不需要也没必要使用这个项目中的全部内容。因为，从来没有在一个单一的项目中使用本项目中定义的全部模式，甚至如<code>vendor</code>模式。</p><p>Go 1.14 <code>Go Modules</code>已经可以用于生产环境。没有什么特殊原因的话，请使用<code>Go Modules</code>，使用它之后，你就再也不用担心<code>$GOPATH</code>的配置和项目实际的存放位置，项目想放在哪里就放在哪里。本项目中<code>go.mod</code>文件的内容假设你的项目是托管在GitHub上的，当然这不是必选项，因为<code>Module</code>中的路径可以是任意的值，一般<code>Module</code>路径的第一部分中应该包含一个点（最新版的Go中不再强制要求这一点，如果使用的是稍微旧一些的版本，那么可能遇到编译失败的问题）。了解更多请看Issues <a href="https://github.com/golang/go/issues/37554">37554</a>和 <a href="https://github.com/golang/go/issues/32819">32819</a>。</p><p>本项目布局有意设计的更通用一些，而不会尝试去引入一些特定的Go包结构。</p><p>这是社区共同的努力。如果发现了一种新的模式或者项目中已经存在的某些模式需要更新，请新建一个issue。</p><p>如果需要一些关于命名、格式化或者样式方面的帮助，请先运行<a href="https://golang.org/cmd/gofmt/"><code>gofmt</code></a>和<a href="https://github.com/golang/lint"><code>golint</code></a>。另外，请务必阅读以下Go代码样式指南和建议：</p><ul><li><p><a href="https://talks.golang.org/2014/names.slide">https://talks.golang.org/2014/names.slide</a></p></li><li><p><a href="https://golang.org/doc/effective_go.html#names">https://golang.org/doc/effective_go.html#names</a></p></li><li><p><a href="https://blog.golang.org/package-names">https://blog.golang.org/package-names</a></p></li><li><p><a href="https://github.com/golang/go/wiki/CodeReviewComments">https://github.com/golang/go/wiki/CodeReviewComments</a></p></li><li><p>Style guideline for Go packages (rakyll&#x2F;JBD)</p></li></ul><p>更多背景信息请查看<a href="https://medium.com/golang-learn/go-project-layout-e5213cdcfaa2"><code>Go Project Layout</code></a>。</p><p>有关命名和项目包组织样式以及其他代码结构的更多推荐文章：</p><ul><li><a href="https://www.youtube.com/watch?v=PTE4VJIdHPg">GopherCon EU 2018: Peter Bourgon - Best Practices for Industrial Programming</a></li><li><a href="https://www.youtube.com/watch?v=MzTcsI6tn-0">GopherCon Russia 2018: Ashley McNamara + Brian Ketelsen - Go best practices</a></li><li><a href="https://www.youtube.com/watch?v=ltqV6pDKZD8">GopherCon 2017: Edward Muller - Go Anti-Patterns</a></li><li><a href="https://www.youtube.com/watch?v=oL6JBUk6tj0">GopherCon 2018: Kat Zien - How Do You Structure Your Go Apps</a></li></ul><h2 id="Go目录"><a href="#Go目录" class="headerlink" title="Go目录"></a>Go目录</h2><h3 id="cmd"><a href="#cmd" class="headerlink" title="/cmd"></a><code>/cmd</code></h3><p>项目主要的应用程序。</p><p>对于每个应用程序来说这个目录的名字应该和项目可执行文件的名字相匹配（例如，<code>/cmd/myapp</code>）。</p><p>不要在这个目录中放太多的代码。如果目录中的代码可以被其他项目导入并使用，那么应该把他们放在<code>/pkg</code>目录。如果目录中的代码不可重用，或者不希望被他人使用，应该将代码放在<code>/internal</code>目录。显式地表明意图比较好！</p><p>通常来说，项目都应该拥有一个小的<code>main</code>函数，并在<code>main</code>函数中导入或者调用<code>/internal</code>和<code>/pkg</code>目录中的代码。</p><p>更多详情，请看<a href="https://github.com/golang-standards/project-layout/blob/master/cmd/README.md"><code>/cmd</code></a>目录中的例子。</p><h3 id="internal"><a href="#internal" class="headerlink" title="/internal"></a><code>/internal</code></h3><p>私有的应用程序代码库。这些是不希望被其他人导入的代码。请注意：这种模式是Go编译器强制执行的。详细内容情况Go 1.4的<a href="https://golang.org/doc/go1.4#internalpackages">release notes</a>。再次注意，在项目的目录树中的任意位置都可以有<code>internal</code>目录，而不仅仅是在顶级目录中。</p><p>可以在内部代码包中添加一些额外的结构，来分隔共享和非共享的内部代码。这不是必选项（尤其是在小项目中），但是有一个直观的包用途是很棒的。应用程序实际的代码可以放在<code>/internal/app</code>目录（如，<code>internal/app/myapp</code>），而应用程序的共享代码放在<code>/internal/pkg</code>目录（如，<code>internal/pkg/myprivlib</code>）中。</p><h3 id="pkg"><a href="#pkg" class="headerlink" title="/pkg"></a><code>/pkg</code></h3><p>外部应用程序可以使用的库代码（如，<code>/pkg/mypubliclib</code>）。其他项目将会导入这些库来保证项目可以正常运行，所以在将代码放在这里前，一定要三思而行。请注意，<code>internal</code>目录是一个更好的选择来确保项目私有代码不会被其他人导入，因为这是Go强制执行的。使用<code>/pkg</code>目录来明确表示代码可以被其他人安全的导入仍然是一个好方式。Travis Jeffery撰写的关于 <a href="https://travisjeffery.com/b/2019/11/i-ll-take-pkg-over-internal/">I’ll take pkg over internal</a> 文章很好地概述了<code>pkg</code>和<code>inernal</code>目录以及何时使用它们。</p><p>当您的根目录包含大量非Go组件和目录时，这也是一种将Go代码分组到一个位置的方法，从而使运行各种Go工具更加容易（在如下的文章中都有提到：2018年GopherCon <a href="https://www.youtube.com/watch?v=PTE4VJIdHPg">Best Practices for Industrial Programming</a>，<a href="https://www.youtube.com/watch?v=oL6JBUk6tj0">Kat Zien - How Do You Structure Your Go Apps</a> ，Golab 2018 <a href="https://www.youtube.com/watch?v=3gQa1LWwuzk">Massimiliano Pippi - Project layout patterns in Go</a>）。</p><p>点击查看<code>/pkg</code>就能看到那些使用这个布局模式的流行Go代码仓库。这是一种常见的布局模式，但未被普遍接受，并且Go社区中的某些人不推荐这样做。</p><p>如果项目确实很小并且嵌套的层次并不会带来多少价值（除非你就是想用它），那么就不要使用它。请仔细思考这种情况，当项目变得很大，并且根目录中包含的内容相当繁杂（尤其是有很多非Go的组件）。</p><h3 id="vendor"><a href="#vendor" class="headerlink" title="/vendor"></a><code>/vendor</code></h3><p>应用程序的依赖关系（通过手动或者使用喜欢的依赖管理工具，如新增的内置<a href="https://github.com/golang/go/wiki/Modules">Go Modules</a>特性）。执行<code>go mod vendor</code>命令将会在项目中创建<code>/vendor</code>目录，注意，如果使用的不是Go 1.14版本，在执行<code>go build</code>进行编译时，需要添加<code>-mod=vendor</code>命令行选项，因为它不是默认选项。</p><p>构建库文件时，不要提交应用程序依赖项。</p><p>请注意，从<a href="https://golang.org/doc/go1.13#modules">1.13</a>开始，Go也启动了模块代理特性（使用<code>https：//proxy.golang.org</code>作为默认的模块代理服务器）。点击<a href="https://blog.golang.org/module-mirror-launch">这里</a>阅读有关它的更多信息，来了解它是否符合所需要求和约束。如果<code>Go Module</code>满足需要，那么就不需要<code>vendor</code>目录。</p><h2 id="服务端应用程序的目录"><a href="#服务端应用程序的目录" class="headerlink" title="服务端应用程序的目录"></a>服务端应用程序的目录</h2><h3 id="api"><a href="#api" class="headerlink" title="/api"></a><code>/api</code></h3><p>OpenAPI&#x2F;Swagger规范，JSON模式文件，协议定义文件。</p><p>更多样例查看<a href="https://github.com/golang-standards/project-layout/blob/master/api/README.md"><code>/api</code></a>目录。</p><h2 id="Web应用程序的目录"><a href="#Web应用程序的目录" class="headerlink" title="Web应用程序的目录"></a>Web应用程序的目录</h2><h3 id="web"><a href="#web" class="headerlink" title="/web"></a><code>/web</code></h3><p>Web应用程序特定的组件：静态Web资源，服务器端模板和单页应用（Single-Page App，SPA）。</p><h2 id="通用应用程序的目录"><a href="#通用应用程序的目录" class="headerlink" title="通用应用程序的目录"></a>通用应用程序的目录</h2><h3 id="configs"><a href="#configs" class="headerlink" title="/configs"></a><code>/configs</code></h3><p>配置文件模板或默认配置。</p><p>将<code>confd</code>或者<code>consul-template</code>文件放在这里。</p><h3 id="init"><a href="#init" class="headerlink" title="/init"></a><code>/init</code></h3><p>系统初始化（systemd、upstart、sysv）和进程管理（runit、supervisord）配置。</p><h3 id="scripts"><a href="#scripts" class="headerlink" title="/scripts"></a><code>/scripts</code></h3><p>用于执行各种构建，安装，分析等操作的脚本。</p><p>这些脚本使根级别的Makefile变得更小更简单（例如<a href="https://github.com/hashicorp/terraform/blob/main/Makefile">https://github.com/hashicorp/terraform/blob/main/Makefile</a>）。</p><p>更多样例查看<a href="https://github.com/golang-standards/project-layout/blob/master/scripts/README.md"><code>/scripts</code></a>。</p><h3 id="build"><a href="#build" class="headerlink" title="/build"></a><code>/build</code></h3><p>打包和持续集成。</p><p>将云（AMI），容器（Docker），操作系统（deb，rpm，pkg）软件包配置和脚本放在<code>/build/package</code>目录中。</p><p>将CI（travis、circle、drone）配置文件和就脚本放在<code>build/ci</code>目录中。请注意，有一些CI工具（如，travis CI）对于配置文件的位置有严格的要求。尝试将配置文件放在<code>/build/ci</code>目录，然后链接到CI工具想要的位置。</p><h3 id="deployments"><a href="#deployments" class="headerlink" title="/deployments"></a><code>/deployments</code></h3><p>IaaS，PaaS，系统和容器编排部署配置和模板（docker-compose，kubernetes&#x2F;helm，mesos，terraform，bosh）。请注意，在某些存储库中（尤其是使用kubernetes部署的应用程序），该目录的名字是<code>/deploy</code>。</p><h3 id="test"><a href="#test" class="headerlink" title="/test"></a><code>/test</code></h3><p>外部测试应用程序和测试数据。随时根据需要构建<code>/test</code>目录。对于较大的项目，有一个数据子目录更好一些。例如，如果需要Go忽略目录中的内容，则可以使用<code>/test/data</code>或<code>/test/testdata</code>这样的目录名字。请注意，Go还将忽略以“<code>.</code>”或“<code>_</code>”开头的目录或文件，因此可以更具灵活性的来命名测试数据目录。</p><p>更多样例查看<a href="https://github.com/golang-standards/project-layout/blob/master/test/README.md"><code>/test</code></a>。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="docs"><a href="#docs" class="headerlink" title="/docs"></a><code>/docs</code></h3><p>设计和用户文档（除了godoc生成的文档）。</p><p>更多样例查看<a href="https://github.com/golang-standards/project-layout/blob/master/docs/README.md"><code>/docs</code></a>。</p><h3 id="tools"><a href="#tools" class="headerlink" title="/tools"></a><code>/tools</code></h3><p>此项目的支持工具。请注意，这些工具可以从<code>/pkg</code>和<code>/internal</code>目录导入代码。</p><p>更多样例查看<a href="https://github.com/golang-standards/project-layout/blob/master/tools/README.md"><code>/tools</code></a>。</p><h3 id="examples"><a href="#examples" class="headerlink" title="/examples"></a><code>/examples</code></h3><p>应用程序或公共库的示例。</p><p>更多样例查看<a href="https://github.com/golang-standards/project-layout/blob/master/examples/README.md"><code>/examples</code></a>。</p><h3 id="third-party"><a href="#third-party" class="headerlink" title="/third_party"></a><code>/third_party</code></h3><p>外部辅助工具，fork的代码和其他第三方工具（例如Swagger UI）。</p><h3 id="githooks"><a href="#githooks" class="headerlink" title="/githooks"></a><code>/githooks</code></h3><p>Git的钩子。</p><h3 id="assets"><a href="#assets" class="headerlink" title="/assets"></a><code>/assets</code></h3><p>项目中使用的其他资源（图像，Logo等）。</p><h3 id="website"><a href="#website" class="headerlink" title="/website"></a><code>/website</code></h3><p>如果不使用Github pages，则在这里放置项目的网站数据。</p><p>更多样例查看<a href="https://github.com/golang-standards/project-layout/blob/master/website/README.md"><code>/website</code></a>。</p><h2 id="不应该出现的目录"><a href="#不应该出现的目录" class="headerlink" title="不应该出现的目录"></a>不应该出现的目录</h2><h3 id="src"><a href="#src" class="headerlink" title="/src"></a><code>/src</code></h3><p>有一些Go项目确实包含<code>src</code>文件夹，但通常只有在开发者是从Java（这是Java中一个通用的模式）转过来的情况下才会有。如果可以的话请不要使用这种Java模式。你肯定不希望你的Go代码和项目看起来像Java。</p><p>不要将项目级别的<code>/src</code>目录与Go用于其工作空间的<code>/src</code>目录混淆，就像<a href="https://golang.org/doc/code.html">How to Write Go Code</a>中描述的那样。<code>$GOPATH</code>环境变量指向当前的工作空间（默认情况下指向非Windows系统中的<code>$HOME/go</code>）。此工作空间包括顶级<code>/pkg</code>，<code>/bin</code>和<code>/src</code>目录。实际的项目最终变成<code>/src</code>下的子目录，因此，如果项目中有<code>/src</code>目录，则项目路径将会变成：<code>/some/path/to/workspace/src/your_project/src/your_code.go</code>。请注意，使用Go 1.11，可以将项目放在GOPATH之外，但这并不意味着使用此布局模式是个好主意。</p><h2 id="徽章"><a href="#徽章" class="headerlink" title="徽章"></a>徽章</h2><ul><li><a href="https://goreportcard.com/">Go Report Card</a>：它将使用<code>gofmt</code>，<code>vet</code>，<code>gocyclo</code>，<code>golint</code>，<code>ineffassign</code>，<code>license</code>和<code>mispell</code>扫描项目中的代码。将<code>github.com/golang-standards/project-layout</code>替换为你的项目的引用。</li><li><a href="http://godoc.org/">GoDoc</a>：它将提供GoDoc生成的文档的在线版本。更改链接以指向你的项目。</li><li>Release：它将显示你项目的最新版本号。更改github链接以指向你的项目。</li></ul><p><a href="https://goreportcard.com/report/github.com/golang-standards/project-layout"><img src="https://goreportcard.com/badge/github.com/golang-standards/project-layout?style=flat-square" alt="Go Report Card"></a><br><a href="http://godoc.org/github.com/golang-standards/project-layout"><img src="https://img.shields.io/badge/godoc-reference-blue.svg?style=flat-square" alt="Go Doc"></a><br><a href="https://github.com/golang-standards/project-layout/releases/latest"><img src="https://img.shields.io/github/release/golang-standards/project-layout.svg?style=flat-square" alt="Release"></a></p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>WIP项目是一个自以为是的项目模板其中带有<code>sample/reusable</code>配置、脚本和代码。</p>]]></content:encoded>
      
      
      <category domain="https://cjliblog.top/categories/go/">go</category>
      
      
      
      <comments>https://cjliblog.top/2023/12/13/GO%E8%AF%AD%E8%A8%80%E5%B8%83%E5%B1%80-%E4%B8%AD%E6%96%87%E7%89%88/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>go的入门</title>
      <link>https://cjliblog.top/2023/12/13/go%E7%9A%84%E5%85%A5%E9%97%A8/</link>
      <guid>https://cjliblog.top/2023/12/13/go%E7%9A%84%E5%85%A5%E9%97%A8/</guid>
      <pubDate>Tue, 12 Dec 2023 16:00:00 GMT</pubDate>
      
      <description>大家好，我是description</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h1><h3 id="初学者阶段"><a href="#初学者阶段" class="headerlink" title="初学者阶段"></a>初学者阶段</h3><ol><li><p><strong>基本语法和概念</strong></p><ul><li>变量、数据类型（比如整型、字符串）</li><li>控制结构（if、for循环）</li><li>函数的定义和调用</li><li>错误处理（error 类型）</li></ul></li><li><p><strong>基本的数据结构</strong></p><ul><li>数组和切片</li><li>映射（map）</li><li>结构体（struct）</li></ul></li><li><p><strong>包（Package）的使用</strong></p><ul><li>导入标准库包</li><li>创建自己的包</li><li>理解包的导入路径和可见性</li></ul></li><li><p><strong>简单的程序编写</strong></p><ul><li>编写小程序，如计算器、简单的文件操作等</li></ul></li><li><p><strong>工具和环境</strong></p><ul><li>Go 工具链（如 go build, go run）</li><li>理解 GOPATH 和模块</li></ul></li></ol><h3 id="进阶阶段"><a href="#进阶阶段" class="headerlink" title="进阶阶段"></a>进阶阶段</h3><ol><li><p><strong>并发编程</strong></p><ul><li>协程（goroutine）</li><li>通道（channel）</li><li>sync 包的使用（如 WaitGroup）</li></ul></li><li><p><strong>更复杂的数据结构</strong></p><ul><li>接口（interface）</li><li>切片和映射的高级用法</li><li>使用指针</li></ul></li><li><p><strong>错误处理和测试</strong></p><ul><li>深入理解 error 接口</li><li>编写单元测试（testing 包）</li><li>基准测试（benchmark）</li></ul></li><li><p><strong>网络编程</strong></p><ul><li>HTTP 服务器和客户端</li><li>使用 TCP&#x2F;UDP</li></ul></li><li><p><strong>项目结构和设计模式</strong></p><ul><li>组织大型 Go 项目</li><li>掌握常用设计模式</li></ul></li></ol><h3 id="高级阶段"><a href="#高级阶段" class="headerlink" title="高级阶段"></a>高级阶段</h3><ol><li><p><strong>性能优化</strong></p><ul><li>分析和优化性能（pprof）</li><li>内存管理和垃圾回收</li><li>并发模式和优化</li></ul></li><li><p><strong>微服务和容器化</strong></p><ul><li>使用 Docker 容器化 Go 应用</li><li>了解微服务架构</li></ul></li><li><p><strong>云原生和 DevOps</strong></p><ul><li>Kubernetes 与 Go</li><li>CI&#x2F;CD 流程</li></ul></li><li><p><strong>高级网络编程</strong></p><ul><li>深入理解网络协议</li><li>构建复杂的网络应用</li></ul></li><li><p><strong>贡献开源项目</strong></p><ul><li>理解开源文化</li><li>参与 Go 相关的开源项目</li></ul></li></ol><h1 id="结构体实例和json的转换"><a href="#结构体实例和json的转换" class="headerlink" title="结构体实例和json的转换"></a>结构体实例和json的转换</h1><ol><li><p><strong>定义结构体</strong>：首先是你提供的 <code>TODO</code> 结构体。</p> <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> TODO <span class="keyword">struct</span> &#123;</span><br><span class="line">    ID      <span class="type">int</span>    <span class="string">`json:&quot;id&quot;`</span></span><br><span class="line">    Content <span class="type">string</span> <span class="string">`json:&quot;content&quot;`</span></span><br><span class="line">    Done    <span class="type">bool</span>   <span class="string">`json:&quot;done&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>序列化（Struct 到 JSON）</strong>：将一个 <code>TODO</code> 结构体的实例转换成JSON字符串。</p> <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;encoding/json&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;log&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 创建一个TODO实例</span></span><br><span class="line">    todo := TODO&#123;ID: <span class="number">1</span>, Content: <span class="string">&quot;买菜&quot;</span>, Done: <span class="literal">false</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将TODO实例转换为JSON格式</span></span><br><span class="line">    jsonData, err := json.Marshal(todo)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatalf(<span class="string">&quot;Error occurred during marshaling. Error: %s&quot;</span>, err.Error())</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(<span class="type">string</span>(jsonData))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>反序列化（JSON 到 Struct）</strong>：将一个JSON字符串解析成 <code>TODO</code> 结构体的实例。</p> <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// JSON字符串</span></span><br><span class="line">    jsonString := <span class="string">`&#123;&quot;id&quot;:1, &quot;content&quot;:&quot;买菜&quot;, &quot;done&quot;:false&#125;`</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将JSON字符串解析到TODO结构体</span></span><br><span class="line">    <span class="keyword">var</span> todo TODO</span><br><span class="line">    err := json.Unmarshal([]<span class="type">byte</span>(jsonString), &amp;todo)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatalf(<span class="string">&quot;Error occurred during unmarshaling. Error: %s&quot;</span>, err.Error())</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%+v\n&quot;</span>, todo)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="解释："><a href="#解释：" class="headerlink" title="解释："></a>解释：</h3><ul><li><p><strong>序列化</strong>：<code>json.Marshal</code> 函数用于将结构体转换为JSON字符串。它会自动根据结构体中定义的JSON标签进行转换。</p></li><li><p><strong>反序列化</strong>：<code>json.Unmarshal</code> 函数用于将JSON字符串解析为结构体。同样地，它会根据JSON标签来决定如何填充结构体的字段。</p></li></ul><p>这两个过程非常关键，尤其是在处理Web API或数据存储时。通过这种方式，Go语言能够方便地处理JSON数据，让你的编程之旅更加顺畅！</p><p>试试看运行这些代码，看看结果如何！如果有任何疑问，或者想要探讨更多，随时告诉我哦！ 😊👨‍💻🚀</p><p>好问题！解释一下这个 <code>json.Unmarshal([]byte(jsonString), &amp;todo)</code> 语句，我们可以分两部分来看：</p><ol><li><p><code>[]byte(jsonString)</code>：</p><ul><li>这里，我们把字符串 <code>jsonString</code> 转换成了一个字节切片（<code>[]byte</code>）。</li><li>为什么要这么做呢？因为 <code>json.Unmarshal</code> 函数需要一个字节切片作为输入。在Go语言中，JSON数据通常以字节形式处理，这样可以更高效，特别是处理大量数据时。</li><li>简单来说，<code>[]byte(jsonString)</code> 就是把JSON格式的字符串转换成了Go能够处理的字节格式。</li></ul></li><li><p><code>&amp;todo</code>：</p><ul><li>这里用到了取地址符号 <code>&amp;</code>，意味着我们传递给 <code>json.Unmarshal</code> 的是 <code>todo</code> 变量的地址，而不是它的值。</li><li>为什么要传递地址？因为 <code>json.Unmarshal</code> 需要在这个地址上直接修改数据。如果我们只传递值（即不用 <code>&amp;</code>），那么 <code>json.Unmarshal</code> 只能修改副本的数据，原始的 <code>todo</code> 变量则不会改变。</li><li>通过传递 <code>todo</code> 变量的地址，<code>json.Unmarshal</code> 能够直接在这个地址上更新 <code>todo</code> 的字段，这样我们就能得到解析后的数据了。</li></ul></li></ol><p>总结一下，<code>json.Unmarshal([]byte(jsonString), &amp;todo)</code> 这行代码的作用是：它把JSON字符串转换成字节切片，然后把这些字节解析成 <code>TODO</code> 结构体的数据，直接写入到 <code>todo</code> 变量中。这是Go语言处理JSON非常常用的一种方式，既高效又直接。</p><h1 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h1><p>在Go语言中，切片（Slice）是一种非常灵活且功能丰富的数据结构。切片提供了多种操作方法来处理动态序列。让我们一起来看看切片的常见操作吧：</p><h3 id="1-创建切片"><a href="#1-创建切片" class="headerlink" title="1. 创建切片"></a>1. 创建切片</h3><ul><li>使用 <code>make</code>：<code>make([]int, length, capacity)</code> 创建一个指定长度和容量的切片。</li><li>从数组或切片中创建：<code>array[start:end]</code> 从数组或另一个切片中创建切片。</li></ul><h3 id="2-添加元素"><a href="#2-添加元素" class="headerlink" title="2. 添加元素"></a>2. 添加元素</h3><ul><li><code>append</code>：<code>slice = append(slice, elem1, elem2)</code> 添加一个或多个元素到切片的末尾。</li></ul><h3 id="3-删除元素"><a href="#3-删除元素" class="headerlink" title="3. 删除元素"></a>3. 删除元素</h3><ul><li>删除指定位置的元素：使用 <code>append</code> 和切片操作组合来删除元素，例如 <code>append(slice[:i], slice[i+1:]...)</code>。</li></ul><h3 id="4-访问和修改元素"><a href="#4-访问和修改元素" class="headerlink" title="4. 访问和修改元素"></a>4. 访问和修改元素</h3><ul><li>通过索引：<code>slice[i]</code> 访问或修改第 <code>i</code> 个元素。</li></ul><h3 id="5-切片的长度和容量"><a href="#5-切片的长度和容量" class="headerlink" title="5. 切片的长度和容量"></a>5. 切片的长度和容量</h3><ul><li><code>len(slice)</code>：返回切片的当前长度。</li><li><code>cap(slice)</code>：返回切片的容量。</li></ul><h3 id="6-切片遍历"><a href="#6-切片遍历" class="headerlink" title="6. 切片遍历"></a>6. 切片遍历</h3><ul><li>使用 <code>for</code> 循环：<code>for i := range slice &#123; ... &#125;</code>。</li><li>使用 <code>for</code> 循环和索引：<code>for i, v := range slice &#123; ... &#125;</code>。</li></ul><h3 id="7-切片复制"><a href="#7-切片复制" class="headerlink" title="7. 切片复制"></a>7. 切片复制</h3><ul><li><code>copy</code>：<code>copy(destSlice, srcSlice)</code> 将一个切片的元素复制到另一个切片。</li></ul><h3 id="8-切片截取"><a href="#8-切片截取" class="headerlink" title="8. 切片截取"></a>8. 切片截取</h3><ul><li><code>slice[start:end]</code>：截取切片的一部分。</li></ul><h3 id="9-多维切片"><a href="#9-多维切片" class="headerlink" title="9. 多维切片"></a>9. 多维切片</h3><ul><li>像数组一样，你可以创建多维切片。</li></ul><h3 id="10-切片的排序"><a href="#10-切片的排序" class="headerlink" title="10. 切片的排序"></a>10. 切片的排序</h3><ul><li>使用 <code>sort</code> 包：<code>sort.Ints(slice)</code> 对整数切片排序。</li></ul><h3 id="11-清空切片"><a href="#11-清空切片" class="headerlink" title="11. 清空切片"></a>11. 清空切片</h3><ul><li>设置为 nil：<code>slice = nil</code> 清空切片。</li></ul><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;sort&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 创建切片</span></span><br><span class="line">slice := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">0</span>, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加元素</span></span><br><span class="line">slice = <span class="built_in">append</span>(slice, <span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 排序</span></span><br><span class="line">sort.Ints(slice)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历</span></span><br><span class="line"><span class="keyword">for</span> _, value := <span class="keyword">range</span> slice &#123;</span><br><span class="line">fmt.Println(value)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除第一个元素</span></span><br><span class="line">slice = slice[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 显示结果</span></span><br><span class="line">fmt.Println(slice)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-使用-interface-类型的切片"><a href="#1-使用-interface-类型的切片" class="headerlink" title="1. 使用 interface{} 类型的切片"></a>1. 使用 <code>interface&#123;&#125;</code> 类型的切片</h3><p>最通用的方法是使用 <code>interface&#123;&#125;</code> 类型的切片，因为在Go中，<code>interface&#123;&#125;</code> 可以表示任何类型的值。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> mixedSlice []<span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">mixedSlice = <span class="built_in">append</span>(mixedSlice, <span class="string">&quot;Hello&quot;</span>, <span class="number">42</span>, <span class="literal">true</span>, <span class="number">3.14</span>)</span><br></pre></td></tr></table></figure><p>这种方式允许你将任何类型的数据添加到切片中，但在使用时需要注意类型断言，因为你需要明确知道你在处理什么类型的数据。</p><h3 id="2-使用结构体和方法"><a href="#2-使用结构体和方法" class="headerlink" title="2. 使用结构体和方法"></a>2. 使用结构体和方法</h3><p>如果你知道你想要存储的数据类型的范围，你可以定义一个结构体，这个结构体包含所有可能的类型，然后在切片中存储这个结构体的实例。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> MixedType <span class="keyword">struct</span> &#123;</span><br><span class="line">    intValue    <span class="type">int</span></span><br><span class="line">    stringValue <span class="type">string</span></span><br><span class="line">    boolValue   <span class="type">bool</span></span><br><span class="line">    <span class="comment">// 其他类型</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> mixedSlice []MixedType</span><br><span class="line">mixedSlice = <span class="built_in">append</span>(mixedSlice, MixedType&#123;intValue: <span class="number">1</span>&#125;, MixedType&#123;stringValue: <span class="string">&quot;Hello&quot;</span>&#125;)</span><br></pre></td></tr></table></figure><p>这种方法提供了更好的类型安全性，但牺牲了一些灵活性和便利性。</p><h3 id="3-使用第三方库"><a href="#3-使用第三方库" class="headerlink" title="3. 使用第三方库"></a>3. 使用第三方库</h3><p>还有一些第三方库提供了类似于动态类型数组的功能，但这通常不被推荐，除非你确实需要这种特殊的功能，并且愿意引入额外的依赖。</p><h3 id="使用-interface-切片的示例"><a href="#使用-interface-切片的示例" class="headerlink" title="使用 interface{} 切片的示例"></a>使用 <code>interface&#123;&#125;</code> 切片的示例</h3><p>这里有一个简单的示例，展示如何使用 <code>interface&#123;&#125;</code> 类型的切片：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;reflect&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 创建一个可以存储任何类型的切片</span></span><br><span class="line"><span class="keyword">var</span> mixedSlice []<span class="keyword">interface</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向切片中添加不同类型的数据</span></span><br><span class="line">mixedSlice = <span class="built_in">append</span>(mixedSlice, <span class="string">&quot;Hello&quot;</span>, <span class="number">42</span>, <span class="literal">true</span>, <span class="number">3.14</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历切片并打印每个元素的类型和值</span></span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> mixedSlice &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;Type: %s, Value: %v\n&quot;</span>, reflect.TypeOf(v), v)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个示例展示了如何创建一个可以存储不同类型数据的切片，以及如何遍历这个切片并打印出每个元素的类型和值。使用 <code>interface&#123;&#125;</code> 类型的切片确实提供了灵活性，但也需要在使用时小心处理类型断言和类型检查。</p><p>总的来说，尽管Go语言不直接支持存储不同类型数据的切片，但你可以通过上述方法来实现类似的功能。然而，总是需要权衡灵活性和类型安全性。如果你有特定的使用场景，选择合适的方法很重要。</p><h1 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h1><p>当然可以！讲解映射（Map）这个概念，我们要从几个方面来理解：</p><h3 id="映射（Map）的基本概念"><a href="#映射（Map）的基本概念" class="headerlink" title="映射（Map）的基本概念"></a>映射（Map）的基本概念</h3><ol><li><p><strong>定义与特点</strong></p><ul><li>映射是一种键值对（Key-Value）的数据结构。</li><li>在 Go 里，映射的键可以是任何可比较的类型，比如 int、string。</li><li>值可以是任何类型，甚至可以是另一个映射。</li><li>映射是无序的，每次遍历映射时，键值对的顺序可能不同。</li></ul></li><li><p><strong>创建和初始化</strong></p><ul><li>使用内置的 <code>make</code> 函数：<code>mapVar := make(map[KeyType]ValueType)</code></li><li>字面量初始化：<code>mapVar := map[KeyType]ValueType&#123;key1: value1, key2: value2&#125;</code></li></ul></li><li><p><strong>操作</strong></p><ul><li><strong>添加&#x2F;修改元素</strong>：<code>mapVar[key] = value</code></li><li><strong>获取元素</strong>：<code>value := mapVar[key]</code></li><li><strong>删除元素</strong>：<code>delete(mapVar, key)</code></li><li><strong>检查键是否存在</strong>：<code>value, ok := mapVar[key]</code>（如果 key 存在，<code>ok</code> 为 <code>true</code>；否则，<code>ok</code> 为 <code>false</code>）</li></ul></li></ol><h3 id="映射的使用场景"><a href="#映射的使用场景" class="headerlink" title="映射的使用场景"></a>映射的使用场景</h3><ul><li><strong>存储唯一键的集合</strong>：比如用户名到用户信息的映射。</li><li><strong>快速查找</strong>：通过键可以迅速找到对应的值。</li><li><strong>作为集合的替代品</strong>：特别是需要键和值对应时。</li></ul><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li><strong>并发安全性</strong>：标准的 <code>map</code> 在并发情况下不是安全的。需要使用锁（如 <code>sync.Mutex</code>）或者使用 <code>sync.Map</code>。</li><li><strong>零值</strong>：访问不存在的键时，会得到值类型的零值，如 int 的零值是 0。</li><li><strong>迭代顺序</strong>：遍历 map 时，每次的迭代顺序可能不同，不能假设它们有序。</li></ul><h3 id="示例代码-1"><a href="#示例代码-1" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 创建一个映射</span></span><br><span class="line">    myMap := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 添加元素</span></span><br><span class="line">    myMap[<span class="string">&quot;apple&quot;</span>] = <span class="number">5</span></span><br><span class="line">    myMap[<span class="string">&quot;banana&quot;</span>] = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取并打印一个元素</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;apples:&quot;</span>, myMap[<span class="string">&quot;apple&quot;</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查元素是否存在</span></span><br><span class="line">    value, ok := myMap[<span class="string">&quot;orange&quot;</span>]</span><br><span class="line">    <span class="keyword">if</span> ok &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;orange:&quot;</span>, value)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;orange not found&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除一个元素</span></span><br><span class="line">    <span class="built_in">delete</span>(myMap, <span class="string">&quot;apple&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历映射</span></span><br><span class="line">    <span class="keyword">for</span> key, value := <span class="keyword">range</span> myMap &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;%s has %d items\n&quot;</span>, key, value)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="包"><a href="#包" class="headerlink" title="包"></a>包</h1><p>在 Go 语言中，理解包的导入路径和可见性是非常重要的。这不仅关系到如何组织代码，还影响着代码的可访问性和重用性。我们来逐一看看：</p><h3 id="包的导入路径"><a href="#包的导入路径" class="headerlink" title="包的导入路径"></a>包的导入路径</h3><ol><li><p><strong>定义</strong></p><ul><li>包的导入路径是用来在 Go 程序中引入包的路径。它可以是相对路径或绝对路径。</li></ul></li><li><p><strong>GOPATH 和 Go Modules</strong></p><ul><li>在 Go Modules 出现之前，Go 依赖于 <code>GOPATH</code> 环境变量来寻找项目和包。</li><li>Go 1.11 引入了 Go Modules，使得你可以在任何地方创建项目，不再受限于 <code>GOPATH</code>。</li><li>使用 Go Modules 时，包的导入路径通常是模块路径加上包的子路径。</li></ul></li><li><p><strong>模块路径</strong></p><ul><li>模块路径通常是版本控制仓库的路径（例如 <code>github.com/username/project</code>）。</li><li>在项目的根目录下的 <code>go.mod</code> 文件中声明模块路径。</li></ul></li></ol><h3 id="包的可见性"><a href="#包的可见性" class="headerlink" title="包的可见性"></a>包的可见性</h3><ol><li><p><strong>公开可见性（Exported）</strong></p><ul><li>在 Go 中，如果一个标识符（如函数、类型、变量等）的首字母是大写的，那么它就是公开的，可以被其他包访问。</li><li>例如，<code>Println</code> 是 <code>fmt</code> 包中的一个公开函数。</li></ul></li><li><p><strong>私有可见性（Unexported）</strong></p><ul><li>如果一个标识符的首字母是小写的，那么它是私有的，只能在其所在的包内部访问。</li><li>这对封装和隐藏实现细节非常重要。</li></ul></li></ol><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>假设我们有一个项目结构如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- /path/to/myproject</span><br><span class="line">  - go.mod (module github.com/myuser/myproject)</span><br><span class="line">  - main.go</span><br><span class="line">  - helper</span><br><span class="line">    - helper.go</span><br></pre></td></tr></table></figure><p>在这个结构中：</p><ul><li>导入路径：如果 <code>helper.go</code> 中定义了一个包 <code>package helper</code>，那么在 <code>main.go</code> 中导入它时的路径是 <code>github.com/myuser/myproject/helper</code>。</li><li>可见性：如果 <code>helper.go</code> 中定义了一个公开函数 <code>Func()</code>，则在 <code>main.go</code> 中可以访问它。如果是私有函数 <code>func()</code>，则不能。</li></ul><p>通过这样的机制，Go 语言实现了良好的代码组织、模块化和封装。理解这些概念对于编写清晰、易于维护的 Go 代码至关重要。💻📘</p><p>在 Go 语言中，当你使用像 <code>github.com/myuser/myproject/helper</code> 这样的导入路径时，你实际上是按照 Go 的包（package）导入机制来引入代码。这里，<code>github.com/myuser/myproject/helper</code> 并不是直接导入 GitHub 仓库中的代码，而是指定了一个本地环境中的包路径，这个路径通常与远程仓库的 URL 相对应。让我来详细解释一下：</p><h3 id="本地包导入"><a href="#本地包导入" class="headerlink" title="本地包导入"></a>本地包导入</h3><ol><li><p><strong>模块与包的关系</strong></p><ul><li>在 Go 中，一个模块是包含一个或多个包的集合。</li><li><code>go.mod</code> 文件定义了模块的根路径（例如 <code>github.com/myuser/myproject</code>）。</li><li>在此模块内，你可以有多个包，例如 <code>helper</code>。</li></ul></li><li><p><strong>导入机制</strong></p><ul><li>当你在代码中写 <code>import &quot;github.com/myuser/myproject/helper&quot;</code> 时，Go 会在本地环境中查找这个路径。</li><li>这通常意味着在你的项目目录（包含 <code>go.mod</code> 文件的地方）下应该有一个 <code>helper</code> 子目录。</li><li>这个 <code>helper</code> 子目录应该包含 Go 代码文件（如 <code>helper.go</code>），并且这些文件的包声明应该是 <code>package helper</code>。</li></ul></li></ol><h3 id="远程仓库与依赖管理"><a href="#远程仓库与依赖管理" class="headerlink" title="远程仓库与依赖管理"></a>远程仓库与依赖管理</h3><ol><li><p><strong>依赖获取</strong></p><ul><li>当你的项目依赖于 GitHub 上的其他项目时，例如 <code>import &quot;github.com/someuser/somelibrary&quot;</code>，Go 会使用 Go Modules（如果你的项目启用了它）来管理这些依赖。</li><li>这时，Go 会从远程仓库下载依赖到本地的模块缓存中，并在构建时使用这些依赖。</li></ul></li><li><p><strong>版本管理</strong></p><ul><li>Go Modules 允许你指定依赖的确切版本，例如在 <code>go.mod</code> 文件中。</li><li>这确保了项目构建的一致性，因为它会使用确定的依赖版本。</li></ul></li></ol><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><ul><li>所以，当你写 <code>import &quot;github.com/myuser/myproject/helper&quot;</code> 时，你实际上是引入了你本地项目内部的一个包，而不是直接从 GitHub 导入。</li><li>如果你的项目依赖于 GitHub 或其他版本控制系统上的外部项目，Go Modules 会负责下载和管理这些依赖。</li></ul><p>这种机制非常适合版本控制和协作开发，确保了代码的模块化和依赖管理的清晰。💻🔍🌐</p><h1 id="go工具链和go模块"><a href="#go工具链和go模块" class="headerlink" title="go工具链和go模块"></a>go工具链和go模块</h1><p>在 Go 语言中，”Go 工具链”和”模块”是两个非常核心的概念，特别是对于项目的构建、依赖管理和包的组织来说至关重要。下面我们来详细探讨一下这两个概念：</p><h3 id="Go-工具链（Go-Toolchain）"><a href="#Go-工具链（Go-Toolchain）" class="headerlink" title="Go 工具链（Go Toolchain）"></a>Go 工具链（Go Toolchain）</h3><p>Go 工具链是一系列工具的集合，这些工具用于处理 Go 代码的编译、安装、格式化、测试等任务。主要包括以下几个部分：</p><ol><li><p><strong>go build</strong></p><ul><li>用于编译 Go 程序和包。</li><li>它会编译指定的源文件、依赖，并生成可执行文件或库。</li></ul></li><li><p><strong>go run</strong></p><ul><li>直接运行 Go 程序，通常用于快速测试。</li><li>它实际上是 <code>go build</code> 和执行编译后的程序的组合。</li></ul></li><li><p><strong>go test</strong></p><ul><li>运行测试用例，包括单元测试、基准测试等。</li><li>它可以自动找到源代码中的测试代码并执行。</li></ul></li><li><p><strong>go get</strong></p><ul><li>在 Go Modules 出现之前，它用于下载和安装包及其依赖。</li><li>在 Go Modules 环境下，它还能用于添加依赖到你的项目中。</li></ul></li><li><p><strong>go mod</strong></p><ul><li>Go Modules 的命令行接口，用于处理模块的依赖管理。</li><li>包括初始化新模块、添加、更新、移除依赖等。</li></ul></li><li><p><strong>go fmt</strong></p><ul><li>格式化 Go 源代码，确保代码风格一致。</li></ul></li><li><p><strong>go env</strong></p><ul><li>查看和设置 Go 环境变量。</li></ul></li></ol><p>这些工具都是 Go 语言标准发行版的一部分，对于日常的 Go 开发来说非常重要。</p><h3 id="Go-模块（Go-Modules）"><a href="#Go-模块（Go-Modules）" class="headerlink" title="Go 模块（Go Modules）"></a>Go 模块（Go Modules）</h3><p>Go 模块是 Go 语言的依赖管理系统，于 Go 1.11 版本中引入，现在已经是管理依赖的首选方式。</p><ol><li><p><strong>模块的概念</strong></p><ul><li>模块是一系列 Go 包的集合，它们被放置在同一个文件系统目录下，由一个 <code>go.mod</code> 文件所描述。</li><li><code>go.mod</code> 文件包含了模块的名称、依赖项及它们的版本。</li></ul></li><li><p><strong>功能</strong></p><ul><li>提供了对依赖版本的精确控制，确保项目的可重复构建。</li><li>允许开发者在项目外的任何地方工作，不再受限于 <code>GOPATH</code>。</li></ul></li><li><p><strong>主要命令</strong></p><ul><li><code>go mod init</code>：初始化新模块，创建 <code>go.mod</code> 文件。</li><li><code>go mod tidy</code>：整理现有的依赖，移除不再需要的依赖。</li><li><code>go mod download</code>：下载 <code>go.mod</code> 文件中指定的所有依赖。</li></ul></li></ol><h3 id="结论-1"><a href="#结论-1" class="headerlink" title="结论"></a>结论</h3><p>Go 工具链和 Go 模块共同构成了 Go 语言的生态系统的基础，它们使得 Go 代码的开发、构建、格式化、测试以及依赖管理变得简单和高效。理解和熟练使用这些工具和概念，对于任何 Go 开发者来说都是非常重要的。💡🔧📦🚀</p><h1 id="并发（Concurrency）与并行（Parallelism）"><a href="#并发（Concurrency）与并行（Parallelism）" class="headerlink" title="并发（Concurrency）与并行（Parallelism）"></a>并发（Concurrency）与并行（Parallelism）</h1><ul><li><strong>并发</strong>：多个任务可以在重叠的时间段内进行，但不一定同时。</li><li><strong>并行</strong>：多个任务真正同时进行，通常需要多核处理器。</li></ul><p>Go 语言的并发模型使得并发编程更加简单和高效。</p><h3 id="Goroutines"><a href="#Goroutines" class="headerlink" title="Goroutines"></a>Goroutines</h3><ol><li><p><strong>定义</strong></p><ul><li>Goroutine 是 Go 语言的轻量级线程，由 Go 运行时环境管理。</li><li>Goroutines 在相同的地址空间中运行，因此访问共享内存必须是安全的。</li></ul></li><li><p><strong>创建 Goroutine</strong></p><ul><li>使用 <code>go</code> 关键字 followed by a function call.<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">go</span> functionName()</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>示例</strong></p><ul><li>假设有一个函数 <code>printNumbers</code>，打印数字1到5。<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printNumbers</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++ &#123;</span><br><span class="line">        fmt.Println(i)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在主函数中并发执行：<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">go</span> printNumbers()</span><br><span class="line">    fmt.Println(<span class="string">&quot;Hello, World!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="Channels"><a href="#Channels" class="headerlink" title="Channels"></a>Channels</h3><ol><li><p><strong>定义</strong></p><ul><li>Channels 是用来在 Goroutines 之间传递数据的管道。</li><li>可以是带缓冲的或无缓冲的。</li></ul></li><li><p><strong>创建 Channel</strong></p><ul><li>无缓冲：<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br></pre></td></tr></table></figure></li><li>带缓冲：<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">5</span>) <span class="comment">// 缓冲大小为5</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>使用 Channel</strong></p><ul><li>发送数据到 Channel：<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">ch &lt;- value</span><br></pre></td></tr></table></figure></li><li>从 Channel 接收数据：<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">value := &lt;-ch</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>关闭 Channel</strong></p><ul><li>使用 <code>close()</code> 函数。</li><li>关闭后不能再向 Channel 发送数据，但可以继续接收数据。</li></ul></li><li><p><strong>示例</strong></p><ul><li>创建一个 Channel 传递整数。</li><li>在一个 Goroutine 中发送数字到 Channel，在主 Goroutine 中接收它们。<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++ &#123;</span><br><span class="line">            ch &lt;- i</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">close</span>(ch)</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> num := <span class="keyword">range</span> ch &#123;</span><br><span class="line">        fmt.Println(num)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li><strong>避免死锁</strong>：确保 Goroutines 之间的通信是正确的，否则可能导致死锁。</li><li><strong>同步</strong>：使用 <code>sync</code> 包中的工具（如 WaitGroup）来同步 Goroutines。</li><li><strong>数据竞争</strong>：当多个 Goroutines 访问共享资源时，需要使用锁（如 <code>sync.Mutex</code>）来避免数据竞争。</li></ul><h3 id="结论-2"><a href="#结论-2" class="headerlink" title="结论"></a>结论</h3><p>Go 语言中的并发编程强大且易于理解。通过 Goroutines 和 Channels，你可以高效地构建并发程序。作为新手，你可能需要一些时间来熟悉这些概念，但一旦掌握，它们会大大增强你的编程能力。实践是最好的学习方式，尽量多编写并发程序来提高你的技能！💻🚀🔧</p><p>好的，我来一一解答你的问题：</p><h3 id="1-匿名函数和立即执行"><a href="#1-匿名函数和立即执行" class="headerlink" title="1. 匿名函数和立即执行"></a>1. 匿名函数和立即执行</h3><p>在你提到的代码片段中：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++ &#123;</span><br><span class="line">        ch &lt;- i</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">close</span>(ch)</span><br><span class="line">&#125;()</span><br></pre></td></tr></table></figure><p>这里使用的是一个<strong>匿名函数</strong>，并且这个匿名函数是<strong>立即执行</strong>的。</p><ul><li><strong>匿名函数</strong>：就是没有名字的函数。在 Go 中，可以使用 <code>func</code> 关键字来直接定义一个匿名函数。</li><li><strong>立即执行</strong>：在定义匿名函数后，紧接着的 <code>()</code> 使这个函数立即执行。这种模式在 Go 中很常见，特别是在需要并发执行函数时。</li></ul><h3 id="2-死锁（Deadlock）"><a href="#2-死锁（Deadlock）" class="headerlink" title="2. 死锁（Deadlock）"></a>2. 死锁（Deadlock）</h3><p>死锁是并发编程中的一个常见问题，它发生在以下情况：</p><ul><li>当两个或多个 goroutines 在执行过程中，彼此等待对方释放资源，从而造成了无限等待的情况。</li><li>常见的情况包括：<ul><li>两个 goroutines 互相等待对方完成，都不释放自己持有的资源。</li><li>试图从一个空的 channel 中接收数据，而没有其他 goroutine 发送数据到这个 channel。</li><li>试图向一个已满的 channel 发送数据，而没有其他 goroutine 接收数据。</li></ul></li></ul><p>死锁的解决通常需要对程序的逻辑进行仔细的分析和设计，确保资源的正确释放和合理的同步。</p><h3 id="3-使用-sync-包"><a href="#3-使用-sync-包" class="headerlink" title="3. 使用 sync 包"></a>3. 使用 <code>sync</code> 包</h3><p><code>sync</code> 包提供了多种同步原语（如互斥锁、等待组等），用于在 goroutines 之间进行同步。</p><h4 id="WaitGroup"><a href="#WaitGroup" class="headerlink" title="WaitGroup"></a>WaitGroup</h4><ul><li>用于等待一组 goroutines 完成。</li><li>主要方法包括 <code>Add</code>, <code>Done</code>, 和 <code>Wait</code>。</li></ul><p><strong>示例</strong>：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++ &#123;</span><br><span class="line">        wg.Add(<span class="number">1</span>) <span class="comment">// 增加等待计数</span></span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(i <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">            <span class="keyword">defer</span> wg.Done() <span class="comment">// 完成时减少等待计数</span></span><br><span class="line">            fmt.Println(i)</span><br><span class="line">        &#125;(i)</span><br><span class="line">    &#125;</span><br><span class="line">    wg.Wait() <span class="comment">// 等待所有 goroutine 完成</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Mutex（互斥锁）"><a href="#Mutex（互斥锁）" class="headerlink" title="Mutex（互斥锁）"></a>Mutex（互斥锁）</h4><ul><li>用于在多个 goroutine 访问共享资源时提供互斥访问。</li><li>主要方法是 <code>Lock</code> 和 <code>Unlock</code>。</li></ul><p><strong>示例</strong>：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> mu sync.Mutex</span><br><span class="line"><span class="keyword">var</span> count <span class="type">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">increment</span><span class="params">()</span></span> &#123;</span><br><span class="line">    mu.Lock()   <span class="comment">// 加锁</span></span><br><span class="line">    count++     <span class="comment">// 修改共享资源</span></span><br><span class="line">    mu.Unlock() <span class="comment">// 解锁</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这些是 <code>sync</code> 包中最常用的两种类型。在并发编程中正确地使用这些工具，可以帮助你避免死锁和数据竞争，确保程序的安全性和稳定性。记得实践是最好的学习方式，多尝试编写一些并发代码，你会越来越熟练的！💪📚💻</p><p>当然可以！互斥锁（Mutex）是并发编程中一种非常重要的机制，用于控制对共享资源的访问，以确保在任何时刻只有一个 goroutine 可以访问该资源。这有助于避免并发时出现的数据竞争和不一致的问题。让我们通过一个简单的例子来详细理解互斥锁的使用。</p><h3 id="互斥锁（Mutex）的基本概念"><a href="#互斥锁（Mutex）的基本概念" class="headerlink" title="互斥锁（Mutex）的基本概念"></a>互斥锁（Mutex）的基本概念</h3><ul><li><strong>互斥锁</strong>用于在多个 goroutines 访问共享资源时提供安全的访问方式。</li><li>任何时候只有一个 goroutine 能够持有锁。</li><li>如果一个 goroutine 已经持有了锁，其他尝试获取锁的 goroutine 将会等待（阻塞），直到锁被释放。</li></ul><h3 id="示例：共享计数器"><a href="#示例：共享计数器" class="headerlink" title="示例：共享计数器"></a>示例：共享计数器</h3><p>假设我们有一个共享的计数器，多个 goroutines 同时对其进行增加操作。不使用互斥锁的情况下，可能会发生数据竞争，导致计数器的值出错。</p><p>下面是使用互斥锁来确保安全访问共享计数器的例子：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;sync&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> mu sync.Mutex</span><br><span class="line">    <span class="keyword">var</span> count <span class="type">int</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 启动 100 个 goroutines 来增加计数器</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">100</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">            <span class="keyword">for</span> j := <span class="number">0</span>; j &lt; <span class="number">10</span>; j++ &#123;</span><br><span class="line">                mu.Lock()   <span class="comment">// 在访问共享资源前加锁</span></span><br><span class="line">                count++     <span class="comment">// 修改共享资源</span></span><br><span class="line">                mu.Unlock() <span class="comment">// 完成操作后解锁</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 等待一秒确保所有 goroutine 完成</span></span><br><span class="line">    time.Sleep(time.Second)</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">&quot;Final count:&quot;</span>, count)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中：</p><ul><li>我们定义了一个名为 <code>mu</code> 的 <code>sync.Mutex</code> 和一个共享的 <code>count</code> 计数器。</li><li>启动了 100 个 goroutines，每个 goroutine 会尝试将计数器增加 10 次。</li><li>每次增加操作前，我们通过 <code>mu.Lock()</code> 加锁，确保在修改 <code>count</code> 时不会有其他 goroutine 同时访问它。</li><li>操作完成后，使用 <code>mu.Unlock()</code> 解锁。</li></ul><p>通过这种方式，即使多个 goroutine 并发执行，我们也能确保 <code>count</code> 的值在任何时候都是准确的，避免了数据竞争。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>互斥锁是并发编程中保护共享资源的重要工具。正确使用它们能够确保数据的一致性和程序的稳定性。但是要注意，过度使用锁可能会导致程序性能下降，因为它限制了并发的程度。因此，合理设计锁的使用策略是并发编程的一个重要方面。💻🔐👍</p><p>好的，我来设计一个既使用互斥锁（<code>sync.Mutex</code>）又使用工作组（<code>sync.WaitGroup</code>）的示例。在这个案例中，我们将创建多个 goroutines 来更新一个共享数据结构，比如一个计数器。我们会使用互斥锁来保护这个共享数据，以避免数据竞争，同时使用工作组来等待所有 goroutine 完成。</p><h3 id="示例描述"><a href="#示例描述" class="headerlink" title="示例描述"></a>示例描述</h3><ul><li><strong>目标</strong>：创建多个 goroutines，每个 goroutine 对共享计数器增加特定的值。</li><li><strong>工具</strong>：<ul><li><strong>互斥锁（<code>sync.Mutex</code>）</strong>：确保每次只有一个 goroutine 能够访问并修改计数器。</li><li><strong>工作组（<code>sync.WaitGroup</code>）</strong>：等待所有 goroutine 完成。</li></ul></li></ul><h3 id="示例代码-2"><a href="#示例代码-2" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;sync&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line">    <span class="keyword">var</span> mu sync.Mutex</span><br><span class="line">    <span class="keyword">var</span> count <span class="type">int</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个函数，用于增加计数器</span></span><br><span class="line">    increment := <span class="function"><span class="keyword">func</span><span class="params">(inc <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">defer</span> wg.Done() <span class="comment">// 确保在函数结束时通知 WaitGroup</span></span><br><span class="line">        mu.Lock()       <span class="comment">// 在修改共享资源前加锁</span></span><br><span class="line">        count += inc    <span class="comment">// 修改共享资源</span></span><br><span class="line">        mu.Unlock()     <span class="comment">// 完成操作后解锁</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 启动多个 goroutines</span></span><br><span class="line">    increments := []<span class="type">int</span>&#123;<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>&#125;</span><br><span class="line">    <span class="keyword">for</span> _, inc := <span class="keyword">range</span> increments &#123;</span><br><span class="line">        wg.Add(<span class="number">1</span>) <span class="comment">// 为每个 goroutine 增加计数</span></span><br><span class="line">        <span class="keyword">go</span> increment(inc)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    wg.Wait() <span class="comment">// 等待所有 goroutine 完成</span></span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">&quot;Final count:&quot;</span>, count)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中：</p><ul><li>我们定义了一个名为 <code>increment</code> 的函数，这个函数接受一个整数作为参数，将其加到 <code>count</code> 上。</li><li>为每个要执行的 <code>increment</code> 操作，我们启动一个新的 goroutine。</li><li>每个 goroutine 开始前，使用 <code>wg.Add(1)</code> 增加工作组的计数。</li><li>在 <code>increment</code> 函数内部，首先使用 <code>defer wg.Done()</code> 来确保函数结束时，通知工作组一个任务已经完成。</li><li>使用 <code>mu.Lock()</code> 和 <code>mu.Unlock()</code> 来保护对 <code>count</code> 的访问和修改。</li><li>最后，<code>wg.Wait()</code> 在 <code>main</code> 函数中等待所有 goroutine 完成，然后打印出最终的 <code>count</code> 值。</li></ul><h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><p>这个例子展示了如何在并发编程中同时使用互斥锁和工作组来安全地更新共享资源，并等待多个并发操作的完成。这种模式在处理并发数据共享和同步任务时非常有用。记得多实践，这样你会对 Go 的并发机制有更深的理解和掌握！🔒🔄💻🚀</p><h1 id="细节补充"><a href="#细节补充" class="headerlink" title="细节补充"></a>细节补充</h1><p>在 Go 语言中，接口（interface）、切片（slice）、映射（map）和指针（pointer）是非常核心的概念。下面我将逐一进行详细而易懂的介绍。</p><h3 id="1-接口（Interface）"><a href="#1-接口（Interface）" class="headerlink" title="1. 接口（Interface）"></a>1. 接口（Interface）</h3><p>接口是一种类型，它定义了一组方法，但这些方法不需要实现。任何定义了这些方法的类型都自动地实现了这个接口。</p><h4 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h4><ul><li>定义接口：<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Shape <span class="keyword">interface</span> &#123;</span><br><span class="line">    Area() <span class="type">float64</span></span><br><span class="line">    Perimeter() <span class="type">float64</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>实现接口：只要一个类型提供了接口中所有方法的实现，它就实现了该接口。<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Rectangle <span class="keyword">struct</span> &#123;</span><br><span class="line">    Length, Width <span class="type">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r Rectangle)</span></span> Area() <span class="type">float64</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> r.Length * r.Width</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r Rectangle)</span></span> Perimeter() <span class="type">float64</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span> * (r.Length + r.Width)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a>高级用法</h4><ul><li><strong>接口组合</strong>：可以通过组合现有的接口来创建新接口。<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Geometry <span class="keyword">interface</span> &#123;</span><br><span class="line">    Shape</span><br><span class="line">    SomeOtherMethod()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><strong>空接口</strong>：空接口 <code>interface&#123;&#125;</code> 可以表示任何类型，常用于泛型编程或处理未知类型的值。<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DoSomething</span><span class="params">(v <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-切片（Slice）"><a href="#2-切片（Slice）" class="headerlink" title="2. 切片（Slice）"></a>2. 切片（Slice）</h3><p>切片是对数组的抽象，Go 中的切片更加强大和灵活。</p><h4 id="基本用法-1"><a href="#基本用法-1" class="headerlink" title="基本用法"></a>基本用法</h4><ul><li>创建切片：使用 <code>make</code> 函数或字面量。<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">s1 := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">10</span>) <span class="comment">// 长度为10</span></span><br><span class="line">s2 := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="高级用法-1"><a href="#高级用法-1" class="headerlink" title="高级用法"></a>高级用法</h4><ul><li><strong>切片追加</strong>：使用 <code>append</code> 函数向切片追加元素。<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">s := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">s = <span class="built_in">append</span>(s, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>) <span class="comment">// s 现在是 [1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure></li><li><strong>切片截取</strong>：可以通过切片的截取创建新的切片。<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">s := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">s2 := s[<span class="number">1</span>:<span class="number">3</span>] <span class="comment">// s2 是 [2, 3]</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="3-映射（Map）"><a href="#3-映射（Map）" class="headerlink" title="3. 映射（Map）"></a>3. 映射（Map）</h3><p>映射是键值对的集合。</p><h4 id="基本用法-2"><a href="#基本用法-2" class="headerlink" title="基本用法"></a>基本用法</h4><ul><li>创建映射：使用 <code>make</code> 函数。<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>)</span><br><span class="line">m[<span class="string">&quot;key&quot;</span>] = <span class="number">42</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="高级用法-2"><a href="#高级用法-2" class="headerlink" title="高级用法"></a>高级用法</h4><ul><li><strong>迭代映射</strong>：使用 <code>range</code> 遍历映射。<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> key, value := <span class="keyword">range</span> m &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;Key:&quot;</span>, key, <span class="string">&quot;Value:&quot;</span>, value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><strong>映射的切片</strong>：可以创建映射的切片来实现动态的嵌套结构。<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">ms := <span class="built_in">make</span>([]<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>, <span class="number">0</span>)</span><br><span class="line">ms = <span class="built_in">append</span>(ms, <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>&#123;<span class="string">&quot;key&quot;</span>: <span class="number">42</span>&#125;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-指针（Pointer）"><a href="#4-指针（Pointer）" class="headerlink" title="4. 指针（Pointer）"></a>4. 指针（Pointer）</h3><p>指针存储了值在内存中的地址。</p><h4 id="基本用法-3"><a href="#基本用法-3" class="headerlink" title="基本用法"></a>基本用法</h4><ul><li>使用 <code>&amp;</code> 获取变量的地址，使用 <code>*</code> 来访问指针指向的值。<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">a := <span class="number">42</span></span><br><span class="line">p := &amp;a <span class="comment">// p 是指向 a 的指针</span></span><br><span class="line">fmt.Println(*p) <span class="comment">// 读取 p 指向的值</span></span><br><span class="line">*p = <span class="number">21</span> <span class="comment">// 修改 p 指向的值</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="高级用法-3"><a href="#高级用法-3" class="headerlink" title="高级用法"></a>高级用法</h4><ul><li><strong>结构体与指针</strong>：可以使用指针来访问或修改结构体的成员。<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">type</span> Vertex <span class="keyword">struct</span> &#123;</span><br><span class="line">     X, Y <span class="type">float64</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">v := Vertex&#123;<span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line"> p := &amp;v</span><br><span class="line"> p.X = <span class="number">4.5</span> <span class="comment">// 通过指针修改 v 的 X 值</span></span><br></pre></td></tr></table></figure></li><li><strong>指针接收者</strong>：在方法定义中使用指针接收者，可以修改接收者指向的值。<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v *Vertex)</span></span> Scale(f <span class="type">float64</span>) &#123;</span><br><span class="line">    v.X = v.X * f</span><br><span class="line">    v.Y = v.Y * f</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>理解和熟练使用接口、切片、映射和指针对于编写高效和灵活的 Go 程序至关重要。这些概念是 Go 语言的基石，它们提供了强大的工具来构建复杂和高性能的应用程序。💻🔧🚀</p><h1 id="方法接收者"><a href="#方法接收者" class="headerlink" title="方法接收者"></a>方法接收者</h1><p>在 Go 语言中，<code>(r Rectangle)</code> 这部分被称为<strong>方法接收者</strong>，类似于其他语言中的“类方法”。不过，Go 没有类（class）的概念，而是使用结构体（struct）和方法接收者来实现类似的功能。</p><h3 id="方法接收者（Method-Receiver）"><a href="#方法接收者（Method-Receiver）" class="headerlink" title="方法接收者（Method Receiver）"></a>方法接收者（Method Receiver）</h3><p>在函数定义前的 <code>(r Rectangle)</code> 就是方法接收者的声明，它指定了这个函数是绑定在 <code>Rectangle</code> 类型上的。这意味着这个函数（<code>Area</code>）可以在 <code>Rectangle</code> 类型的变量上被调用，并且在函数内部可以访问接收者（<code>r</code>）的字段。</p><h3 id="示例解析"><a href="#示例解析" class="headerlink" title="示例解析"></a>示例解析</h3><p>考虑以下代码：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Rectangle <span class="keyword">struct</span> &#123;</span><br><span class="line">    Length, Width <span class="type">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r Rectangle)</span></span> Area() <span class="type">float64</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> r.Length * r.Width</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里：</p><ul><li><code>Rectangle</code> 是一个结构体类型，有两个字段：<code>Length</code> 和 <code>Width</code>。</li><li><code>func (r Rectangle) Area() float64</code> 定义了一个方法 <code>Area</code>，它计算矩形的面积。<ul><li><code>(r Rectangle)</code> 是方法接收者，意味着 <code>Area</code> 方法与 <code>Rectangle</code> 类型相关联。</li><li>在 <code>Area</code> 方法中，可以通过 <code>r</code> 来访问 <code>Rectangle</code> 实例的字段（<code>Length</code> 和 <code>Width</code>）。</li></ul></li></ul><h3 id="调用方式"><a href="#调用方式" class="headerlink" title="调用方式"></a>调用方式</h3><p>要调用这个方法，你需要一个 <code>Rectangle</code> 类型的实例：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">rect := Rectangle&#123;Length: <span class="number">10</span>, Width: <span class="number">5</span>&#125;</span><br><span class="line">area := rect.Area() <span class="comment">// 调用 Area 方法</span></span><br></pre></td></tr></table></figure><p>在这个例子中，<code>rect.Area()</code> 调用会将 <code>rect</code> 作为接收者传递给 <code>Area</code> 方法。</p><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>方法接收者使得 Go 语言能够在结构体类型上定义方法，从而实现面向对象编程的一些特性。这种方式提供了数据和操作这些数据的方法之间的关联，类似于其他语言中的类方法，但在 Go 中以一种更简单和更灵活的方式实现。</p><p>好的，我们来深入理解 Go 语言中的 <code>error</code> 接口、单元测试和基准测试。这三个概念对于编写可靠和高性能的 Go 程序至关重要。</p><h1 id="错误处理和测试"><a href="#错误处理和测试" class="headerlink" title="错误处理和测试"></a>错误处理和测试</h1><h3 id="深入理解-error-接口"><a href="#深入理解-error-接口" class="headerlink" title="深入理解 error 接口"></a>深入理解 <code>error</code> 接口</h3><p>在 Go 中，<code>error</code> 是一个内置的接口，用于表示错误条件，具有以下定义：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="type">error</span> <span class="keyword">interface</span> &#123;</span><br><span class="line">    Error() <span class="type">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>任何具有 <code>Error() string</code> 方法的类型都自动实现了 <code>error</code> 接口。这意味着你可以创建自定义错误类型。</p><h4 id="自定义错误"><a href="#自定义错误" class="headerlink" title="自定义错误"></a>自定义错误</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> MyError <span class="keyword">struct</span> &#123;</span><br><span class="line">    Msg <span class="type">string</span></span><br><span class="line">    Code <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *MyError)</span></span> Error() <span class="type">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> fmt.Sprintf(<span class="string">&quot;error: %s, code: %d&quot;</span>, e.Msg, e.Code)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">doSomething</span><span class="params">()</span></span> <span class="type">error</span> &#123;</span><br><span class="line">    <span class="comment">// 一些逻辑...</span></span><br><span class="line">    <span class="keyword">return</span> &amp;MyError&#123;<span class="string">&quot;Something went wrong&quot;</span>, <span class="number">404</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，我们定义了一个自定义错误类型 <code>MyError</code>，并实现了 <code>Error()</code> 方法。在 <code>doSomething</code> 函数中，我们返回了这个自定义错误。</p><h3 id="编写单元测试（testing-包）"><a href="#编写单元测试（testing-包）" class="headerlink" title="编写单元测试（testing 包）"></a>编写单元测试（testing 包）</h3><p>Go 语言的 <code>testing</code> 包提供了编写单元测试的功能。单元测试是验证代码行为的一种方法。</p><h4 id="基本单元测试"><a href="#基本单元测试" class="headerlink" title="基本单元测试"></a>基本单元测试</h4><p>单元测试通常写在与源代码同一目录下的 <code>_test.go</code> 文件中。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 假设有以下函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Add</span><span class="params">(a, b <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 单元测试</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestAdd</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">    result := Add(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">if</span> result != <span class="number">3</span> &#123;</span><br><span class="line">        t.Errorf(<span class="string">&quot;Add(1, 2) = %d; want 3&quot;</span>, result)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 <code>go test</code> 命令运行测试。</p><h3 id="基准测试（Benchmark）"><a href="#基准测试（Benchmark）" class="headerlink" title="基准测试（Benchmark）"></a>基准测试（Benchmark）</h3><p>基准测试用于测试代码的性能。在 Go 中，基准测试也是用 <code>testing</code> 包来编写的。</p><h4 id="基准测试示例"><a href="#基准测试示例" class="headerlink" title="基准测试示例"></a>基准测试示例</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkAdd</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; b.N; i++ &#123;</span><br><span class="line">        Add(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>b.N</code> 是 Go 测试框架提供的，基准测试会运行多次以获取更准确的结果。</li><li>使用 <code>go test -bench=.</code> 命令运行基准测试。</li></ul><h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><ul><li><strong>理解 <code>error</code> 接口</strong>：能够有效地处理错误情况，是写出健壮 Go 程序的关键。</li><li><strong>编写单元测试</strong>：是确保代码正确性的重要手段。</li><li><strong>进行基准测试</strong>：帮助你了解代码的性能特征，对于优化和保证代码性能非常重要。</li></ul><p>通过掌握这些概念和技巧，你可以写出更可靠、更高效的 Go 程序。💡🧪💻🚀</p><p>Go 语言在网络编程方面表现非常出色，提供了强大的库来支持各种网络操作。让我们来探索 Go 中的网络编程基础。</p><h1 id="Go-网络编程概览"><a href="#Go-网络编程概览" class="headerlink" title="Go 网络编程概览"></a>Go 网络编程概览</h1><p>Go 的 <code>net</code> 包提供了丰富的网络操作接口。它支持 TCP、UDP、IP 等多种网络协议，并且能够轻松地实现客户端和服务器应用程序。</p><h3 id="TCP-编程"><a href="#TCP-编程" class="headerlink" title="TCP 编程"></a>TCP 编程</h3><p>TCP（传输控制协议）是一种面向连接的、可靠的、基于字节流的传输层通信协议。</p><h4 id="TCP-服务器"><a href="#TCP-服务器" class="headerlink" title="TCP 服务器"></a>TCP 服务器</h4><p>创建一个 TCP 服务器主要包括以下步骤：</p><ol><li>监听端口。</li><li>接受连接请求。</li><li>读取和写入数据。</li></ol><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;bufio&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;net&quot;</span></span><br><span class="line">    <span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 监听 TCP 端口</span></span><br><span class="line">    ln, err := net.Listen(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;:8080&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(err)</span><br><span class="line">        os.Exit(<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">defer</span> ln.Close()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        <span class="comment">// 接受连接</span></span><br><span class="line">        conn, err := ln.Accept()</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            fmt.Println(err)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 处理连接</span></span><br><span class="line">        <span class="keyword">go</span> handleConnection(conn)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handleConnection</span><span class="params">(conn net.Conn)</span></span> &#123;</span><br><span class="line">    <span class="keyword">defer</span> conn.Close()</span><br><span class="line"></span><br><span class="line">    reader := bufio.NewReader(conn)</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        <span class="comment">// 读取数据</span></span><br><span class="line">        msg, err := reader.ReadString(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            fmt.Println(err)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        fmt.Print(<span class="string">&quot;Message Received:&quot;</span>, msg)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 发送响应</span></span><br><span class="line">        conn.Write([]<span class="type">byte</span>(<span class="string">&quot;Message received.\n&quot;</span>))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="TCP-客户端"><a href="#TCP-客户端" class="headerlink" title="TCP 客户端"></a>TCP 客户端</h4><p>创建一个 TCP 客户端通常包括以下步骤：</p><ol><li>连接到服务器。</li><li>读取和写入数据。</li></ol><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;bufio&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;net&quot;</span></span><br><span class="line">    <span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 连接到服务器</span></span><br><span class="line">    conn, err := net.Dial(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;localhost:8080&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(err)</span><br><span class="line">        os.Exit(<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">defer</span> conn.Close()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发送数据</span></span><br><span class="line">    fmt.Fprintln(conn, <span class="string">&quot;Hello, Server!&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 接收响应</span></span><br><span class="line">    response, err := bufio.NewReader(conn).ReadString(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Print(<span class="string">&quot;Server Response:&quot;</span>, response)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="UDP-编程"><a href="#UDP-编程" class="headerlink" title="UDP 编程"></a>UDP 编程</h3><p>UDP（用户数据报协议）是一种无连接的网络协议，提供了快速但不可靠的传输服务。</p><h4 id="UDP-服务器"><a href="#UDP-服务器" class="headerlink" title="UDP 服务器"></a>UDP 服务器</h4><p>创建一个 UDP 服务器的步骤：</p><ol><li>监听 UDP 端口。</li><li>读取和写入数据。</li></ol><h4 id="UDP-客户端"><a href="#UDP-客户端" class="headerlink" title="UDP 客户端"></a>UDP 客户端</h4><p>创建一个 UDP 客户端的步骤：</p><ol><li>发送数据到服务器。</li><li>接收服务器的响应。</li></ol><h3 id="HTTP-编程"><a href="#HTTP-编程" class="headerlink" title="HTTP 编程"></a>HTTP 编程</h3><p>Go 的 <code>net/http</code> 包提供了 HTTP 客户端和服务器的实现。</p><h4 id="HTTP-服务器"><a href="#HTTP-服务器" class="headerlink" title="HTTP 服务器"></a>HTTP 服务器</h4><p>创建一个简单的 HTTP 服务器：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    http.HandleFunc(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">        fmt.Fprintf(w, <span class="string">&quot;Hello, you&#x27;ve requested: %s\n&quot;</span>, r.URL.Path)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    http.ListenAndServe(<span class="string">&quot;:8080&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="HTTP-客户端"><a href="#HTTP-客户端" class="headerlink" title="HTTP 客户端"></a>HTTP 客户端</h4><p>使用 <code>net/http</code> 包创建 HTTP 客户端来发送请求：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;net/http&quot;</span></span><br><span class="line">    <span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    resp, err := http.Get(<span class="string">&quot;http://example.com/&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">defer</span> resp.Body.Close()</span><br><span class="line"></span><br><span class="line">    body, err := ioutil.ReadAll(resp.Body)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(<span class="type">string</span>(body))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h3><p>Go 语言中的网络编程非常强大和灵活，无论是低级的 TCP&#x2F;UDP 编程，还是更高级的 HTTP</p><p> 应用，Go 都提供了丰富的工具和库来实现它们。通过实践这些基础知识，你可以构建各种网络应用和服务。💻🌐🚀</p><h1 id="常用设计模式"><a href="#常用设计模式" class="headerlink" title="常用设计模式"></a>常用设计模式</h1><p>在 Go 中，有一些常用的设计模式非常适合处理特定的编程问题。</p><ol><li><strong>单例模式</strong><ul><li>确保一个类只有一个实例，并提供全局访问点。</li></ul></li><li><strong>工厂模式</strong><ul><li>用一个工厂类创建对象，而不是在客户端代码中直接 new 对象。</li></ul></li><li><strong>策略模式</strong><ul><li>定义一系列算法，把它们一个个封装起来，并使它们可以相互替换。</li></ul></li><li><strong>装饰器模式</strong><ul><li>动态地给一个对象添加一些额外的职责，比直接修改对象更灵活。</li></ul></li><li><strong>观察者模式</strong><ul><li>当一个对象状态发生改变时，所有依赖于它的对象都将得到通知。</li></ul></li><li><strong>适配器模式</strong><ul><li>将一个类的接口转换成客户希望的另外一个接口。</li></ul></li></ol><h1 id="配置管理——viper"><a href="#配置管理——viper" class="headerlink" title="配置管理——viper"></a>配置管理——viper</h1><p><code>viper</code> 是 Go 语言中非常流行的配置管理库，它被广泛用于处理应用程序的配置需求。<code>viper</code> 强大在于它的灵活性和易用性，支持多种格式的配置文件（JSON、TOML、YAML、HCL 等），并且能够从环境变量、命令行参数、远程配置系统（如 etcd 或 Consul）等多种来源读取配置。</p><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ol><li><strong>设置默认值</strong>：为不同的配置键设置默认值。</li><li><strong>读取配置</strong>：从文件、环境变量、远程系统等读取配置。</li><li><strong>实时重载</strong>：支持实时监控配置文件的更改并重新加载配置。</li><li><strong>类型安全获取值</strong>：提供方法安全地获取配置值的不同类型（例如 <code>GetString</code>, <code>GetInt</code> 等）。</li></ol><h3 id="基本用法-4"><a href="#基本用法-4" class="headerlink" title="基本用法"></a>基本用法</h3><ol><li><p><strong>安装</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">go get github.com/spf13/viper</span><br></pre></td></tr></table></figure></li><li><p><strong>基本配置读取</strong></p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;github.com/spf13/viper&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 设置配置文件名和路径</span></span><br><span class="line">    viper.SetConfigName(<span class="string">&quot;config&quot;</span>) <span class="comment">// 配置文件名称(无扩展名)</span></span><br><span class="line">    viper.SetConfigType(<span class="string">&quot;yaml&quot;</span>)   <span class="comment">// 如果配置文件的名称中没有扩展名，则需要配置此项</span></span><br><span class="line">    viper.AddConfigPath(<span class="string">&quot;.&quot;</span>)      <span class="comment">// 查找配置文件所在的路径</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取配置文件</span></span><br><span class="line">    err := viper.ReadInConfig()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;Error reading config file, %s&quot;</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取配置信息</span></span><br><span class="line">    host := viper.GetString(<span class="string">&quot;server.host&quot;</span>)</span><br><span class="line">    port := viper.GetInt(<span class="string">&quot;server.port&quot;</span>)</span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">&quot;Host: %s, Port: %d\n&quot;</span>, host, port)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里假设有一个名为 <code>config.yaml</code> 的配置文件，内容如下：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure></li><li><p><strong>从环境变量读取配置</strong></p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">viper.AutomaticEnv() <span class="comment">// 自动读取环境变量</span></span><br></pre></td></tr></table></figure></li><li><p><strong>设置默认值</strong></p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">viper.SetDefault(<span class="string">&quot;server.port&quot;</span>, <span class="number">8080</span>)</span><br></pre></td></tr></table></figure></li><li><p><strong>实时重载配置文件</strong></p><ul><li><code>viper</code> 支持实时监控配置文件的更改，并可以设置回调函数来处理更改事件。<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">viper.WatchConfig()</span><br><span class="line">viper.OnConfigChange(<span class="function"><span class="keyword">func</span><span class="params">(e fsnotify.Event)</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;Config file changed:&quot;</span>, e.Name)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>命令行参数</strong></p><ul><li><code>viper</code> 可以和 <code>cobra</code> 库（同样由 spf13 提供）结合使用，以支持从命令行参数读取配置。</li></ul></li></ol><h3 id="总结-4"><a href="#总结-4" class="headerlink" title="总结"></a>总结</h3><p><code>viper</code> 为 Go 应用程序提供了一种灵活且强大的方式来处理配置。它的多来源读取能力、实时重载功能以及与其他库的良好集成，使得 <code>viper</code> 成为 Go 开发者处理配置的首选库。通过熟练使用 <code>viper</code>，你可以更容易地管理和修改应用程序的行为，而不需要重新编译代码。💻🔧📂🚀</p>]]></content:encoded>
      
      
      <category domain="https://cjliblog.top/categories/go/">go</category>
      
      
      
      <comments>https://cjliblog.top/2023/12/13/go%E7%9A%84%E5%85%A5%E9%97%A8/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>markdown空行添加br的脚本</title>
      <link>https://cjliblog.top/2023/12/13/markdown%E7%A9%BA%E8%A1%8C%E6%B7%BB%E5%8A%A0br%E8%84%9A%E6%9C%AC/</link>
      <guid>https://cjliblog.top/2023/12/13/markdown%E7%A9%BA%E8%A1%8C%E6%B7%BB%E5%8A%A0br%E8%84%9A%E6%9C%AC/</guid>
      <pubDate>Tue, 12 Dec 2023 16:00:00 GMT</pubDate>
      
      <description>大家好，我是description</description>
      
      
      
      <content:encoded><![CDATA[<br><p>写博客的时候遇到的问题，因为md在web上空行是自动删除的，除非使用<code>&lt;/br&gt;</code>，因此编写一下python脚本</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add_br_to_empty_lines</span>(<span class="params">input_file, output_file</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(input_file, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        lines = file.readlines()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(output_file, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">            <span class="keyword">if</span> line.strip() == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">                file.write(<span class="string">&#x27;&lt;/br&gt;\n&#x27;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                file.write(line)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用示例</span></span><br><span class="line">input_md_file = <span class="string">&#x27;s:/11953/Desk/learning_doc.md&#x27;</span>  <span class="comment"># 替换成你的Markdown文件名</span></span><br><span class="line">output_md_file = <span class="string">&#x27;s:/11953/Desk/233.md&#x27;</span>  <span class="comment"># 替换成输出文件名</span></span><br><span class="line">add_br_to_empty_lines(input_md_file, output_md_file)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://cjliblog.top/categories/%E6%8A%80%E6%9C%AF%E8%B4%B4/">技术贴</category>
      
      
      
      <comments>https://cjliblog.top/2023/12/13/markdown%E7%A9%BA%E8%A1%8C%E6%B7%BB%E5%8A%A0br%E8%84%9A%E6%9C%AC/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
