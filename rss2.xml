<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>绝剑阁</title>
    <link>https://cjliblog.top/</link>
    
    <image>
      <url>https://www.gravatar.com/avatar/9a30667a06f9e54b4502c81e69456aa3</url>
      <title>绝剑阁</title>
      <link>https://cjliblog.top/</link>
    </image>
    
    <atom:link href="https://cjliblog.top/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>银屏之下，龙游四海。</description>
    <pubDate>Fri, 16 Aug 2024 11:53:16 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>docker国内镜像最新——备份</title>
      <link>https://cjliblog.top/2024/08/16/golang%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20-%20%E5%89%AF%E6%9C%AC/</link>
      <guid>https://cjliblog.top/2024/08/16/golang%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20-%20%E5%89%AF%E6%9C%AC/</guid>
      <pubDate>Thu, 15 Aug 2024 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;DockerHub国内镜像源列表&quot;&gt;&lt;a href=&quot;#DockerHub国内镜像源列表&quot; class=&quot;headerlink&quot; title=&quot;DockerHub国内镜像源列表&quot;&gt;&lt;/a&gt;DockerHub国内镜像源列表&lt;/h2&gt;&lt;p&gt;此列表只收录无需限定条件的D</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="DockerHub国内镜像源列表"><a href="#DockerHub国内镜像源列表" class="headerlink" title="DockerHub国内镜像源列表"></a>DockerHub国内镜像源列表</h2><p>此列表只收录无需限定条件的DockerHub镜像源，感谢这些公益服务者。</p><p><strong>2024年6月18日 亲测可用</strong></p><table><thead><tr><th align="left">DockerHub镜像仓库</th><th align="left">镜像加速器地址</th></tr></thead><tbody><tr><td align="left"><a href="https://hub.uuuadc.top/">Docker镜像加速站 722</a></td><td align="left"><code>https://hub.uuuadc.top/</code></td></tr><tr><td align="left"></td><td align="left"><code>docker.1panel.live</code></td></tr><tr><td align="left"></td><td align="left"><code>hub.rat.dev</code></td></tr><tr><td align="left"><a href="https://docker.anyhub.us.kg/">DockerHub 镜像加速代理 316</a></td><td align="left"><code>https://docker.anyhub.us.kg</code></td></tr><tr><td align="left"></td><td align="left"><code>https://docker.chenby.cn</code></td></tr><tr><td align="left"></td><td align="left"><code>https://dockerhub.jobcher.com/</code></td></tr><tr><td align="left"><a href="https://dockerhub.icu/">镜像使用说明 289</a></td><td align="left"><code>https://dockerhub.icu</code></td></tr><tr><td align="left"><a href="https://docker.ckyl.me/">Docker镜像加速站 108</a></td><td align="left"><code>https://docker.ckyl.me</code></td></tr><tr><td align="left"><a href="https://docker.awsl9527.cn/">镜像使用说明 114</a></td><td align="left"><code>https://docker.awsl9527.cn</code></td></tr><tr><td align="left"><a href="https://docker.hpcloud.cloud/">镜像使用说明 90</a></td><td align="left"><code>https://docker.hpcloud.cloud</code></td></tr><tr><td align="left"><a href="https://atomhub.openatom.cn/">AtomHub 可信镜像仓库平台 112</a>（只包含基础镜像，共336个）</td><td align="left"><code>https://atomhub.openatom.cn</code></td></tr><tr><td align="left"><a href="https://github.com/DaoCloud/public-image-mirror">DaoCloud 镜像站 223</a></td><td align="left"><code>https://docker.m.daocloud.io</code></td></tr></tbody></table><h3 id="使用教程"><a href="#使用教程" class="headerlink" title="使用教程"></a>使用教程</h3><ol><li>为了加速镜像拉取，使用以下命令设置<strong>registry mirror</strong></li></ol><blockquote><p>支持系统：Ubuntu 16.04+、Debian 8+、CentOS 7+</p></blockquote><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">mkdir</span> -p /etc/docker</span><br><span class="line">sudo <span class="built_in">tee</span> /etc/docker/daemon.json &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    &quot;registry-mirrors&quot;: [</span></span><br><span class="line"><span class="string">        &quot;https://hub.uuuadc.top&quot;,</span></span><br><span class="line"><span class="string">        &quot;https://docker.anyhub.us.kg&quot;,</span></span><br><span class="line"><span class="string">        &quot;https://dockerhub.jobcher.com&quot;,</span></span><br><span class="line"><span class="string">        &quot;https://dockerhub.icu&quot;,</span></span><br><span class="line"><span class="string">        &quot;https://docker.ckyl.me&quot;,</span></span><br><span class="line"><span class="string">        &quot;https://docker.awsl9527.cn&quot;</span></span><br><span class="line"><span class="string">    ]</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><ol><li>使用DockerHub Proxy，以下以 <code>hub.uuuadc.top</code> 为例：可以根据列表自行替换</li></ol><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker pull hub.uuuadc.top/library/mysql:5.7</span><br></pre></td></tr></table></figure><p>说明：library是一个特殊的命名空间，它代表的是官方镜像。如果是某个用户的镜像就把library替换为镜像的用户名</p><p>原文链接：<br><a href="https://www.wangdu.site/course/2109.html">https://www.wangdu.site/course/2109.html</a></p>]]></content:encoded>
      
      
      <category domain="https://cjliblog.top/categories/%E6%97%A5%E8%AE%B0/">日记</category>
      
      
      <category domain="https://cjliblog.top/tags/%E6%97%A5%E8%AE%B0/">日记</category>
      
      
      <comments>https://cjliblog.top/2024/08/16/golang%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20-%20%E5%89%AF%E6%9C%AC/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>24-7-6</title>
      <link>https://cjliblog.top/2024/07/06/24-7-6/</link>
      <guid>https://cjliblog.top/2024/07/06/24-7-6/</guid>
      <pubDate>Fri, 05 Jul 2024 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;1-引子&quot;&gt;&lt;a href=&quot;#1-引子&quot; class=&quot;headerlink&quot; title=&quot;1 引子&quot;&gt;&lt;/a&gt;1 引子&lt;/h2&gt;&lt;p&gt;今天开始写一点有质量的博客，比如攒几天发一篇。&lt;/p&gt;
&lt;p&gt;最近最大的事迹就是期末考结束和推掉所有科研和竞赛。&lt;/p&gt;
&lt;</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="1-引子"><a href="#1-引子" class="headerlink" title="1 引子"></a>1 引子</h2><p>今天开始写一点有质量的博客，比如攒几天发一篇。</p><p>最近最大的事迹就是期末考结束和推掉所有科研和竞赛。</p><p>抱着过了就好的心态，整个期末过程其实可以说是没什么压力的，虽然挂了一科。但是也导致一个经常恶意熬夜、爱打游戏、过度恶意水作业和过度恶意旷课的坏毛病。</p><p>不得不说，single的日子过的非常舒坦，得益于情绪起伏低，步步为营有更多的思考时间和空间，然后可以按照自己的节奏随意阅读、自研、娱乐、运动等。不过也有必要思考为什么处在人际关系情形下，人容易失去理智。</p><p>其他的事情，阅读毛选、我的奋斗等，上油管看看青年大学习，玩玩eu4、红警、pvz之类的；</p><p>今天一看炼丹云，欠费一百多，已经是崩了。不过没事后面不用了。然后感觉就是这个</p><h2 id="2-规划"><a href="#2-规划" class="headerlink" title="2 规划"></a>2 规划</h2><p>总体要完成的几个项目：</p><p>1.zhipinkkclub</p><p>2.timerme</p><p>3.bbs</p><p>4.留下想像空间的项目，可以是自研轮子或者自研游戏。暂不安排</p><p>建议划分为四个阶段，</p><p>七月上旬：短学期+恢复日常学习状态（（看课如b站、淘宝、抖音等平台的）、力扣（3&#x2F;day）、八股）+看书）</p><p>七月中旬：</p><p>回到家里，整理一下书房，先开始学CN，然后着手做BBS和TIMERME，注意可以有合理的任务分配。日常的学习状态保持，然后也保持阅读书籍。k8s。grpc。</p><p>七月下旬：</p><p>CN收尾、OS开始、日常、阅读、TIMERME收尾，zhipinkkclub完成。</p><p>八月上旬：</p><p>OS收尾、计组开始、日常（包括阅读）、bbs</p><p>八月中旬：</p><p>计组、日常、BBS+zhipinkk体系基本完善、认真收尾八股，开始投简历。</p><p>八月下旬：</p><p>短学期、日常 、八股、计组。</p><h2 id="3-电子管-晶体管-与-或-加法器-ALU"><a href="#3-电子管-晶体管-与-或-加法器-ALU" class="headerlink" title="3 电子管-&gt;晶体管-&gt;与-&gt;或-&gt;加法器-&gt;ALU"></a>3 电子管-&gt;晶体管-&gt;与-&gt;或-&gt;加法器-&gt;ALU</h2><p>电子管原理<a href="https://www.bilibili.com/video/BV1Pu411N74Q/?spm_id_from=333.337.search-card.all.click&vd_source=ef22f225254902b1a7226d19e89d6cde">https://www.bilibili.com/video/BV1Pu411N74Q/?spm_id_from=333.337.search-card.all.click&amp;vd_source=ef22f225254902b1a7226d19e89d6cde</a></p><p>在学习知识的时候，如果有不懂得地方，会呈现两种状态，一种是知道多看几遍可以搞懂的，一种是感觉比较难理解的，后者往往可能是缺了某块知识，这种时候跳过是最好的，回头再看就会很快，否则会浪费时间。</p><p>这个世界很神奇，为什么刚好有电这种东西存在呢？</p><p>与逻辑实现：</p><p><a href="https://www.bilibili.com/video/BV1Ti4y1e71G/?spm_id_from=333.337.search-card.all.click&vd_source=ef22f225254902b1a7226d19e89d6cde">https://www.bilibili.com/video/BV1Ti4y1e71G/?spm_id_from=333.337.search-card.all.click&amp;vd_source=ef22f225254902b1a7226d19e89d6cde</a></p><h2 id="4-effective-java-静态工厂方法替代构造方法"><a href="#4-effective-java-静态工厂方法替代构造方法" class="headerlink" title="4 effective java:静态工厂方法替代构造方法"></a>4 effective java:静态工厂方法替代构造方法</h2><p>简单来说，对象的实例不用去new，而是自定义的创建对象函数，然后注意这玩意是静态的，静态的代表不需要对象实例就可以被调用。而构造函数将会被私有化。优点是意图明确，然后内存的控制更灵活。缺点在于难在API文档中标识出来构造应该通过静态工厂方法。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Vehicle</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 私有构造函数，防止外部直接使用new来创建对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Vehicle</span><span class="params">(String type)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.type = type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态工厂方法，提供了更明确的命名</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Vehicle <span class="title function_">createCar</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Vehicle</span>(<span class="string">&quot;Car&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Vehicle <span class="title function_">createBike</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Vehicle</span>(<span class="string">&quot;Bike&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Getter方法</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getType</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> type;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 使用静态工厂方法创建对象</span></span><br><span class="line">        <span class="type">Vehicle</span> <span class="variable">car</span> <span class="operator">=</span> Vehicle.createCar();</span><br><span class="line">        <span class="type">Vehicle</span> <span class="variable">bike</span> <span class="operator">=</span> Vehicle.createBike();</span><br><span class="line"></span><br><span class="line">        System.out.println(car.getType());  <span class="comment">// 输出：Car</span></span><br><span class="line">        System.out.println(bike.getType()); <span class="comment">// 输出：Bike</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-effective-java：构造器替代多参数构造函数"><a href="#5-effective-java：构造器替代多参数构造函数" class="headerlink" title="5 effective java：构造器替代多参数构造函数"></a>5 effective java：构造器替代多参数构造函数</h2><p><img src="/.top//Users\11953\AppData\Roaming\Typora\typora-user-images\image-20240711012617675.png" alt="image-20240711012617675"></p><p>如图展示一个构造器，也就是常说的builder。</p><p>首先明确概念<strong>抽象类</strong>：不能被实例化的类。</p><p><strong>抽象方法</strong>：没有方法体的方法。</p><p>然后如果添加一些枚举可以让代码可读性更高：</p><p><img src="/.top//Users\11953\AppData\Roaming\Typora\typora-user-images\image-20240711020315176.png" alt="image-20240711020315176"></p><h2 id="6-effective-java：-Singleton的优化"><a href="#6-effective-java：-Singleton的优化" class="headerlink" title="6 effective java： Singleton的优化"></a>6 effective java： Singleton的优化</h2><p>Singleton：单例模式，即只有一个实例。</p><p>私有构造器：确保只实例化一次，但是一开始就全局实例化，可能出现没有用也有实例的情况</p><p><img src="/.top//Users\11953\AppData\Roaming\Typora\typora-user-images\image-20240711102704908.png" alt="image-20240711102704908"></p><p>枚举单例：枚举机制可以防止被多次实例化。</p><p><img src="/.top//Users\11953\AppData\Roaming\Typora\typora-user-images\image-20240711102811875.png" alt="image-20240711102811875"></p><h2 id="7-EJ：私有构造器防止类被实例化"><a href="#7-EJ：私有构造器防止类被实例化" class="headerlink" title="7 EJ：私有构造器防止类被实例化"></a>7 EJ：私有构造器防止类被实例化</h2><p>私有的构造函数并且抛异常，很好杜绝一个类似于枚举类型的类被实例化。</p><p><img src="/.top//Users\11953\AppData\Roaming\Typora\typora-user-images\image-20240711103524305.png" alt="image-20240711103524305"></p><p>缺点是不能继承（子类化），因为没有构造函数，子类必须调用超类构造器。</p><p><img src="/.top//Users\11953\AppData\Roaming\Typora\typora-user-images\image-20240711103708618.png" alt="image-20240711103708618"></p><h2 id="8-了解依赖注入与JAVA8的Supplier接口"><a href="#8-了解依赖注入与JAVA8的Supplier接口" class="headerlink" title="8 了解依赖注入与JAVA8的Supplier接口"></a>8 了解依赖注入与JAVA8的Supplier接口</h2><h3 id="示例：不使用依赖注入"><a href="#示例：不使用依赖注入" class="headerlink" title="示例：不使用依赖注入"></a>示例：不使用依赖注入</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">MessageService</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">sendMessage</span><span class="params">(String message, String recipient)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EmailService</span> <span class="keyword">implements</span> <span class="title class_">MessageService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMessage</span><span class="params">(String message, String recipient)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Sending an email to &quot;</span> + recipient + <span class="string">&quot;: &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> EmailService emailService;  <span class="comment">// 直接依赖具体实现</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Application</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.emailService = <span class="keyword">new</span> <span class="title class_">EmailService</span>();  <span class="comment">// 实例化具体实现</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processMessages</span><span class="params">(String message, String recipient)</span> &#123;</span><br><span class="line">        emailService.sendMessage(message, recipient);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Application</span> <span class="variable">app</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Application</span>();</span><br><span class="line">        app.processMessages(<span class="string">&quot;Hello, World!&quot;</span>, <span class="string">&quot;user@example.com&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="示例：使用依赖注入"><a href="#示例：使用依赖注入" class="headerlink" title="示例：使用依赖注入"></a>示例：使用依赖注入</h3><p>其他不变</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> MessageService messageService;  <span class="comment">// 依赖抽象接口，而不是具体实现</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Application</span><span class="params">(MessageService service)</span> &#123;  <span class="comment">// 通过构造函数注入依赖</span></span><br><span class="line">        <span class="built_in">this</span>.messageService = service;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processMessages</span><span class="params">(String message, String recipient)</span> &#123;</span><br><span class="line">        messageService.sendMessage(message, recipient);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MessageService</span> <span class="variable">service</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EmailService</span>();  <span class="comment">// 创建依赖对象</span></span><br><span class="line">        <span class="type">Application</span> <span class="variable">app</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Application</span>(service);  <span class="comment">// 注入依赖</span></span><br><span class="line">        app.processMessages(<span class="string">&quot;Hello, Dependency Injection&quot;</span>, <span class="string">&quot;user@example.com&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="对比分析"><a href="#对比分析" class="headerlink" title="对比分析"></a>对比分析</h3><p>主要区别在于，一个是依赖接口，一个是依赖具体实现类。显然前者灵活性更好。</p><h3 id="Supplier接口的定义"><a href="#Supplier接口的定义" class="headerlink" title="Supplier接口的定义"></a>Supplier接口的定义</h3><p><code>Supplier&lt;T&gt;</code> 接口定义非常简单，它包含一个没有输入参数的方法 <code>get()</code>，该方法返回一个泛型 <code>T</code> 类型的结果。这里的 <code>T</code> 是输出类型，由实现此接口的类来指定。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Supplier</span>&lt;T&gt; &#123;</span><br><span class="line">    T <span class="title function_">get</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h3><p><code>Supplier</code> 接口通常用于延迟生成或计算值，或者在需要生成一个新对象而不需要额外信息时使用。例如，它可以用于提供默认值或者构造复杂对象。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>下面是一个使用 <code>Supplier</code> 接口的简单示例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.function.Supplier;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SupplierExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 使用Lambda表达式创建Supplier实例</span></span><br><span class="line">        Supplier&lt;String&gt; stringSupplier = () -&gt; <span class="string">&quot;Hello, World!&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用get()方法获取值</span></span><br><span class="line">        System.out.println(stringSupplier.get()); <span class="comment">// 输出：Hello, World!</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个更复杂的对象</span></span><br><span class="line">        Supplier&lt;LocalDateTime&gt; timeSupplier = () -&gt; LocalDateTime.now();</span><br><span class="line">        System.out.println(<span class="string">&quot;Current time: &quot;</span> + timeSupplier.get()); <span class="comment">// 输出当前时间</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 <code>Supplier</code> 接口来改造工厂模式是一个现代化和更具灵活性的方法。这种方式允许我们使用 Java 8 引入的函数式编程特性，让代码更加简洁和可扩展。下面我将示范如何使用 <code>Supplier</code> 接口来改造之前的数据库连接工厂。</p><h3 id="能否展现一个资源工厂传递给构造器的设计方法？"><a href="#能否展现一个资源工厂传递给构造器的设计方法？" class="headerlink" title="能否展现一个资源工厂传递给构造器的设计方法？"></a>能否展现一个资源工厂传递给构造器的设计方法？</h3><p>在设计模式中，资源工厂的概念通常与依赖注入（DI）结合使用，特别是在构造器注入的情况下。这种模式不仅有助于降低组件之间的耦合，还提高了代码的灵活性和可测试性。</p><p>假设我们有一个应用程序需要连接到多种数据库（如MySQL、PostgreSQL等），我们可以创建一个数据库连接工厂，这个工厂根据配置或需求动态创建相应的数据库连接。</p><h3 id="步骤-1-定义数据库连接接口"><a href="#步骤-1-定义数据库连接接口" class="headerlink" title="步骤 1: 定义数据库连接接口"></a>步骤 1: 定义数据库连接接口</h3><p>首先，我们定义一个数据库连接的接口，这个接口规定了所有数据库连接必须实现的方法。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DatabaseConnection</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">connect</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">disconnect</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="步骤-2-实现具体的数据库连接类"><a href="#步骤-2-实现具体的数据库连接类" class="headerlink" title="步骤 2: 实现具体的数据库连接类"></a>步骤 2: 实现具体的数据库连接类</h3><p>接下来，我们实现几个具体的数据库连接类，每个类对应一种数据库。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MySQLConnection</span> <span class="keyword">implements</span> <span class="title class_">DatabaseConnection</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">connect</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Connecting to MySQL database.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">disconnect</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Disconnecting from MySQL database.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PostgreSQLConnection</span> <span class="keyword">implements</span> <span class="title class_">DatabaseConnection</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">connect</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Connecting to PostgreSQL database.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">disconnect</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Disconnecting from PostgreSQL database.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Java中，<code>Supplier</code> 是一个功能接口（functional interface），主要用于提供一个数据值，而不接受任何参数。它属于 <code>java.util.function</code> 包，这个包包含了多种功能接口，用于支持Java的Lambda表达式和函数式编程。</p><h3 id="步骤-3-使用-Supplier-改造工厂"><a href="#步骤-3-使用-Supplier-改造工厂" class="headerlink" title="步骤 3: 使用 Supplier 改造工厂"></a>步骤 3: 使用 <code>Supplier</code> 改造工厂</h3><p>这次我们使用 <code>Supplier&lt;DatabaseConnection&gt;</code> 来改造工厂方法，使其返回一个 <code>Supplier</code> 实例，而不是直接返回一个数据库连接对象。这种方式让我们能够延迟连接的创建直到真正需要时。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Supplier;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DatabaseConnectionFactory</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, Supplier&lt;DatabaseConnection&gt;&gt; connectionSuppliers = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        connectionSuppliers.put(<span class="string">&quot;MySQL&quot;</span>, MySQLConnection::<span class="keyword">new</span>);</span><br><span class="line">        connectionSuppliers.put(<span class="string">&quot;PostgreSQL&quot;</span>, PostgreSQLConnection::<span class="keyword">new</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Supplier&lt;DatabaseConnection&gt; <span class="title function_">getConnectionSupplier</span><span class="params">(String type)</span> &#123;</span><br><span class="line">        Supplier&lt;DatabaseConnection&gt; supplier = connectionSuppliers.get(type);</span><br><span class="line">        <span class="keyword">if</span> (supplier == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;No such database type supported.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> supplier;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="步骤-4-使用构造器注入-Supplier"><a href="#步骤-4-使用构造器注入-Supplier" class="headerlink" title="步骤 4: 使用构造器注入 Supplier"></a>步骤 4: 使用构造器注入 <code>Supplier</code></h3><p>现在我们修改 <code>DataManager</code> 类，使其接收一个 <code>Supplier&lt;DatabaseConnection&gt;</code>。这允许 <code>DataManager</code> 控制连接的实际创建时机。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataManager</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Supplier&lt;DatabaseConnection&gt; connectionSupplier;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DataManager</span><span class="params">(Supplier&lt;DatabaseConnection&gt; connectionSupplier)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.connectionSupplier = connectionSupplier;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processData</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">DatabaseConnection</span> <span class="variable">connection</span> <span class="operator">=</span> connectionSupplier.get(); <span class="comment">// 实际创建连接</span></span><br><span class="line">        connection.connect();</span><br><span class="line">        System.out.println(<span class="string">&quot;Processing data...&quot;</span>);</span><br><span class="line">        connection.disconnect();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="步骤-5-在应用中使用"><a href="#步骤-5-在应用中使用" class="headerlink" title="步骤 5: 在应用中使用"></a>步骤 5: 在应用中使用</h3><p>我们使用改造后的工厂来获取连接的 <code>Supplier</code> 并传递给 <code>DataManager</code>。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Supplier&lt;DatabaseConnection&gt; connectionSupplier = DatabaseConnectionFactory.getConnectionSupplier(<span class="string">&quot;MySQL&quot;</span>);</span><br><span class="line">        <span class="type">DataManager</span> <span class="variable">manager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataManager</span>(connectionSupplier);</span><br><span class="line">        manager.processData();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>工厂类似于一种分发装置。</p><h2 id="9"><a href="#9" class="headerlink" title="9"></a>9</h2><p>高手总是会把一个非常有讲究的事情描述的非常轻松，首先一点是他的精神状态确实比较轻松，其次他们懒得给对他们毫无利益的外人总结自己独门的解决方案。比如高绩点他会说期末学个两周，平时代签就可以。殊不知平时的精神状态、作息、预备知识等都是非常重要的因素，也不能保证他之前没有在其他地方学过。因此我们如果想要复刻高手的逻辑，就要复刻他们隐藏的一些点，而不是只见表面。比如说，可以平日里非常努力地做其他事情而不是摆烂，然后作息要正常，心态要好，同时可以超前学习某些科目，然后隔一段时间反复速成，也会得到很好的巩固。</p><h2 id="10"><a href="#10" class="headerlink" title="10"></a>10</h2><p>有的时候会发现，有事情的时候感觉来不及学了，就想开摆，而开摆的时候又感觉没那么明显来不及学的感觉。不过这只是一种自我欺骗，面对焦虑，不应该去逃避，而是直接硬钢，让自己行动起来，而不是逃走。因为前者对自己长期收益更大，而后者“得一夕安寝，而秦兵又至矣”。</p><h2 id="11"><a href="#11" class="headerlink" title="11"></a>11</h2><p>知识都是前人写好的，他们往往不是什么世界的真理，而是认为的规定，我们要做的就是学别人的规定罢了。 </p><h2 id="12"><a href="#12" class="headerlink" title="12"></a>12</h2><p>有时候发现自己没有那么强的欲望和目标感，这是因为对太多东西祛魅了，往往就丧失了向上的动力。适当赋魅其实是必要的，如果一些奖、成绩、论文我们看做是垃圾，但是一些重要的岗位、考到好的院校却可以当做我们宏伟的目标。没有志向的人终究会堕落。</p><p>祛魅这个东西再说，比如游戏为什么上瘾，因为游戏打得好，排名高，会让人觉得有面子，也会得到一些崇拜。但是大了之后，就发现没人崇拜了，也没人在意这个游戏，它的含金量失去了，只是自娱自乐，因此也就没意思了。现仅存的就是一些虚幻的征服感。人越趋向于理解事物的本质，就越会痛失幻想的能力。突然发现中学时期我所诟病的梦想家其实是一个伟大的能力，而我却逐渐遗失了它，包括遗失了对恋爱之流的幻想。情绪稳定也许是有好处，但是随之带来的是也没有特别令人兴奋的时刻。幻想不得不说是一项伟大的能力，还有那种不服输的野性也是。所谓的情绪稳定，往坏了说就是丧失了征服的野性，也失去了对梦想的渴望，未老先衰，不是好事。贪婪的人才能得到更多，这是人性的本质，但是隐藏是一门艺术。我要推翻一直以来“真实”的信念，因为我觉得真实才能轻松不容易露馅，但现在看来，去弄虚作假而瞒天过海，才是更高深的一门学问。当然，这里的弄虚作假我不希望是学术、技术等，而是人际关系方面。在前者方面上，我还是认为以“真”为本才好，毕竟杀人造了把假刀，也杀不死人。但是在人际上，却可以靠撒谎实现借刀杀人。这就是物理层面和精神层面的差距。</p><h2 id="13"><a href="#13" class="headerlink" title="13"></a>13</h2><p>是什么人能够脱颖而出？明知道需要自律但是真正能自律的人。对一些事情真正热爱并且去做的人。前人归结作几个词：致良知、知行合一。</p><p>有的知识，一下子理解不了，不需要死磕，因为自己的储备还没有到那个level，只需要耐心地继续储备，回头顺其自然地就解决了。如果患得患失，或者对无生命事物动怒，无异于原始人。</p><p>让自己变成被迫学习的人，然后完成一些任务之后就可以获得一些奖励，这样会很欢乐。把自己当成一个小孩，然后用理性人建立奖励机制，这应该是一种不错的学习办法。</p><p>人就应该建立多重人格，不然又怎么去了解世界上那么多性格？每多一种人格就多一种对他人的了解。而不同的人格还可以帮助自己认识自我，找到一个适合于自己当下的人格，然后逐渐让他们相互借鉴融合。</p><h2 id="14"><a href="#14" class="headerlink" title="14"></a>14</h2><p>感觉学习工作无聊的时候，就让自己发呆放空，而不是找事情消遣。放空会让自己变得更无聊，从而会觉得学习工作稍微会有趣一点。这是利用人性本来的规律。</p><h2 id="15"><a href="#15" class="headerlink" title="15"></a>15</h2><p>我必考研，干嘛不考？考的好处：</p><p>1.考上了有光环title，更有自尊，更好找工作</p><p>2.有更好的平台资源和人脉</p><p>3.去大城市见识一下</p><p>4.有更多时间去学习，去修炼，去深造，有更多未知的可能，更能和先进技术接轨</p><p>5.好找对象，不仅是院校上的，还有title上的</p><p>不考的好处：</p><p>1.早点工作，提早步入成年人生活</p><p>2.大学期间腾出更多时间投入开发和自己的项目</p><p>玛德总的来说肯定长远看是考研好，对不。冲。</p><h2 id="16"><a href="#16" class="headerlink" title="16"></a>16</h2><p>滞后性，不仅是审美、大众追求，还有价值观的对齐。</p><p>比如学历贬值，但是仍然有它很有用的刻板印象；</p><p>海归、好工作、好专业、发论文；</p><p>门槛一旦降低，那么价值就降低。</p><h2 id="17"><a href="#17" class="headerlink" title="17"></a>17</h2><p>天才都不适合婚姻。</p><p>哲学和文学到底是不是一体两面呢？他们好像是交织在一起的。</p><p>我现在在从绩优主义向幸福注意、犬儒主义和荒诞主义转变。</p><p>人不应该对着自己的弱点期待被怜悯和安慰，而是去除这些弱点。</p><p>人类的进步靠的不是合群的人，而是逆天的人。</p><h2 id="18"><a href="#18" class="headerlink" title="18"></a>18</h2><p>今天刷20道力扣。总结一些细节小点，作为备忘录</p><p>1.异或公式</p><p><img src="/.top//Users\11953\AppData\Roaming\Typora\typora-user-images\image-20240722180750670.png" alt="image-20240722180750670"></p><p><img src="/.top//Users\11953\AppData\Roaming\Typora\typora-user-images\image-20240722180800750.png" alt="image-20240722180800750"></p><p>2.<code>StringBuilder</code>是一个<code>final</code>类，因此不能通过继承匿名内部类来扩展它。</p>]]></content:encoded>
      
      
      <category domain="https://cjliblog.top/categories/%E6%97%A5%E8%AE%B0/">日记</category>
      
      
      <category domain="https://cjliblog.top/tags/%E6%97%A5%E8%AE%B0/">日记</category>
      
      
      <comments>https://cjliblog.top/2024/07/06/24-7-6/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>24-7-6</title>
      <link>https://cjliblog.top/2024/07/06/golang%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <guid>https://cjliblog.top/2024/07/06/golang%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <pubDate>Fri, 05 Jul 2024 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;golang基础&quot;&gt;&lt;a href=&quot;#golang基础&quot; class=&quot;headerlink&quot; title=&quot;golang基础&quot;&gt;&lt;/a&gt;golang基础&lt;/h1&gt;&lt;h2 id=&quot;1-unsafe包解读&quot;&gt;&lt;a href=&quot;#1-unsafe包解读&quot; class</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="golang基础"><a href="#golang基础" class="headerlink" title="golang基础"></a>golang基础</h1><h2 id="1-unsafe包解读"><a href="#1-unsafe包解读" class="headerlink" title="1.unsafe包解读"></a>1.unsafe包解读</h2><p>绕过安全规则的方法，比如获取内存信息的sizeof方法。</p><p>unsafe包应当主要用于程序员调试，而不能出现在生产应用。</p><h2 id="2-获得字符串的指针"><a href="#2-获得字符串的指针" class="headerlink" title="2.获得字符串的指针"></a>2.获得字符串的指针</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">sh :=(*reflect.StringHeader)(unsafe.Pointer(&amp;s))</span><br></pre></td></tr></table></figure><p>s是字符串，由于字符串的runtime底层包是私有法方法，但是reflect里面有StringHeader方法作为public的映射，因此先强转成指针，然后再强转成StringHeader。注意，这个过程中地址不会发生改变。</p><p>其中，包含一个Data指针（原始的int）和一个Len（int）。</p><p><img src="https://m.qpic.cn/psc?/V53kfs7M0yNvo22mPmRx0m705V1QyDz1/TmEUgtj9EK6.7V8ajmQrEMD*9Zg.P8RU7ZvFcGgmLScgtg7eIeJxpZY6*AJ*VSCcTgMqP0G75RabbEJ7ZMY15lPODWpyCc1KQki*7ql*Tzs!/b&bo=mgLTAAAAAAABB2s!&rf=viewer_4" alt="img"></p><h2 id="3-rune类型是什么？"><a href="#3-rune类型是什么？" class="headerlink" title="3.rune类型是什么？"></a>3.rune类型是什么？</h2><p>可以理解成utf8的类型。因为不管是一个汉字还是一个字母，都是一个单位的rune。因此它还和传统意义上的char有所区别。它是int32类型，也就是说是int（64）的一半。</p><h2 id="4-切片"><a href="#4-切片" class="headerlink" title="4.切片"></a>4.切片</h2><p>个人感觉go的切片相当于java中的arraylist，进行一个主动开辟空间，然后动态扩容的自动化操作。</p><p>那么关于容量调整，其实arraylist和slice都是默认扩大，而不会缩小，除非把它释放。</p><p>还有一个点就是slice可以由数组创建，因为它的底层cap是数组结构，因此可能产生slice在cap里的偏移，比如从下标为3开始，而arraylist一定是在cap（容量）里顶格的，除非做一些复杂的底层操作。</p><p>arraylist的扩容是初始为10，每次1.5倍。而slice的扩容是每次两倍（当len&gt;1024，每次增加25%）。</p><p>这二者都线程不安全。原因在于：扩容的时候废弃原来的地址，导致其他协程（线程）会发生错误。</p><h2 id="5-哈希"><a href="#5-哈希" class="headerlink" title="5.哈希"></a>5.哈希</h2><p>java和go的hashmap（go就是map）都采用链式寻址。一个地址一条链，叫做桶。go的桶里面包括一个bmap数组（$2^B$个单位，B来自结构体的字段），有一个nextoverflow字段，指向链表中的下一个桶。一个bmap可以放bucketCnt个键值对，bucketCnt默认值为8，里面放tophash、key、elem（value）、overflow（若溢出指针）等。</p><h4 id="关于扩容："><a href="#关于扩容：" class="headerlink" title="关于扩容："></a>关于扩容：</h4><p>当负载因子 $load factor&#x3D;\frac{elemNum}{bucketNum}&gt;6.5$ 或溢出桶数量过多时会开辟新桶，届时采用渐进式（incremental）扩容，即老的桶依然存在并保存在对象的oldBucket字段，当每次操作map（插入或删除）之后会迁移一定量的桶，直到全部完成，然后对老桶数组进行垃圾回收。</p><p>也正因为渐进式扩容，因此线程也不安全，因此有必要加互斥锁（mutex）。</p><h4 id="关于Sync-Map"><a href="#关于Sync-Map" class="headerlink" title="关于Sync.Map"></a>关于Sync.Map</h4><p>由于扩容的线程不安全，衍生出官方的数据结构——Sync包下的Map。</p><p>该结构有四个字段：mu，read，dirty和missed。</p><p>主要分成两线存key，分为read和dirty两种存储结构，而value共用一份内存，适用于读多写少的情况。</p><p>查、改：一般情况读走read（一个只读快照），若read中找不到，锁住mu，走dirty。</p><p>追加：添加数据走dirty（写时才发生read的复制并追加），而在读read会有未命中次数累加到missed字段，missed达到len(dirty)的时候，将发生《dirty上移》，也就是把read指针指向dirty，dirty指针指向nil。</p><p>删除：直接让read的某个key指向nil。如果是dirty中的追加键（read中找不到的key）被删除，则上提成read时给nil改成expunged，用于标记下一次复制到新dirty时不再考虑这个key。</p>]]></content:encoded>
      
      
      <category domain="https://cjliblog.top/categories/%E6%97%A5%E8%AE%B0/">日记</category>
      
      
      <category domain="https://cjliblog.top/tags/%E6%97%A5%E8%AE%B0/">日记</category>
      
      
      <comments>https://cjliblog.top/2024/07/06/golang%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>大注释实时模版</title>
      <link>https://cjliblog.top/2024/06/09/%E5%A4%A7%E6%B3%A8%E9%87%8A%E5%AE%9E%E6%97%B6%E6%A8%A1%E7%89%88/</link>
      <guid>https://cjliblog.top/2024/06/09/%E5%A4%A7%E6%B3%A8%E9%87%8A%E5%AE%9E%E6%97%B6%E6%A8%A1%E7%89%88/</guid>
      <pubDate>Sat, 08 Jun 2024 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;如图：&lt;/p&gt;
&lt;p&gt;[&lt;img src=&quot;https://raw.githubusercontent.com/Li-can-cheng/Li-can-cheng.github.io/main/img/%E5%A4%A7%E6%B3%A8%E9%87%8A%E5%AE%9E</description>
        
      
      
      
      <content:encoded><![CDATA[<p>如图：</p><p>[<img src="https://raw.githubusercontent.com/Li-can-cheng/Li-can-cheng.github.io/main/img/%E5%A4%A7%E6%B3%A8%E9%87%8A%E5%AE%9E%E6%97%B6%E6%A8%A1%E7%89%88.jpg" alt="大注释实时模版">]</p>]]></content:encoded>
      
      
      <category domain="https://cjliblog.top/categories/%E8%84%9A%E6%9C%AC/">脚本</category>
      
      
      
      <comments>https://cjliblog.top/2024/06/09/%E5%A4%A7%E6%B3%A8%E9%87%8A%E5%AE%9E%E6%97%B6%E6%A8%A1%E7%89%88/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>近来感悟</title>
      <link>https://cjliblog.top/2024/06/07/%E8%BF%91%E6%9D%A5%E6%84%9F%E6%82%9F/</link>
      <guid>https://cjliblog.top/2024/06/07/%E8%BF%91%E6%9D%A5%E6%84%9F%E6%82%9F/</guid>
      <pubDate>Thu, 06 Jun 2024 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;1&quot;&gt;&lt;a href=&quot;#1&quot; class=&quot;headerlink&quot; title=&quot;1&quot;&gt;&lt;/a&gt;1&lt;/h2&gt;&lt;p&gt;有些傻子读了书，也只是读了书的傻子。满嘴科学，逻辑，客观，脑里只有精致利己，“自命不凡”，没有经验积累，逻辑全靠臆想。“知识分子”容易拿臆想当理性，</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="1"><a href="#1" class="headerlink" title="1"></a>1</h2><p>有些傻子读了书，也只是读了书的傻子。满嘴科学，逻辑，客观，脑里只有精致利己，“自命不凡”，没有经验积累，逻辑全靠臆想。“知识分子”容易拿臆想当理性，带着一股子“自我感觉良好实则缺乏大脑”还不自知，大概是家里有矿娇生惯养导致的，智力停留在幼儿园。人的“逻辑”不可能做到客观，因此不是真正的逻辑。对优绩主义深信不疑，忽略运气，以为既得利益都归结于自己的努力。现实里只是个整天和别人以嫉妒心暗暗较劲的垃圾，心里早已做好当人上人的美梦。自诩修养高尚不与人争论的人比比皆是，读了书的傻子是其中之一。</p><h2 id="2"><a href="#2" class="headerlink" title="2"></a>2</h2><p>网上所谓的中西医之争，本质是意识形态之争，利益之争，就不是效果之争，不是帮人与否之争。争来争去，没有一个人是看到病人临死时的痛苦，就是以科学、医学之名来维护各方利益。</p><h2 id="3"><a href="#3" class="headerlink" title="3"></a>3</h2><p>作文写的再好，也不过是满足阅卷人的喜好。我指的是所谓比赛和科研，本质上都是形式主义，而非真才实学。有真才实学之后再出的成就，才是真正的成就。因此不要略过了沉淀就开始水结果。</p><h2 id="4"><a href="#4" class="headerlink" title="4"></a>4</h2><p>十几年的学习的真正作用——储备知识，锻炼思维，进而增强能力，真正的目的在于建立良好的思维习惯，而不是学习得了多少分。不能再去拘泥于形式上有多少荣誉，而是成为自己行业里拿到好结果的那个人。目前对我来说，这个好结果就是好的工作、好的生活。</p><h2 id="5"><a href="#5" class="headerlink" title="5"></a>5</h2><p>相信直觉</p><p>有顶会确实有用</p><p>但是从顶会到变现还需要好几年</p><p>而实习一下一个月都可以拿万把来块了</p><p>算下这笔账</p><p>硕士毕业</p><p>和一个大二开始实习然后本科就业的</p><p>他妈一个都可以买房了</p><p>一个才刚毕业</p>]]></content:encoded>
      
      
      <category domain="https://cjliblog.top/categories/%E6%97%A5%E8%AE%B0/">日记</category>
      
      
      <category domain="https://cjliblog.top/tags/%E6%97%A5%E8%AE%B0-%E7%9F%AD%E5%8F%A5/">日记 短句</category>
      
      
      <comments>https://cjliblog.top/2024/06/07/%E8%BF%91%E6%9D%A5%E6%84%9F%E6%82%9F/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>ubuntuDocker部署</title>
      <link>https://cjliblog.top/2024/04/25/ubuntuDocker%E9%83%A8%E7%BD%B2/</link>
      <guid>https://cjliblog.top/2024/04/25/ubuntuDocker%E9%83%A8%E7%BD%B2/</guid>
      <pubDate>Wed, 24 Apr 2024 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;Ubuntu装docker&quot;&gt;&lt;a href=&quot;#Ubuntu装docker&quot; class=&quot;headerlink&quot; title=&quot;Ubuntu装docker&quot;&gt;&lt;/a&gt;Ubuntu装docker&lt;/h2&gt;&lt;p&gt;在Ubuntu 22.04上执行上述操作需要稍微调整</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="Ubuntu装docker"><a href="#Ubuntu装docker" class="headerlink" title="Ubuntu装docker"></a>Ubuntu装docker</h2><p>在Ubuntu 22.04上执行上述操作需要稍微调整命令，因为Ubuntu使用的是APT包管理器，而不是CentOS的YUM。首先，我们需要更新系统包列表，然后安装一些必要的软件包，如<code>apt-transport-https</code>、<code>ca-certificates</code>、<code>curl</code>、<code>software-properties-common</code>等，这些软件包将帮助我们添加Docker的官方GPG密钥和仓库。接下来，我们将添加Docker的官方APT仓库，然后安装Docker CE（社区版）和它的依赖包。最后，我们启动并使Docker服务开机自启，然后检查Docker版本和列出当前的Docker镜像。下面是具体的命令序列：</p><ol><li><p>更新APT包索引：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure></li><li><p>安装一些必要的包，这些包允许<code>apt</code>通过HTTPS使用仓库：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install -y apt-transport-https ca-certificates curl software-properties-common</span><br></pre></td></tr></table></figure></li><li><p>添加Docker的官方GPG密钥：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure></li><li><p>向<code>sources.list</code>中添加Docker的APT仓库：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository <span class="string">&quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu <span class="subst">$(lsb_release -cs)</span> stable&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>再次更新APT包索引（这一步是为了确保APT可以从新添加的Docker仓库中检索到包）：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure></li><li><p>安装Docker CE及其命令行工具：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install -y docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure></li><li><p>启动Docker服务：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure></li><li><p>设置Docker服务开机自启：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure></li><li><p>检查Docker版本以确认安装成功：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker version</span><br></pre></td></tr></table></figure></li><li><p>列出当前已有的Docker镜像：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure></li></ol>]]></content:encoded>
      
      
      <category domain="https://cjliblog.top/categories/%E7%AC%94%E8%AE%B0/">笔记</category>
      
      
      <category domain="https://cjliblog.top/tags/%E7%AC%94%E8%AE%B0/">笔记</category>
      
      
      <comments>https://cjliblog.top/2024/04/25/ubuntuDocker%E9%83%A8%E7%BD%B2/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>夏季日记</title>
      <link>https://cjliblog.top/2024/04/16/%E5%A4%8F%E5%AD%A3%E6%97%A5%E8%AE%B0/</link>
      <guid>https://cjliblog.top/2024/04/16/%E5%A4%8F%E5%AD%A3%E6%97%A5%E8%AE%B0/</guid>
      <pubDate>Mon, 15 Apr 2024 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;夏季日记&quot;&gt;&lt;a href=&quot;#夏季日记&quot; class=&quot;headerlink&quot; title=&quot;夏季日记&quot;&gt;&lt;/a&gt;夏季日记&lt;/h1&gt;&lt;h2 id=&quot;4-16&quot;&gt;&lt;a href=&quot;#4-16&quot; class=&quot;headerlink&quot; title=&quot;4-16&quot;&gt;&lt;/a</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="夏季日记"><a href="#夏季日记" class="headerlink" title="夏季日记"></a>夏季日记</h1><h2 id="4-16"><a href="#4-16" class="headerlink" title="4-16"></a>4-16</h2><p>​黑奴外包比赛终于结束，开始回归正轨。骗你的，还没。</p><p>​我先说一下接下来要做的事情。只因点方面，一个是补充一下计组和概统的内容，不过更重要的是先应付作业；研狗方面，就是周五之前改好代码，顺便学习一下点云、卷积、特征和GS具体原理与实现的相关的知识；然后是BBS项目方面，现在的团队虽然有一定的规模，但其实比较散，就像我自己其实也东西奔走，很少有空静下心处理这个项目，感觉是有必要花个小周末或小假期精心打磨一下，先把官网搭出来，暂定的话就这周末吧；另外一个是外包的尾巴，其实我这个网站还没部署，有必要把功能做全，其实今天开始就可以陆续开工了，也是尽量在本周末把它搭完，甚至可以把它直接和我们的BBS项目进行结合，当然，尽量不要暴露了学校，不然可能会泡汤。</p><p>​谔谔，不过现在紧要的是把电脑理一理，然后改一下服务器上所有中间件的密码（没错，交作品的时候暴露了），然后给5000端口做一个欢迎界面，给一个详细部署文档和样例服务。ok，接下来飞书布置一下任务，准备动手。</p><h3 id="butterfly框架的段落缩进-转载"><a href="#butterfly框架的段落缩进-转载" class="headerlink" title="butterfly框架的段落缩进(转载)"></a>butterfly框架的段落缩进(转载)</h3><p>​在 Butterfly<code>2.3.0</code> 以上的版本中，我们可以在 inject 里添加额外的 CSS 代码，支持以标准的 HTML 格式插入代码到头部 <code>&lt;/head&gt;</code> 之前和底部 <code>&lt;/body&gt;</code> 之前。</p><p>添加步骤如下：</p><ol><li><p>在 source 目录下创建名为 css 的新文件夹</p></li><li><p>在 css 文件夹下创建 CSS 文件，例如 <code>indent.css</code></p></li><li><p>打开并编辑 <code>indent.css</code> 文件，添加如下代码并保存：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#article-container &gt; p &#123;text-indent: 2em&#125;</span><br></pre></td></tr></table></figure><p><code>em</code> 这个单位的意思是文字的高度，<code>text-indent: 2em</code> 的意思是文本缩进两个个文字的高度。<br>因为汉字是方块字，高度和宽度是一样的，所以缩进两个文字的高度，就等于缩进两个文字的宽度，最后的效果就是缩进了两个文字。</p></li><li><p>修改主题配置文件<code>_config.butterfly.yml</code> 中的 inject 相关配置，插入如下代码：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;/css/indent.css&quot;&gt;</span><br></pre></td></tr></table></figure><p>注意：如果你的网站根目录不是‘&#x2F;’，引用本地 CSS 文件时，需加上你的根目录。<br>假设你的网站是 <code>https://owo.wyc.rest/blog</code>，则设置为：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;/blog/css/indent.css&quot;&gt;</span><br></pre></td></tr></table></figure></li><li><p>直接hexo s查看效果</p><blockquote><p><strong>文章作者:</strong> <a href="https://owo.wyc.rest/about/">忘忧草</a></p><p><strong>文章链接:</strong> <a href="https://owo.wyc.rest/indent/">https://owo.wyc.rest/indent/</a></p><p><strong>版权声明:</strong> 本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/">CC BY-NC-SA 4.0</a> 许可协议。转载请注明来自 <a href="https://owo.wyc.rest/">忘忧草の小破站</a>！</p></blockquote></li></ol><h2 id="4-19"><a href="#4-19" class="headerlink" title="4-19"></a>4-19</h2><p>整理一下这周科研任务：</p><ol><li>把global模型改好跑通，然后给出一个output的文件夹</li><li>用urban数据集给GS，原版Fed，新版fed跑出指标、渲染效果图片、output文件夹（点云然后来渲染）</li></ol><h2 id="4-22"><a href="#4-22" class="headerlink" title="4-22"></a>4-22</h2><p>java开发任务：在A15的基础上继续做，截止时间为五月底。</p><p>1.将微信登录功能做上去，并且与基础登录功能进行整合。</p><p>2.鸡翅的二期全部做上去。包括——多线程，openfeign，本地缓存，es，排行榜，点赞，xxljob等、</p><p>3.每天力扣+408时间大于1H</p><p>创：给套壳网站上GPT4turbo拿去收费，可以五十块一个月，30条&#x2F;3小时，。</p><p>课业：看课，课内内容每天时长大于1H</p><h2 id="4-24"><a href="#4-24" class="headerlink" title="4-24"></a>4-24</h2><p>开发：力扣一道，计网一轮完成、completable异步操作复习、openfeign与RPC的复习、guava本地缓存基本使用、入门了下k8s</p><p>明日开发：搞定一下hyper-v的环境。</p><p>明日科研：把build_global模型改出来点云文件，同时把gs和fs的对比跑一下。读一下论文。</p><h2 id="4-25"><a href="#4-25" class="headerlink" title="4-25"></a>4-25</h2><p>开发：力扣两道，操作系统结构，进程线程开头。</p><p>明日开发：看完操作系统进程和线程。</p><h2 id="4-27"><a href="#4-27" class="headerlink" title="4-27"></a>4-27</h2><p>开发：力扣一道手写哈希随机集合，操作系统看到14，计组4.2_3</p><p>明日开发：尝试泛型抽取本地缓存，然后步入ES基础，主要是做岗位的搜索。</p><p>炼丹：开炼，跑三张图出来</p><h2 id="4-28"><a href="#4-28" class="headerlink" title="4-28"></a>4-28</h2><p>先做一个短期的展望。后面可能会有一个大挑（深度）和一个神经论文，因此深度+神经这些AI基础需要小学一手，况且研狗的话这是必须的，另外GS其实也涉及。因此需要把所谓科研时间稍微分出来一部分用来学神经。那么如果想要好好利用上课时间去摸索，不去打扰主线开发，那么可以考虑一下对着动手学深度学习的书直接啃，没错就干他。其实也就增加这一个事情，其他不必考虑。目前事情有3：冲开发岗、深度与GS、学业。同时GS理论也有必要去补充一下。</p><p>开发：SQL，力扣一道</p><h2 id="4-29"><a href="#4-29" class="headerlink" title="4-29"></a>4-29</h2><p>计组：目前的方案就是删掉一切数电，然后下个vivado2023，重新开始。</p><h2 id="5-17"><a href="#5-17" class="headerlink" title="5-17"></a>5-17</h2><p>ok，鸽了很久，遇到了乱七八糟的事情，总结一下：</p><p>脑残行为： 1.期中考乱考 2.作业乱写 3.炼丹乱炼 4.疯狂旷课却不干正事 5.报了个创营</p><p>认真但收货甚微行为：1.练习算法 2.服创收尾 3.深度学习 4.未央面新人 5.好吧炼丹也算</p><p>结果就是，期中考依托答辩，作业写了没有入脑，旷课学识+6，创营要两个周末，直接鸽了。算法练得很辣鸡，服创也没能进国赛，深度学习学了半天还在线性代数部分，未央面了半天感觉也得不到很好的效果，炼丹炼了半天，老师觉得现在还是先学着，暑假再认真搞。。</p><p>ok，那么现在其实迎来三天小假期。我要做的事情就是重整旗鼓，不要萎靡。</p><p>最大的感受是来了台主机，但其实没啥用，除了做数据库作业可以ssh一下linux。（没错，如果买显卡感觉不划算），然后在寝室呆多了精神状态会萎靡，不如出来，虽然一直坐着也会低效，但是对比起来会更好。或者可以在工作安排里加上一个午休的晚休，会舒适和高效一点。</p><p>然后我肯定暑假会花很多时间去科研以及挑战杯在那里炼丹（也就是积累一下科研了，而且应该要发文章至少），一个是不会回家，还有一个是要花时间去搞数模（还不确定，如果他们要水一个，感觉挺麻烦的，前提是要积累一些方法了，所以最近一直在努力补深度学习和torch的用法）；最重要的是做开发，要有算法、八股、项目三重BUFF，然后冲下学期的日常实习这样，然后如果有paper可以顺势做一个华为的算法实习这样子，多多尝试。嗯没错，暑假就是沉淀。然后开发是面字节嘛？给自己定位是java面go岗。这不得不提到论坛了。暑假前务必要把answer啃下来，然后包括鸡翅club内的所有技术栈，再加上kafka和k8s之类流行的工具，主要目的是让论坛八月前运作起来，然后直接录取通知书宣传。嗯是这样。</p><p>所以长期看，下个暑期主打沉淀，大三上的话应该是实习为主，大三下和大四上ALL IN考研，别的不用想，上岸的话大四下就是实习科研自由分配了，没上岸就直接先求职即可，如果计划正常执行也有两段实习了，没有压力。</p><p>那么现在来规划以下不同方向的追求：</p><p>课业：为了弄点小钱，和考研的体面，稍微注意一下绩点，期末考起码平均90？作业的话平时多花点时间，因为其实看起来多，做完之后又会感觉空虚，不如做的时候好好做，其实也不多。</p><p>开发：answer完整啃下来，并且二开之后作为自己的第二项目。之前的zhipinkk的话可以持续优化，可以试试冲明年的服创。然后旁支就是jcclub的课程，特别是面试辅导部分。扩展技术栈的话，一个是自动化运维要学会，比如gitaction，找个机会学，还有kafka和k8s，这些只是知道但是还没用上过，可以找个机会写进去。然后是八股，主要刷B站的视频和二哥面渣。算法的话，我觉得有必要结合B站看一下，然后力扣平时保持手感，也能学点东西。周赛啥的没必要。最后冲刺阶段，要对自己的项目进行深挖，不过都是后话。</p><p>炼丹：先肯深度学习大书，然后是各种论文研读，还有对应的代码的理解。同时慢慢推这个训练任务，尝试接受超算平台的使用。</p><p>（5-19）六一之前的任务转移到本地了</p><h2 id="5-18"><a href="#5-18" class="headerlink" title="5-18"></a>5-18</h2><p>1.今天还在继续炼丹。</p><p>2.通过代码把go的总体架构了解了一下，但后面决定还是react和go还要再通过视频学习一下，因为直接看虽然宏观上比较高效，但实际体验不太OK。</p><p>3.写了一道滑动窗口算法。</p><p>4.未央拉了点人头</p><h2 id="5-19"><a href="#5-19" class="headerlink" title="5-19"></a>5-19</h2><p>1.王道计组第四章看完，时长约3小时。</p><p>2.体验GPT4o完成概率论作业，看了点概率论</p><p>3.看了点大数和数理统计入门</p><p>4.继续炼丹</p><p>5.开个GS小会，确定接下来任务：1.colmap转移到超算，然后直接训练local; 2.看懂代码、数据集</p><p>6.未央面试</p><p>7.研究后续计划</p><h2 id="5-20"><a href="#5-20" class="headerlink" title="5-20"></a>5-20</h2><p>累了，先总结下。今天由于上课和开会，自学时间有点少，但是明天很炸裂的一天，罕见的满课日子被我搞成都没课233。</p><p>总结下，但是日记版：</p><p>0.计组课又坐牢，等待他人答案了，下波验收，队友人很好，就是有点小摆。</p><p>0.5.下午也坐牢，什么坤吧数据库吼吼吼，没事，明天水一下作业，后面慢慢补。</p><p>1.总算是跑通超算，不过还有待debug。炼丹的话数据出现了些差错，上次的不算数，得重新跑。</p><p>2.无人机小会，确定这周调研方向。</p><p>3.算法两道easy，做得我气喘吁吁。</p><p>4.处理了下论坛进度，对UI姐挺满意的。</p><p>5.对小东西进行了一波指导，周六蹭饭去咯（bushi）</p><p>6.饿了两顿，晚上报复性吃了三顿的量（bushi)，老妈请客吼吼吼，还给我买了好喝的牛奶吼吼吼</p><p>7.英语单词开始刷了，好兆头。</p><p>8.go的课程看了一下，质量很好，我很喜欢，而且基础部分一针见血，不像免费的基础课拖拖拉拉，爱了爱了，原来好老师讲的基础也是很有魅力的，明天加油看。</p><p>9.看了下项目流程的视频，也算是产品的课吧，对于产品、运维和测试的工作还有待学习。</p><p>10.未完成：(react课程，rn课程、expo课程)(1h&#x2F;d)八股：刷计算机基础课(先看王道（去掉计组，因为上面有）0.5h&#x2F;d)、小林coding（1h&#x2F;d）。啃深度学习大书（0.5h&#x2F;d）。不过主打的是在炼丹上透支了太多时间233，明天补上，并且削减炼丹时间。加油。</p><p>11.哦对了想到一个产品，今天稍微随便写了一下，我觉得这个可以放到论坛项目里，就是对于我写的计划，他可以读取，然后形成一个一览无余的视图，然后我可以点击进行执行，然后他会计时，这样他会动态增加进度视图，再点就是暂停，达标了就会有反馈，这样就代表任务完成。还可以自己设置欠债，第二天主动完成。卧槽，这才是理想中的时间管理产品。我随便取了个名字timerMe。</p><h2 id="5-21"><a href="#5-21" class="headerlink" title="5-21"></a>5-21</h2><p>发现一天想做太多事有点碎片化，建议早上就专门用来处理杂项，然后下午晚上集中起来去处理算法。</p><h2 id="6-2"><a href="#6-2" class="headerlink" title="6-2"></a>6-2</h2><h3 id="关于git提交的时候的小bug"><a href="#关于git提交的时候的小bug" class="headerlink" title="关于git提交的时候的小bug"></a>关于git提交的时候的小bug</h3><p>老显示一些不该提交的文件，甚至交上去太大了。</p><p>idea中，搜索设置文件类型，找到忽略的文件和文件夹，添加.idea和target,可以避免提交idea本地配置和jar包等没用玩意，同时也避免了在左侧不小心恶意显示。</p>]]></content:encoded>
      
      
      <category domain="https://cjliblog.top/categories/%E6%97%A5%E8%AE%B0/">日记</category>
      
      
      <category domain="https://cjliblog.top/tags/%E6%97%A5%E8%AE%B0/">日记</category>
      
      
      <comments>https://cjliblog.top/2024/04/16/%E5%A4%8F%E5%AD%A3%E6%97%A5%E8%AE%B0/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Error java 错误 不支持发行版本5</title>
      <link>https://cjliblog.top/2024/04/12/Error%20java%20%E9%94%99%E8%AF%AF%20%E4%B8%8D%E6%94%AF%E6%8C%81%E5%8F%91%E8%A1%8C%E7%89%88%E6%9C%AC5%20/</link>
      <guid>https://cjliblog.top/2024/04/12/Error%20java%20%E9%94%99%E8%AF%AF%20%E4%B8%8D%E6%94%AF%E6%8C%81%E5%8F%91%E8%A1%8C%E7%89%88%E6%9C%AC5%20/</guid>
      <pubDate>Thu, 11 Apr 2024 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;搬运搬运！！！&lt;a href=&quot;https://blog.csdn.net/qq_51263533/article/details/120209830&quot;&gt;https://blog.csdn.net/qq_51263533/article/details/120209830&lt;</description>
        
      
      
      
      <content:encoded><![CDATA[<p>搬运搬运！！！<a href="https://blog.csdn.net/qq_51263533/article/details/120209830">https://blog.csdn.net/qq_51263533/article/details/120209830</a></p>]]></content:encoded>
      
      
      <category domain="https://cjliblog.top/categories/java/">java</category>
      
      
      <category domain="https://cjliblog.top/tags/java/">java</category>
      
      
      <comments>https://cjliblog.top/2024/04/12/Error%20java%20%E9%94%99%E8%AF%AF%20%E4%B8%8D%E6%94%AF%E6%8C%81%E5%8F%91%E8%A1%8C%E7%89%88%E6%9C%AC5%20/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>解决conda太慢的方案</title>
      <link>https://cjliblog.top/2024/04/12/%E8%A7%A3%E5%86%B3conda%E5%A4%AA%E6%85%A2%E7%9A%84%E6%96%B9%E6%A1%88/</link>
      <guid>https://cjliblog.top/2024/04/12/%E8%A7%A3%E5%86%B3conda%E5%A4%AA%E6%85%A2%E7%9A%84%E6%96%B9%E6%A1%88/</guid>
      <pubDate>Thu, 11 Apr 2024 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;conda config –set solver libmamba&lt;/p&gt;
&lt;p&gt;换回去&lt;/p&gt;
&lt;p&gt;conda config –set solver classic&lt;/p&gt;
&lt;p&gt;pip废物的结局方案：结尾加上：&lt;/p&gt;
&lt;figure class=&quot;highlight</description>
        
      
      
      
      <content:encoded><![CDATA[<p>conda config –set solver libmamba</p><p>换回去</p><p>conda config –set solver classic</p><p>pip废物的结局方案：结尾加上：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-i http://mirrors.aliyun.com/pypi/simple --trusted-host mirrors.aliyun.com</span><br></pre></td></tr></table></figure><p>可以在搜狗输入法放入这个自定义短语</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python demo.py --checkpoint-path checkpoint_iter_370000.pth --video 0</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set http_proxy=http://127.0.0.1:1438</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://cjliblog.top/categories/%E6%8A%80%E6%9C%AF/">技术</category>
      
      
      <category domain="https://cjliblog.top/tags/conda/">conda</category>
      
      
      <comments>https://cjliblog.top/2024/04/12/%E8%A7%A3%E5%86%B3conda%E5%A4%AA%E6%85%A2%E7%9A%84%E6%96%B9%E6%A1%88/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>三月日记</title>
      <link>https://cjliblog.top/2024/03/04/%E4%B8%89%E6%9C%88%E7%AC%94%E8%AE%B0/</link>
      <guid>https://cjliblog.top/2024/03/04/%E4%B8%89%E6%9C%88%E7%AC%94%E8%AE%B0/</guid>
      <pubDate>Mon, 04 Mar 2024 08:18:13 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;3-4&quot;&gt;&lt;a href=&quot;#3-4&quot; class=&quot;headerlink&quot; title=&quot;3-4&quot;&gt;&lt;/a&gt;3-4&lt;/h1&gt;&lt;h2 id=&quot;关于hexo部署脚本&quot;&gt;&lt;a href=&quot;#关于hexo部署脚本&quot; class=&quot;headerlink&quot; title=&quot;关</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="3-4"><a href="#3-4" class="headerlink" title="3-4"></a>3-4</h1><h2 id="关于hexo部署脚本"><a href="#关于hexo部署脚本" class="headerlink" title="关于hexo部署脚本"></a>关于hexo部署脚本</h2><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="keyword">call</span> hexo g</span><br><span class="line"><span class="keyword">call</span> hexo d</span><br></pre></td></tr></table></figure><p>后缀为bat，懂的都懂，省的打那么几个重复的字母，双击即可。</p><p>最后别放pause，不然还要手动关闭。</p><h2 id="力扣"><a href="#力扣" class="headerlink" title="力扣"></a>力扣</h2><h3 id="58-最后一个单词的长度"><a href="#58-最后一个单词的长度" class="headerlink" title="58. 最后一个单词的长度"></a>58. 最后一个单词的长度</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lengthOfLastWord</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="comment">// String[] words=s.split(&quot; &quot;);</span></span><br><span class="line">        <span class="comment">// return words[words.length-1].length();</span></span><br><span class="line">        String res=<span class="string">&quot;&quot;</span>;</span><br><span class="line">        ArrayList&lt;String&gt; words=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s.charAt(i)==<span class="string">&#x27; &#x27;</span>&amp;&amp;res!=<span class="string">&quot;&quot;</span>)&#123;</span><br><span class="line">                words.add(res);</span><br><span class="line">                res=<span class="string">&quot;&quot;</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(s.charAt(i)!=<span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">                res=res+s.charAt(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!res.equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">            words.add(res); <span class="comment">// 处理字符串末尾的单词</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> words.get(words.size()-<span class="number">1</span>).length();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="66-加一"><a href="#66-加一" class="headerlink" title="66.加一"></a>66.加一</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] plusOne(<span class="type">int</span>[] digits) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">carry</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        digits[digits.length - <span class="number">1</span>] = digits[digits.length - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> digits.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            digits[i] = digits[i] + carry;</span><br><span class="line">            carry=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (digits[i] == <span class="number">10</span>) &#123;</span><br><span class="line">                carry++;</span><br><span class="line">                digits[i] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (carry != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">int</span>[] ans = <span class="keyword">new</span> <span class="title class_">int</span>[digits.length + <span class="number">1</span>];</span><br><span class="line">            ans[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> digits;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="67-二进制求和"><a href="#67-二进制求和" class="headerlink" title="67.二进制求和"></a>67.二进制求和</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">addBinary</span><span class="params">(String a, String b)</span> &#123;</span><br><span class="line">        StringBuffer ans=<span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> n=Math.max(a.length(),b.length());</span><br><span class="line">        <span class="type">int</span> carry=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i&lt;a.length())&#123;</span><br><span class="line">                carry+=a.charAt(a.length()-<span class="number">1</span>-i)-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i&lt;b.length())&#123;</span><br><span class="line">                carry+=b.charAt(b.length()-<span class="number">1</span>-i)-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ans.append((<span class="type">char</span>)(carry%<span class="number">2</span>+<span class="string">&#x27;0&#x27;</span>));</span><br><span class="line">            carry/=<span class="number">2</span>;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(carry&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            ans.append(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        ans.reverse();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="69-x的平方根"><a href="#69-x的平方根" class="headerlink" title="69.x的平方根"></a>69.x的平方根</h3><p>法一：摸鱼法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">mySqrt</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="type">int</span> ans=(<span class="type">int</span>)Math.exp(<span class="number">0.5</span>*Math.log(x));</span><br><span class="line">        <span class="keyword">if</span>((<span class="type">long</span>)(ans+<span class="number">1</span>)*(ans+<span class="number">1</span>)&lt;=x)&#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="type">int</span>)ans+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">int</span>)ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>法二：二分法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">mySqrt</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">0</span>, r = x, ans = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (l &lt;= r) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (r - l) / <span class="number">2</span> + l;</span><br><span class="line">            <span class="keyword">if</span> ((<span class="type">long</span>)mid * mid &lt;= x) &#123;</span><br><span class="line">                ans = mid;</span><br><span class="line">                l = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                r=mid-<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>法三：牛顿装逼术</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">mySqrt</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(x==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">double</span> <span class="variable">C</span> <span class="operator">=</span> x, x0 = x;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="type">double</span> <span class="variable">xi</span> <span class="operator">=</span> <span class="number">0.5</span> * (x0 + C / x0);</span><br><span class="line">            <span class="keyword">if</span> (Math.abs(xi - x0) &lt; <span class="number">1e-7</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            x0 = xi;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (<span class="type">int</span>) x0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="70-爬楼梯"><a href="#70-爬楼梯" class="headerlink" title="70.爬楼梯"></a>70.爬楼梯</h3><p>法一：滚动数组+递归函数</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">climbStairs</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">int</span> a=<span class="number">0</span>,b=<span class="number">0</span>,c=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            a=b;</span><br><span class="line">            b=c;</span><br><span class="line">            c=a+b;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>法二：斐波那契+矩阵运算+快速幂</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">climbStairs</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[][] myJuzhen = &#123;</span><br><span class="line">                &#123; <span class="number">1</span>, <span class="number">1</span> &#125;,</span><br><span class="line">                &#123; <span class="number">1</span>, <span class="number">0</span> &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">int</span>[][] finalJuzhen = pow(myJuzhen, n);</span><br><span class="line">        <span class="keyword">return</span> finalJuzhen[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[][] pow(<span class="type">int</span>[][] juzhen, <span class="type">int</span> n) &#123;</span><br><span class="line">        <span class="type">int</span>[][] ret = &#123;</span><br><span class="line">                &#123; <span class="number">1</span>, <span class="number">0</span> &#125;,</span><br><span class="line">                &#123; <span class="number">0</span>, <span class="number">1</span> &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">while</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((n &amp; <span class="number">1</span>) == <span class="number">1</span>) &#123;</span><br><span class="line">                ret = multiply(ret, juzhen);</span><br><span class="line">            &#125;</span><br><span class="line">            n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">            juzhen = multiply(juzhen, juzhen);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[][] multiply(<span class="type">int</span>[][] a, <span class="type">int</span>[][] b) &#123;</span><br><span class="line">        <span class="type">int</span>[][] c = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">2</span>; j++) &#123;</span><br><span class="line">                c[i][j] = a[i][<span class="number">0</span>] * b[<span class="number">0</span>][j] + a[i][<span class="number">1</span>] * b[<span class="number">1</span>][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">            <span class="keyword">return</span> c;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="一点感想"><a href="#一点感想" class="headerlink" title="一点感想"></a>一点感想</h2><p>3-16</p><p>发现最近有点抽象了</p><p>干的事情很多又不知道干了什么，也没有记录，也不知道后面要干什么。</p><p>当然，挂在网上也不好意思给别人看，但是没人看还不如挂本地，，</p><h2 id="3-17"><a href="#3-17" class="headerlink" title="3-17"></a>3-17</h2><p>废除八股文计划，另外计划全部迁移到飞书日历（这玩意真好用）</p>]]></content:encoded>
      
      
      <category domain="https://cjliblog.top/categories/%E6%97%A5%E8%AE%B0/">日记</category>
      
      
      
      <comments>https://cjliblog.top/2024/03/04/%E4%B8%89%E6%9C%88%E7%AC%94%E8%AE%B0/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
