<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>绝剑阁</title>
    <link>https://cjliblog.top/</link>
    
    <image>
      <url>https://www.gravatar.com/avatar/9a30667a06f9e54b4502c81e69456aa3</url>
      <title>绝剑阁</title>
      <link>https://cjliblog.top/</link>
    </image>
    
    <atom:link href="https://cjliblog.top/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>银屏之下，龙游四海。</description>
    <pubDate>Fri, 15 Nov 2024 16:02:06 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>第三周学习笔记</title>
      <link>https://cjliblog.top/2024/11/16/%E7%AC%AC%E4%B8%89%E5%91%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20/</link>
      <guid>https://cjliblog.top/2024/11/16/%E7%AC%AC%E4%B8%89%E5%91%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20/</guid>
      <pubDate>Fri, 15 Nov 2024 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;上班时间禁止摸鱼，不太好写学习笔记了，公司内产出得算公司知识产权的就是说（x）。所以得停更一会儿，周末写一点或者午休写一点就好了。&lt;/p&gt;
</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上班时间禁止摸鱼，不太好写学习笔记了，公司内产出得算公司知识产权的就是说（x）。所以得停更一会儿，周末写一点或者午休写一点就好了。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2>]]></content:encoded>
      
      
      <category domain="https://cjliblog.top/categories/%E5%AD%A6%E4%B9%A0%E6%89%93%E5%8D%A1/">学习打卡</category>
      
      
      
      <comments>https://cjliblog.top/2024/11/16/%E7%AC%AC%E4%B8%89%E5%91%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>无题</title>
      <link>https://cjliblog.top/2024/11/09/%E6%97%A0%E9%A2%98/</link>
      <guid>https://cjliblog.top/2024/11/09/%E6%97%A0%E9%A2%98/</guid>
      <pubDate>Fri, 08 Nov 2024 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;start：11-9&lt;/p&gt;
&lt;p&gt;end：11-16&lt;/p&gt;
&lt;h4 id=&quot;一&quot;&gt;&lt;a href=&quot;#一&quot; class=&quot;headerlink&quot; title=&quot;一&quot;&gt;&lt;/a&gt;一&lt;/h4&gt;&lt;p&gt;是不是时常会思考自己的一些特立独行会让自己失去认同感，从而丢失能量。突然发现一</description>
        
      
      
      
      <content:encoded><![CDATA[<p>start：11-9</p><p>end：11-16</p><h4 id="一"><a href="#一" class="headerlink" title="一"></a>一</h4><p>是不是时常会思考自己的一些特立独行会让自己失去认同感，从而丢失能量。突然发现一些认真去写文字，表达准确，也理解地准确的人非常厉害。我如果只是每天没心没肺写一些乌漆嘛黑的文字，却没有一些能让自己触动的到的深度，仿佛就是一种记流水账，也不会让这个世界上不同的灵魂深有感触。</p><p>我也不是完全的e人，社交时候的热情高涨会在忽然寂静的落差下显得能量极低。我想我可能只是喜欢说话罢了，但是也并不是靠社交回复能量。换一个角度说，社交往往让人感到没有学习到东西，或者说获得实质性的提升，那么容易让人陷入焦虑。如今环境是充满压力和焦虑的，每个人都无法避免。</p><h4 id="二"><a href="#二" class="headerlink" title="二"></a>二</h4><p>听闻一个朋友的父亲去世了。很突然，我甚至愿意引用ta的原文，但是很可惜ta删掉了，可能是为了减轻一些思想上的负担。这件事情让我感到非常深刻。深有感慨，如果这件事情发生在自己身上又会是什么样的角色和事件。这个世界总会有人意外离开，我们先前没有算计过，但这个世界总有人的亲人意外离开。</p><p>这其实可以到另一个角度理解。不管是物理意义上的离开，开始感情方面的离开，一些突然的缺失，也许会找到补位，也许可以理解为一些使命已经cover了，或者说这个角色在你的剧本里已经over了，但是这一段遗憾永远无法弥补。你可以尝试去淡忘，去漠视，但是心有余悸的本性一定避不开的，所有一切的淡忘漠视，不过是为了避免自己情绪化的一种应激反应，这种反应，会遗留成为终身的性格缺陷，会成为麻木的人，成为失去色彩的人。</p><p>所以我崇尚拥抱接纳。有的人把一切变数理解为剧本，但我们都知道这只不过是一种说辞，或者说是安慰自己的言语罢了。没有什么定数的东西，也没有什么值得念念不忘的遗憾的东西。我们接纳一切变数，承认平凡，承认无法控制一切，而转向寻找自己可以掌握的、热爱的东西去丰富和填补突然的空缺。固然一些东西是真正陷入绝望的深渊，而不再机会挽留的，比如死亡。所以人生又算得上什么呢，蜉蝣尔。</p><p>另外，保持身体健康吧。今天喝了好多酒，还熬夜，这显然是不妙的，希望可以改善。</p><h4 id="三"><a href="#三" class="headerlink" title="三"></a>三</h4><p>上了班之后会有一些不一样的思维，那就是优化。一个产品单纯CRUD，那可能只是外包公司。那如果是互联网公司，除了大量CRUD，可能就需要考虑更多性能上提升的事情。但是在华子这种研究性质的地方，CRUD是不存在的，而真正考虑的就是底层实现的原理我们如何去理解、梳理以及构建出有更好性能的模型或架构。然后后续工作还有基于此去优化，给出一套更好的解决方案。有的时候我们会觉得“一套成熟的解决方案”非常适合追捧，然而还有一条道路往往被人忽略，它未知，并且因人而异，那就是创新。创新要求推翻传统的方案，给出一套小部分基于先前理论，大部分架空而新颖的东西。中国的教育是非常缺失这一块的，因为经验和成熟方案主导一切。看到java市场就懂了。我其实一直觉得go和java比起来一定是前瞻性的，但是一定会有大量的喷子站队java，然后说那一套“生态”，贬低这个世界其他所有人和所有语言（泼妇行为）。其实泼妇行为和固执行为往往是捆绑的，固执，那么一定排除一切异己，用尽手段去攻击。</p><h4 id="四"><a href="#四" class="headerlink" title="四"></a>四</h4><p>情绪化一直以来都不是好东西，但是总是莫名其妙会被困住。因为情绪本来就是人不可缺少的一部分，就是影响或多或少的问题。那么人就需要去干预。除了生理上自带的，我们也可以自己去控制生活习惯，自己去让自己沉下心来做心理调节。</p><h4 id="五"><a href="#五" class="headerlink" title="五"></a>五</h4><p>每天应该至少保证一些输入和一些输出。也就是说你有的时候要一些理论知识的输入，有的时候要自己去实操，最好是一天之内两件事情都会交替进行。二者相辅相成，缺一不可。纯实操最后会倾向于“缺乏理论指导的单干”，而纯理论会倾向于“纸上谈兵的书呆子”。</p><p>我有一个特点，也是上文所提到的情绪化——就是遇到一些难题的时候我容易all in，哪怕一无所获。因为有些事情我仿佛就是可以做成，但是却又非常没有把握，我就是愿意去赌。这不像是个好事情，是因为我潜意识里坚信“概率可叠加”的事情，不断磨，总可能成功。但是这件事情虽然说着“滴水石穿”，好事多磨，非常励志，但是真正体验起来可不是一般滋味。痛苦可能远大于成就，而成就也仅限于吹牛。</p><h4 id="六"><a href="#六" class="headerlink" title="六"></a>六</h4><p>上周也是成功完成了工作以来第一个汇报。感觉需要反思的很多。比如说工作时长到底是多少要真正分配给任务，多少用来做自己事情的。然后原来宇宙的尽头是做PPT。首先要确定去分享或讲解一个东西，一定要把别人当成小孩去处理，从0开始入手，然后向他人展示这个东西的强项和内核全流程。然后PPT不能字多也不能字少，至少要有一些讲解（可能太急了没花时间处理）。总的来说还有一部分原因是自己没有好好去读源码，都是浏览一些文章，浮于表面。但是确实，如果自己要去读懂源码肯定是要花费超长时间的，所以要放弃广度的策略，而去寻求深度，毕竟调研这东西没有定死的风险，能做多少就是多少。</p><h4 id="七"><a href="#七" class="headerlink" title="七"></a>七</h4><p>突然感受到一个事情。不能老是把自己的人设卡死了。人设或者人格这东西如果多加干预的话对我来说其实还是说变就变得。你说戴面具什么的，但其实面具戴多了就摘不下来了，和没有面具没什么区别。如果喜欢说话，喜欢浮躁，喜欢创造抽象与欢乐，会影响到别人，也让自己感到沉不下心，也许可以不去这么做。人格这种东西应该可以做到适时转换，而不是给自己一个套故步自封。</p><p>一直以来也是这样，我本来就没有什么固定的人设和固定的性格。没有哪一个人格是完美的，但是遇到什么样的环境什么样的事，变成什么样的人格，这样更可以贴近完美。</p><h4 id="八"><a href="#八" class="headerlink" title="八"></a>八</h4><p>所以是不是可以控制自己的人格。比如说有八类，那么每个环境和每个情况，哪个人格对我有利，我就去成为谁。这样，我可能晚上容易emo的时候就变成xntj开始变成心脏强大的大神，而在中午这种大太阳的休息时间可以变成xnfp人开始我的emotion输出。我目前觉得有用的选项就只有紫人（利益最大化）和绿人（幸福最大化），因此可能暂时这样切换。有一个事情就是说我似乎从来没测出来过S，其他倒是都有变。</p><p>这东西和吃东西很有关系。胃也和心情有很大的挂钩，我觉得这个需要自己好好调整一下。</p><h4 id="九"><a href="#九" class="headerlink" title="九"></a>九</h4><p>hcy的《无聊人》还有《温暖的房子》都提到了父母，这也是很戳我的点。</p><p>破碎的家庭、抑郁的情绪、桀骜不羁的性格、造诣颇丰的艺术，都是共鸣点。唯一缺的可能是我还没学会会海豚音（嚯嚯）。</p><p>那时爸爸妈妈和我说离婚是一个非常正常的要举行的仪式，我应该是一年级或者二年级那么大。他们让我在家里练琴。父亲给我列了我这辈子第一份todolist，给我排好了一下午要做的事情：练琴、看电视、睡觉、喝饮料等（其实我也不记得了，但是肯定有练琴）。我好像有点悲伤，但是又好像和我没有关系，而且他们的表现好像非常和谐的样子，也就是前段时间经常吵架罢了。我有时候比较喜欢他们吵架的时候，我一过去看，他们还会弄点幽默的动作和我话语逗笑我。而且这种时候一般都不会管我，我一直看电视都是安全的（以前管的比较严，电视都只能看很短时间），相对来说非常自由，也是偷感max。</p><p>然后莫名其妙就有一些奇怪的事情了。他们好像在我面前比较和谐，但其实这个家已经散了。我记得一个场景，我们一家三人坐在车上，我爸一边开车，一边在哭。这可能是最后的倔强了，我仿佛记得一向严厉的父亲发出了最后的恳求，然后母亲就是一副得势或者说赌气，拒绝了这一切。</p><p>然后这个家就真的散了。但是后面好像也都还正常，也是有来有往，只是我得两处房子跑来跑去。他们口中说的都是为了我才联系，但是我妈又说都怪我小时候和他们一起睡觉坏了他们的感情。</p><p>有一次父亲和其他车发生了刮擦，他脾气很大，下车就要去动手（好像当时接我放学，然后他晚上有一场演讲比赛，他好像很期待）。我爸叫我先回去，然后我也不知道后面会发生什么事，半路哭着跑回我妈那儿。我妈问我为什么哭，我说爸爸出车祸（脱口而出，其实表达不准确），然后我妈就很急切，不停打电话，然后好像也有眼泪。我还以为我还有这样一个家，但是我妈还是一直说：“我只是为了儿子，儿子没有了爹怎么办“。得知了这只是一场乌龙，刮擦与争吵可能并不能算”车祸“，我妈就骂我干什么乱说话。但是我也没话说。我当时写了一篇小作文叫《父亲的奖杯》，培训班的老师很喜欢（当时老师夸我文风像鲁迅，但是现在已经荡然无存了），结尾是父亲的脸受伤了，但是把演讲比赛的奖杯送给我，然后我抱着奖杯去房间里哭（当然会有一些文学成分在里面）。</p><p>后来我爸也就没有这么强的冲劲了，也少了高高在上的威严，更少了曾经博览群书，热爱演讲的激情。不过这些都是后话了。岁月冲刷着一切，没有人逃得过成为忒修斯的船。</p><p>但是回想如果家里真的缺了一位成员确实是很可怕的。虽然我像是四海为家（有段时间几个亲戚轮流抚养，然后父母这里也两头跑不定）。我想到之前那位小同学，看到ta写了很多流露真情的很高造诣的文笔，我不由得想到另世我（如果我还是小时候那样）。有的时候说真的其实父母才是我活下去的精神支柱。因为他们真的付出了很多，如果我一走了之，这非常荒谬，我觉得他们会撑不下去。因为他们，特别是父亲，人生上遇到的困难，真的和我比起来是降维打击。如果我还老是抑郁，那我可真不是个男人。父亲没有抑郁（也许有过，但是在我面前不会），他的内心非常强大，在我看来，这位我看似健全的人格刻下深远影响。不过我不会在这里写都发生了什么事情，这不太好，也许人家暂时也不想让人们知道。</p><p>所有的性格和处事方式都会有经历和环境的影子。特别是情感上的大变故。这种包括原生家庭、身边朋友氛围以及爱情历程。有的人会很鄙夷曾经的自己，也会欣然喜欢上曾经的自己。这也可能是我们爱上别人的理由。鄙夷曾经自己的同时，那么一定会摒弃一些性格、能力和特质，转而戴上一层自己想要成为的人的面具，然后就和脸合为一体了。但是摒弃后的东西一定有一些值得留恋、值得欣赏的东西。而有的时候，一些人的出现就是让你看到曾经的自己。有些感觉是幼稚，但是也有些感觉是惋惜，让人忍不住想要仔细考察。</p><p>再话说回来，我现在的文风已经索然无味，甚至像流水账。我当然很喜欢以前那样情感颇丰的样子，但是我现在一直觉得心里有什么东西覆盖在上面，让它无法全面地释放。也可能是因为电子化设备带来的浮躁吧，如果是只有纸和笔，还有窗外的风景，也许我会更加从容一点。另外可能是因为我比较想追求一种顿感的状态，避免敏感带来过多的负面情绪波动吧，因为这样的emotion曾经破坏了很多美好的回忆。</p><p>也许会遇到更好的人，也许会获得事业上的升华，也许我对文学、音乐和哲学的热情和灵感会重新无限迸发。这是我最希望发生的一切。我猜的，应该是这样的。</p>]]></content:encoded>
      
      
      <category domain="https://cjliblog.top/categories/%E6%95%A3%E6%96%87/">散文</category>
      
      
      <category domain="https://cjliblog.top/tags/%E6%95%A3%E6%96%87/">散文</category>
      
      
      <comments>https://cjliblog.top/2024/11/09/%E6%97%A0%E9%A2%98/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>第二周学习笔记</title>
      <link>https://cjliblog.top/2024/11/06/%E7%AC%AC%E4%BA%8C%E5%91%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <guid>https://cjliblog.top/2024/11/06/%E7%AC%AC%E4%BA%8C%E5%91%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <pubDate>Tue, 05 Nov 2024 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;累了。&lt;/p&gt;
&lt;h2 id=&quot;字节青训营&quot;&gt;&lt;a href=&quot;#字节青训营&quot; class=&quot;headerlink&quot; title=&quot;字节青训</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>累了。</p><h2 id="字节青训营"><a href="#字节青训营" class="headerlink" title="字节青训营"></a>字节青训营</h2><p>感觉有点小荒废。不想做了。这个模块将会放弃。</p><h3 id="算法题"><a href="#算法题" class="headerlink" title="算法题"></a>算法题</h3><h4 id="DNA序列编辑距离"><a href="#DNA序列编辑距离" class="headerlink" title="DNA序列编辑距离"></a>DNA序列编辑距离</h4><h4 id="找出整型数组中占比超过一半的数"><a href="#找出整型数组中占比超过一半的数" class="headerlink" title="找出整型数组中占比超过一半的数"></a>找出整型数组中占比超过一半的数</h4><h3 id="打卡"><a href="#打卡" class="headerlink" title="打卡"></a>打卡</h3><p>算法*3</p><p>AI 练中学 run 3个*3</p><p>视频*3</p><h2 id="uber阅读"><a href="#uber阅读" class="headerlink" title="uber阅读"></a>uber阅读</h2><p>1.书接上回，别用panic。程序内部烂了才会用，因为这样的报错一坨，太难查了。</p><p>2.原子操作使用<a href="https://pkg.go.dev/go.uber.org/atomic">go.uber.org&#x2F;atomic</a>（内置广告hh），比原生包用着舒服。</p><p>3.一些不好改变的东西，不要直接引用，要用结构体去new。</p><p>4.公共结构体别嵌入类型，如</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// ConcreteList is a list of entities.</span><br><span class="line">type ConcreteList struct &#123;</span><br><span class="line">  *AbstractList</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.避免init，因为init容易在代码发生变动的时候发生顺序错乱，调整比较麻烦。另外，实在要用的话，init要避免全局操作或者io操作。协程别出现。</p><p>6.strconv比sprintf更快</p><p><img src="/.top//Users\11953\AppData\Roaming\Typora\typora-user-images\image-20241111193433855.png" alt="image-20241111193433855"></p><p>7.多去声明而不是缩成一坨，往往能性能更棒。</p><p><img src="/.top//Users\11953\AppData\Roaming\Typora\typora-user-images\image-20241111193605513.png" alt="image-20241111193605513"></p><p>8.切片指定容量来提高性能</p><p>9.代码一行不超过99字符（不要太长即可）。一个项目风格要保持一致。</p><p>10.减少嵌套，如果if里面套if，不如直接拿出来两个if。</p><p>11.原始字符串可以避免转义</p><p><img src="/.top//Users\11953\AppData\Roaming\Typora\typora-user-images\image-20241111195104563.png" alt="image-20241111195104563"></p><p>12.别new。一次性声明完。</p><p><img src="/.top//Users\11953\AppData\Roaming\Typora\typora-user-images\image-20241111195256356.png" alt="image-20241111195256356"></p><p>到此就over了。原来其实大名鼎鼎的uber规范也就是一些细节上的统一罢了，我已经将小部分有启发的搬上了第零周和第二周学习笔记，希望对自己和大家都有所帮助。</p><h2 id="restful"><a href="#restful" class="headerlink" title="restful"></a>restful</h2><h3 id="设计上的总结"><a href="#设计上的总结" class="headerlink" title="设计上的总结"></a>设计上的总结</h3><table><thead><tr><th>方法</th><th>主要用途</th><th>请求体</th><th>幂等性</th><th>安全性</th><th>备注</th></tr></thead><tbody><tr><td>GET</td><td>获取资源</td><td>无</td><td>是</td><td>是</td><td>无状态，不能改变服务器数据</td></tr><tr><td>POST</td><td>创建或提交数据</td><td>有</td><td>否</td><td>否</td><td>可能导致资源变化</td></tr><tr><td>PUT</td><td>更新资源或创建新资源</td><td>有（完整资源）</td><td>是</td><td>否</td><td>需提供完整的资源表示</td></tr><tr><td>DELETE</td><td>删除资源</td><td>可选（但常不使用）</td><td>是</td><td>否</td><td>通常只指定要删除的资源</td></tr></tbody></table><p>总的来说，我认识了put和delete（之前没真正用过），主要是要有路径参数来指定资源，然后put还要再用body中的json来指定改变的东西，delete的话一般gorm直接执行软删除。</p><p>另外，如果要一次处理多个资源的话，就不需要路径参数了，直接传json，其实和post差不多，就是一个标记的差别。但是有标记起码也可以很好认出这个方法是干嘛的。</p><p>性能差异并不显著，这只是一种规范。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2>]]></content:encoded>
      
      
      <category domain="https://cjliblog.top/categories/%E5%AD%A6%E4%B9%A0%E6%89%93%E5%8D%A1/">学习打卡</category>
      
      
      
      <comments>https://cjliblog.top/2024/11/06/%E7%AC%AC%E4%BA%8C%E5%91%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>人格与事业</title>
      <link>https://cjliblog.top/2024/11/03/%E4%BA%BA%E6%A0%BC%E4%B8%8E%E4%BA%8B%E4%B8%9A/</link>
      <guid>https://cjliblog.top/2024/11/03/%E4%BA%BA%E6%A0%BC%E4%B8%8E%E4%BA%8B%E4%B8%9A/</guid>
      <pubDate>Sat, 02 Nov 2024 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;所有的不幸的暴风雨都会成为幸存之后证明你伟大的参考文献。&lt;/p&gt;
&lt;h4 id=&quot;一&quot;&gt;&lt;a href=&quot;#一&quot; class=&quot;headerlink&quot; title=&quot;一&quot;&gt;&lt;/a&gt;一&lt;/h4&gt;&lt;p&gt;无敌了，突然发觉mbti这玩意真尼玛有意思。之前说我这个性情切换快，所以一个</description>
        
      
      
      
      <content:encoded><![CDATA[<p>所有的不幸的暴风雨都会成为幸存之后证明你伟大的参考文献。</p><h4 id="一"><a href="#一" class="headerlink" title="一"></a>一</h4><p>无敌了，突然发觉mbti这玩意真尼玛有意思。之前说我这个性情切换快，所以一个月前测出来又是一个enfp（好像两个月前还是什么entj哈哈哈哈），倒也没在意。刷了会儿小红书，蛙趣，这天猫的我变成啥样，它真是嘎嘎一个了如指掌。ok的，我服了。纵然人也是有非常多变化的，但是我必须承认enfp这条”嘴一直叭叭叭个不停“，真无敌了。</p><h4 id="二"><a href="#二" class="headerlink" title="二"></a>二</h4><p>倒是没啥，所谓的“脸皮厚”工程倒也是恩师和父母给予我的强烈期许。从以前稳定的infp到现在波动的enfp，我感觉到一些事情在逐渐发生变化。当然我之前貌似看到过enfp难成大事的事情，但是生活欢乐倒是真的。诶？但是我进来貌似经常讲“热爱”这个词，或许波动的enfp会有不一样的体验。是不是可以来一点什么《七重人格》？</p><h4 id="三"><a href="#三" class="headerlink" title="三"></a>三</h4><p>还是不得不说，做了一件非常幽默的事情。我想诚聘一个npy，然后被拒了。诶？话说我这是不是第一次被拒。确实，因为按照我之前的性格来说，我感觉明显可能性不大的根本不可能说。但是我现在脸皮嘎嘎厚，我就算知道不可能，我也想知道对方的反应是啥，然后我就有超强的好奇心驱使我去干这个事情，不管结局如何。当然，最后都是要收拾烂摊子的。但是按照我之前的性格，我就是一个包不会尴尬的，只要对方给台阶，我肯定圆回来。</p><h4 id="四"><a href="#四" class="headerlink" title="四"></a>四</h4><p>于是我发现一个很牛逼的词条！enfp程序员！</p><p>这下好了，网上一片哀嚎。都是说这性格不适合当程序员的。</p><p>哈哈哈哈然后我就有一个《七重人格》打掩护。不是纯血的，坚信我还是稳如老狗！</p><p>哦，不过有一个事情，就是enfp心特别散。我觉得 这个深有体会，就是处于这种嘎嘎欢乐的状态的时候，容易沉不下心去做事或者学习，唯一爱做的事情就是水群，或者找消遣的事情。虽然不知道这算不算一种回复能量的方式，但是我感觉嘎嘎神奇。居然能从之前自闭回血的状态变成现在嘎嘎输出才能回血的状态。有些事情和哲学思考有关吧，但是又发现我早就对哲学祛魅了（就是说我感觉思考它是没有意义的，因为感觉该知道的已经了然了，大部分事情再去深究就纯粹是在浪费time。</p><h4 id="五"><a href="#五" class="headerlink" title="五"></a>五</h4><p>发现这个时间上居然真的有人是在成天思考事业的（x）。哈哈哈，一直感觉事业应该是和生活五五开的东西（当然，我行动上可能事业容易上升到80%，然后我心理上事业可能就40%的样子）。这一点倒是很少发现这样all in的人。嘶，倒是有，感觉那些绩点怪不少有这种type（狗头保命）。不对，但是还是有好多那种“又菜又爱卷”（狗头保命），但也是不可避免的，毕竟不是谁都一帆风顺，不是一时能定的，但是我持排斥但尊重意见）。</p><h4 id="六"><a href="#六" class="headerlink" title="六"></a>六</h4><p>然后感觉这两天在华子实习的感觉就是，大家都情商嘎嘎高，有比较好的氛围，然后中午都很注重休息。该干活的时候嘎嘎干活，每天可能有好多不同的事情，但是该干啥干啥，早上就嘎嘎踩点，饭点了嘎嘎干饭，该下班了嘎嘎下班，该加班了就是一个稳如泰山……</p><p>这太酷了，我想融入这样的氛围会让我收获一个更好的人格和处事方式。</p><h4 id="七"><a href="#七" class="headerlink" title="七"></a>七</h4><p>哈哈哈哈哈说回来第一个话题。最近属实是有点焦虑上了，感觉身边人都嘎嘎有对象，嘎嘎出去玩。诶？之前好像是不羡慕的，现在倒是心有点收不住了。焦虑的是还有一个事情，就是处于这种工科院校环境，然后下一步是处于一个全是程序员的环境，也不会再出入一些社交场合，似乎会很难找对象（所以我想赶紧先再找一个）。我对读研现在最大的期待就是可以again去expand一个社交圈，然后研一就找到对象（但是目前情况貌似我对课业不会太上心）。so这是一个循环疑惑的命题。当然，华子hr所说的“打牢基础“确实也是一个重要的方面。我突然感觉想拾起一些基础知识的学习。那么现在面临一个问题，如果我上班时间嘎嘎看学校课上的东西，是不是容易被领导引起不好的注意。而且另一方面我好像上班也不能去搞自己开发的项目，一堆乱七八糟的东西的。不过好在我有3days的休假。我觉得休假一定要做自己的事情，然后上班的时候可以去挂着课刷，or去跑一下一些课内作业的代码，比如创新实践、编译原理这种。嗯，，虽然但是我好像感觉上周在上班时间比较摸鱼，想在周末补一下前端底层的一些事情（当然这也是我的学习方向之一），那么我想适当分配一些时间是没有问题的。</p><p>哦这下就说回来事业这个事情。其实我也不想在其他事情上浪费太多时间，我喜欢连续的时间进行嘎嘎的学习和输出代码。当然可能和其他人的差异就是，我的休息方式就是社交吧（x）。</p><h4 id="八"><a href="#八" class="headerlink" title="八"></a>八</h4><p>虽然但是我之前也声称“休息累了就来学习放松一下”。</p><p>哇靠，这道题解开了，最终答案就是原来社交是我的娱乐方式，做自己热爱的事情（学习+开发产品）也是。所以还存在什么“事业”一说呢？</p><p>天天剖析自己，应该是一个作家的良好素养，不错，我很欣赏我自己（憋笑）。</p><p>倒是期待哪一天publish了我的散文集了呢。</p><p>PS：回头又读了一遍，感觉写的好烂哈哈哈以后再改。</p>]]></content:encoded>
      
      
      <category domain="https://cjliblog.top/categories/%E6%95%A3%E6%96%87/">散文</category>
      
      
      <category domain="https://cjliblog.top/tags/%E6%95%A3%E6%96%87/">散文</category>
      
      
      <comments>https://cjliblog.top/2024/11/03/%E4%BA%BA%E6%A0%BC%E4%B8%8E%E4%BA%8B%E4%B8%9A/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>第一周学习笔记</title>
      <link>https://cjliblog.top/2024/10/30/%E7%AC%AC%E4%B8%80%E5%91%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <guid>https://cjliblog.top/2024/10/30/%E7%AC%AC%E4%B8%80%E5%91%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <pubDate>Tue, 29 Oct 2024 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;所有的不幸的暴风雨都会成为幸存之后证明你伟大的参考文献。&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;写了一篇散文。但是发发牢骚罢了，该学的还是得学。突然又觉得产品这种业</description>
        
      
      
      
      <content:encoded><![CDATA[<p>所有的不幸的暴风雨都会成为幸存之后证明你伟大的参考文献。</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>写了一篇散文。但是发发牢骚罢了，该学的还是得学。突然又觉得产品这种业余了解一下就好了。我感觉好的产品是万里挑一，这样泛泛地拿着一个理论去给一种千篇一律，我觉得非常常规，不如在实践中去洞察一切事物运行的规律管用。</p><p>众所周知，我接下来会在前端框架底层上有相关的工作，因此我会在学习笔记里一直更新前端相关的东西。而且确实后端做的有点烦了，因为老是找不到合适的前端，再者腾讯都开始招人困难了。我有想法以后转前端了。</p><h2 id="名词学习"><a href="#名词学习" class="headerlink" title="名词学习"></a>名词学习</h2><p>红海：人多，风险低</p><p>蓝海：人少，风险高</p><h2 id="字节青训营"><a href="#字节青训营" class="headerlink" title="字节青训营"></a>字节青训营</h2><h3 id="算法题"><a href="#算法题" class="headerlink" title="算法题"></a>算法题</h3><h4 id="数字分组求偶数和"><a href="#数字分组求偶数和" class="headerlink" title="数字分组求偶数和"></a>数字分组求偶数和</h4><p><a href="https://www.marscode.cn/practice/5wwkv4pkpoe9pd">https://www.marscode.cn/practice/5wwkv4pkpoe9pd</a></p><p>这道题的思路，就是说[123, 456, 789]这样，那么我们需要在每一组里面取一个数去加和成一个数，如果是偶数，那么res++。思路非常简单，然后我们开始考虑方案。</p><p>不难想到现将内容结构化。那么不难想到，使用二维数组来装载。这里我们使用嵌套的ArrayList即可。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;List&lt;Integer&gt;&gt; groups = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> num : numbers) &#123;</span><br><span class="line">          List&lt;Integer&gt; group = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">          <span class="keyword">while</span> (num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">              group.add(num % <span class="number">10</span>);</span><br><span class="line">              num /= <span class="number">10</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          Collections.reverse(group);</span><br><span class="line">          groups.add(group);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>需要注意一个事情。List属于Collection集合。这一篇可以去我的java八股小册那边了解。（todo：放个链接）</p><p>所以我们对于一个组，从后往前放到list然后翻转，最后add进groups。</p><p>这是一个初始化操作。</p><p>方法上，AI给出的解释是可以用递归或回溯。</p><p>我们来一手递归。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">countEvenSumCombinations(List&lt;List&lt;Integer&gt;&gt; groups, <span class="type">int</span> index, <span class="type">int</span> currentSum)</span><br></pre></td></tr></table></figure><p>这里递归过程，我们给出index和currentSum，保证动态去传递当前的状态。这里可以去对照gin里面的context，他就是一个不停传递上下文（状态）的东西。还需要解释一下这个函数应该是一个static方法，他只是归属于这个类，却不会因为调用这个func去new一个obj。更进一步说，它其实就是挂个名在函数下面，实质上就是一个普通的func。</p><p>有人可能习惯先去看结束条件，但是我喜欢先去看递归逻辑。</p><p>在第一步来说，走到这个递归逻辑之后已经是所有。就比如这一步：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> num : groups.get(index)) &#123;</span><br><span class="line">           count += countEvenSumCombinations(groups, index + <span class="number">1</span>, currentSum + num);</span><br><span class="line">       &#125;</span><br><span class="line"><span class="keyword">return</span> count;</span><br></pre></td></tr></table></figure><p>比如这个，我直接遍历了第一组的所有数字，并且将他们进行了向后的递归。这个countEvenSumCombinations返回的就是当前组的某个num递归出来的count值。那么最后count得到的结果，直接就是res。</p><p>这里的关键在于怎么找到一个逻辑递推点。像这里就是我每一个countEvenSumCombinations会去处理一个group里的所有num，那么可以想象出来一棵树，第一层是root，第二层枚举第一组所有num，第二层继续去枚举所有第二组的num，以此类推。什么情况结束呢？我们要迎来终止条件。</p><p>那么这样一个组合如果偶数，count++。同时我们去判定这个事情的时候，index一定是来到了最后，于是有代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 如果已经遍历完所有组</span></span><br><span class="line">       <span class="keyword">if</span> (index == groups.size()) &#123;</span><br><span class="line">           <span class="comment">// 判断当前组合的各位数字之和是否为偶数</span></span><br><span class="line">           <span class="keyword">return</span> (currentSum % <span class="number">2</span> == <span class="number">0</span>) ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p>而且我们去看，如果index是最后一个，还去执行index+1传参，那肯定是嘎嘎报错的。所以这里一定要终止。也就是叶子节点进行建立。</p><p>这里懒得画图了，反正树是在脑子里的，想想也ez。</p><p>总结一下就是递归是可以化成树或者说是一种枚举的。</p><p>over。</p><h4 id="计算从位置-x-到-y-的最少步数"><a href="#计算从位置-x-到-y-的最少步数" class="headerlink" title="计算从位置 x 到 y 的最少步数"></a>计算从位置 x 到 y 的最少步数</h4><p><a href="https://www.marscode.cn/practice/5wwkv4pkpoe9pd">https://www.marscode.cn/practice/5wwkv4pkpoe9pd</a></p><p>这道题出的有点妙，AI怎么都秒不掉，只能自己上班硬着头皮写了。</p><p>简单说一下。这个我没有用到什么特别的算法，可能有一点贪婪吧。直接贴代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">dist</span> <span class="operator">=</span> Math.abs(x - y);</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (dist == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            i++;</span><br><span class="line">            <span class="keyword">if</span> (sum + i * <span class="number">2</span> == dist) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">2</span> * i;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum + i * <span class="number">2</span> &lt; dist) &#123;</span><br><span class="line">                sum += i * <span class="number">2</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> dist - sum;</span><br><span class="line">                <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> tmp / (i);</span><br><span class="line">                <span class="keyword">if</span> (tmp % (i) != <span class="number">0</span>) &#123;</span><br><span class="line">                    c += <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">2</span> * (i - <span class="number">1</span>) + c;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>也就是说如果首尾是1，那么就是一定是1234321这种，能加速就一个劲加，然后刚好能返回1，那假如需要总部署+1，那就是1234321再增加一步就好了。而这一步一定是1-4之间的一个数。而如果是5，那就12344321加一步。再进一步，拿不到两个5，那么就可以加很多个4加一个余数，这就是</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> tmp / (i);</span><br><span class="line">            <span class="keyword">if</span> (tmp % (i) != <span class="number">0</span>) &#123;</span><br><span class="line">                c += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>的由来。</p><p>总的还得自己重新体会一遍才好。</p><h3 id="打卡"><a href="#打卡" class="headerlink" title="打卡"></a>打卡</h3><p>算法一道*2</p><p>AI 练中学 run 3个*1</p><p>视频*4</p><h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><p>单测得学，这很重要。</p><h2 id="uber阅读"><a href="#uber阅读" class="headerlink" title="uber阅读"></a>uber阅读</h2><p>（广告位招租）</p><h2 id="渲染经历了什么——react原理探究（compony-task）"><a href="#渲染经历了什么——react原理探究（compony-task）" class="headerlink" title="渲染经历了什么——react原理探究（compony task）"></a>渲染经历了什么——react原理探究（compony task）</h2><p><img src="https://raw.githubusercontent.com/yuuki798/pic-list/main/blog/image-20241101135450196.png" alt="image-20241101135450196"></p><p>DNS:Domain Name System 域名系统。</p><p>dns一般是53端口，，udp传输。</p><p>域名一般是如<a href="http://www.bilibili.com.,/">www.bilibili.com.，</a></p><p>那么最后一个.就是根节点（一般省略）也就是根服务器。com属于顶级域名服务器。然后根服务器一般是中国电信这种管理。如果有CDN（内容分发网络），那么流程就是域名-&gt;cdn-&gt;IP。</p><p>浏览器去加载的时候，DNS先去把域名转换成IP。然后和IP建立tcp连接，然后web服务一般都是http连接建立。然后是服务器去响应三件套的代码（就是所谓的静态资源）。浏览器会做一个事情，解析html代码，并请求html中引用的资源。然后去构建dom树。这里开始涉及前端关键的一个东西了。dom其实就是document object model（文件对象模型）。简单来说就是理解为，界面上的组件（对象）。BOM其实就是浏览器，可以看成是dom的集合就可以。</p><p>然后我们会有样式，这里就用到cssom树构建。</p><p>然后又render树。翻译过来就是渲染树。这个渲染我的理解就是把html和css解析出来的内容进行搭配或融合，合成一个具有内容+样式的组件。或者简单地说就是html和css的融合。那么既然我们每个组件都已经渲染好了，但是我现在知道它在界面上展示在什么位置，所以需要一个布局layout是什么。知道了layout之后，我们就会进行一个paint，这个paint就是UI后端的一种逻辑感觉了，把一些抽象出来的各个节点给画出来。</p><p>最后还有一个composite合成，组合显示在网页上。</p><h3 id="js引擎"><a href="#js引擎" class="headerlink" title="js引擎"></a>js引擎</h3><p>浏览器核心组件之一，用于解析和执行js代码。</p><p>常见的js引擎：Google的V8(用于Chrome)、Mozilla的SpiderMonkey(用于Firefox)等</p><p>有一种编译器的味道，把js转换为机器语言，然后用就地解释或预编译的方式来加速js代码执行。</p><p>同时js engine管理内存、对象模型、时间处理等与js执行相关的功能。所以感觉就是js这种语言，它的语言拆成两部分，一部分是浏览器内核自带的，一部分是它的语法，这两者分开，和其他语言的区别也在这里。</p><h3 id="渲染引擎"><a href="#渲染引擎" class="headerlink" title="渲染引擎"></a>渲染引擎</h3><p>前面说到渲染阶段做的事情是html和css的融合。那么我们也会在浏览器内核看到相应的引擎。</p><p>Google的Blink(Chrome使用)、Mozilla的Gecko(Firefox使用)、WebKit(Safari使用)等。</p><p>这个事情可以根据不同设备进行页面的优化绘制，页面重新布局，js与页面交互使网页呈现效果最佳。（所以我们可以在浏览器禁用js脚本）</p><h3 id="从头到尾做了什么"><a href="#从头到尾做了什么" class="headerlink" title="从头到尾做了什么"></a>从头到尾做了什么</h3><p>前端应该是有一个关键的名词：state。用于记录组件的状态。</p><p>那么在前端，首先调用setState，再react把他标记为需要重新渲染，解析jsx，实例化相应组件。调用render方法，生成新的vdom（虚拟dom）然后用diff算法比较前后两个虚拟dom树差异，找出需要更新的地方，然后把生成的新东西更新上去。最后浏览器渲染引擎进行页面布局和绘制。</p><h3 id="js引擎和渲染引擎"><a href="#js引擎和渲染引擎" class="headerlink" title="js引擎和渲染引擎"></a>js引擎和渲染引擎</h3><p>所以这里我们会看见一个事情。js引擎和渲染引擎是一个前后配合的关系。相当于js引擎像一个生成静态的东西，而渲染引擎去把更新的部分去重新绘制，分工合作。然后我们也会发现这两个引擎都是存在于浏览器中的。</p><p><img src="https://raw.githubusercontent.com/yuuki798/pic-list/main/blog/image-20241103125051422.png" alt="image-20241103125051422"></p><h3 id="钩子函数"><a href="#钩子函数" class="headerlink" title="钩子函数"></a>钩子函数</h3><ol><li>useEffect：组件首次渲染或者每次依赖变更重新渲染后异步执行</li><li>useLayoutEffect：在浏览器重新绘制屏幕前同步执行</li></ol><p>useLayoutEffect的触发一定在useEffect之前。useLayoutEffect是同步执行，会阻塞浏览器重新绘制，所以在生成真实dom之后，React会开始触发需要执行的useLayoutEffect钩子。</p><p><strong>JavaScript执行速度和页面绘制速度之间的差距可以是相当大的</strong>，所以即便两者是同时开始的，但是实际计算机内部执行速度来看，基本上绘制刚刚开始，useEffect函数都已经执行完了，所以在useEffect回调函数中获取元素，几乎不可能获取到最新的元素。(渲染嘎嘎慢)</p><p><img src="https://raw.githubusercontent.com/yuuki798/pic-list/main/blog/image-20241103213620056.png" alt="image-20241103213620056"></p><p>所以别useEffect和useLayoutEffect去更新非依赖的state值，前者会造成死循环（正常执行），后者会直接不再执行绘制。</p><p>方法是延迟获取的话，useEffect会因为图中上下都执行而导致闪现。useLayoutEffect会因为不执行绘制而避免了闪现。这就是这个钩子名称的由来，它为layout而生。</p><h2 id="React在浏览器运行原理总结"><a href="#React在浏览器运行原理总结" class="headerlink" title="React在浏览器运行原理总结"></a>React在浏览器运行原理总结</h2><p>在了解React Native的原理之前我们先简单回顾一下React和浏览器的工作原理: 首先Babel将React JSX语法糖编译成React.createElement表达式即虚拟DOM节点，然后利用虚拟DOM的Diff算法，对比出需要渲染的元素交由浏览器的渲染引擎渲染，从而形成丰富的浏览器页面。</p><h2 id="rn渲染原理"><a href="#rn渲染原理" class="headerlink" title="rn渲染原理"></a>rn渲染原理</h2><h3 id="整体架构"><a href="#整体架构" class="headerlink" title="整体架构"></a>整体架构</h3><p>jsx-&gt;js</p><p>js core执行js，变成oc。具体是给一个数组描述oc对象的属性和方法</p><p><em>runtime</em> 是一个通用抽象的术语，指的是计算机程序运行的时候所需要的一切代码库，框架，平台等。程序在运行时的状态和行为。</p><p>其中的思想主要就是一种键值对映射关系。</p><p>React Native 的启动流程涉及多个阶段，从加载 JavaScript 代码到与原生组件交互，每一步都涉及不同的机制。以下是 React Native 启动过程的一个简要说明：</p><h3 id="启动流程"><a href="#启动流程" class="headerlink" title="启动流程"></a>启动流程</h3><p>React Native 的启动流程大致上是通过以下几个关键步骤实现的：</p><ol><li>启动原生应用并初始化 React Native 桥接（<code>RCTBridge</code>）。</li><li>加载 JavaScript bundle（从本地或远程服务器获取）。</li><li>在 JavaScript 线程中执行应用逻辑，构建 React 组件树。</li><li>通过桥接将 JavaScript 生成的 UI 传递给原生组件。</li><li>通过桥接和事件机制实现 JavaScript 与原生代码的实时通信和 UI 更新。</li></ol><p>这一流程的核心是通过桥接机制将 JavaScript 与原生层有效连接，实现跨平台的应用开发。</p><h3 id="基于Bridge的架构原理"><a href="#基于Bridge的架构原理" class="headerlink" title="基于Bridge的架构原理"></a>基于Bridge的架构原理</h3><p>在0.59版本之前React Native使用的基于Bridge的架构方式</p><p>其实只需要知道，js和原生之间有一个bridge。那么这个里面是一个需要探索的东西。</p><p>jsc就是一种js引擎，和react有相似之处，都是去处理js代码。</p><p>而到了mobile app这边，或者说native这边，渲染引擎就是另外一个东西了。</p><p>而native我理解为原生代码，因此bridge可以相当于一个语言翻译器，在ios就是js-&gt;oc的转化。</p><p><img src="https://raw.githubusercontent.com/yuuki798/pic-list/main/blog/a3a67332ed184c1ab02c9be9d596f890%7Etplv-k3u1fbpfcp-zoom-in-crop-mark%3A1512%3A0%3A0%3A0.awebp" alt="img"></p><p>缺点在于非常依赖bridge的转化，那么不断累积这个翻译过程会有性能上的问题</p><h3 id="基于JSI的新架构原理"><a href="#基于JSI的新架构原理" class="headerlink" title="基于JSI的新架构原理"></a>基于JSI的新架构原理</h3><p><img src="https://raw.githubusercontent.com/yuuki798/pic-list/main/blog/89f1fafd3ced418cb9a2a1a6e6e03a19%7Etplv-k3u1fbpfcp-zoom-in-crop-mark%3A1512%3A0%3A0%3A0.awebp" alt="img"></p><p>首先解释下新架构下的几个新概念</p><ul><li>JSI（Javascript Interface）：JSI的作用就是让Javascript可以持有C++对象的引用，并调用其方法，同时Native端（Android、IOS）均支持对于C++的支持。从而避免了使用Bridge对JSON的序列化与反序列化，实现了Javascript与Native端直接的通信。 JSI还屏蔽了不同浏览器引擎之间的差异，允许前端使用不同的浏览器引擎，因此Facebook针对Android 需要加载JavascriptCore的问题，研发了一个更适合Android的开源浏览器引擎Hermes。</li><li>CodeGen：作为一个工具来自动化的实现Javascript和Native端的兼容性，它可以让开发者创建JS的静态类，以便Native端（Fabric和Turbo Modules）可以识别它们，并且避免每次都校验数据，将会带来更好的性能，并且减少传输数据出错的可能性。</li><li>Fabric：相当于之前的UIManager的作用，不同之处在于旧架构下Native端的渲染需要完成一系列的”跨桥“操作，即React -&gt; Native -&gt; Shadow Tree -&gt; Native UI，新的架构下UIManager可以通过C++直接创建Shadow Tree大大提高了用户界面体验的速度。</li><li>TurboModules：旧架构下由于端与端之间的隔阂，运行时即便没有使用的模块也会被加载初始化，TurboModules允许Javascript代码仅在需要的时候才去加载对应的Native模块并保留对其直接的引用缩短了应用程序的启动时间。</li></ul><p>总结一下，旧架构中Bridge为React Native JS与Native交互的性能瓶颈，那么新架构的核心改变就是避免了通过Bridge将数据从JavaScript序列化到Native。</p><p>了解了理论还不够，还需要实操一下才ok。</p><h2 id="11-5会-思考"><a href="#11-5会-思考" class="headerlink" title="11-5会 思考"></a>11-5会 思考</h2><p>没什么原理，因为web就是H5。</p><p>小程序相当于是不用普通浏览器访问，只有他们自己固定的平台or容器才可访问的web。那么结合前面的思考，jd的样板其实就是展示了这个容器构建的接口？然后他们的容器用我们的H核来渲染H5。这么来说，原理全都蕴含在这个H5核中，也就是说我们的框架怎么去构建一个web去适配H核以及jd容器的问题吧。</p><p>小程序开发在不同端上的js core也是不同的。</p><p>jd的原生开发应该是基础的使用他们发布的小程序IDE：</p><p><a href="https://mp-docs.jd.com/doc/dev/devtools/1591#heading-0">https://mp-docs.jd.com/doc/dev/devtools/1591#heading-0</a></p><p>现在jd可以采用的跨端开发解决方案只有两种：</p><p><img src="https://raw.githubusercontent.com/yuuki798/pic-list/main/blog/image-20241105170327725.png" alt="image-20241105170327725"></p><p>其中，第一个是UI库。taro是我们在看的。我现在在思考是否可以看一下uniapp。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>这一周经历了很多，我也感觉我的精神和身体情况出现了一些问题。以及我有很多时间思考怎么组织我每个大大小小的团队，怎么处理自己的精神情况，然后还要通过社交回复能量。其实我觉得实习给我的印象目前还是非常好，问题完全出在我自己喜欢创造一堆需求去做，甚至忽视掉课业的那种。嗯，我想的是好好把各种事情分发出去，构造自己一个良好生态圈，然后之后去专心做自己的领域，这样会比较好。以及，我现在比较喜欢发博客，也找到了关于图床比较好的解决方案，接下来可以大量放置图片在博客了。当然，我现在比较喜欢的一个事情还是写散文这种，我希望之后还可以尝试写一些小说，我觉得这种虚构和现实映射的创造能力也非常需要get一下。</p>]]></content:encoded>
      
      
      <category domain="https://cjliblog.top/categories/%E5%AD%A6%E4%B9%A0%E6%89%93%E5%8D%A1/">学习打卡</category>
      
      
      
      <comments>https://cjliblog.top/2024/10/30/%E7%AC%AC%E4%B8%80%E5%91%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>密码的轮回和因果报应</title>
      <link>https://cjliblog.top/2024/10/30/%E5%AF%86%E7%A0%81%E7%9A%84%E8%BD%AE%E5%9B%9E%E5%92%8C%E5%9B%A0%E6%9E%9C%E6%8A%A5%E5%BA%94/</link>
      <guid>https://cjliblog.top/2024/10/30/%E5%AF%86%E7%A0%81%E7%9A%84%E8%BD%AE%E5%9B%9E%E5%92%8C%E5%9B%A0%E6%9E%9C%E6%8A%A5%E5%BA%94/</guid>
      <pubDate>Tue, 29 Oct 2024 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h4 id=&quot;一&quot;&gt;&lt;a href=&quot;#一&quot; class=&quot;headerlink&quot; title=&quot;一&quot;&gt;&lt;/a&gt;一&lt;/h4&gt;&lt;p&gt;人好像会陷入一种轮回。那像是一种情绪的轮回。就比如我，我渐渐体会出有两种人格。&lt;/p&gt;
&lt;p&gt;其实总的来说是一种，简称持续性发酒疯，间断性假正经人格</description>
        
      
      
      
      <content:encoded><![CDATA[<h4 id="一"><a href="#一" class="headerlink" title="一"></a>一</h4><p>人好像会陷入一种轮回。那像是一种情绪的轮回。就比如我，我渐渐体会出有两种人格。</p><p>其实总的来说是一种，简称持续性发酒疯，间断性假正经人格。这意味着，我说每一句严肃的话的时候，我的心理活动是一个小丑咧着嘴在滑稽地笑。而当我觉得身边的人貌似是不会对我有敌意的时候，我就会开始胡乱地输出与表达我自己。</p><p>那么至于可以分成哪两种呢。归纳起来，一种是低情绪，一种是高情绪。低情绪的时候，其实也就是莫名其妙的压力大，感觉漏了很多东西，对快乐&#x2F;刺激有极强顿感，感到无力，又缺乏辅助和依赖（这种依赖包括人际关系上的），与此同时会对什么都提不起兴趣，喜欢睡觉。这其实就是偏玉玉的味道了，当然，我历年好像都会经历这样的时期，上一次是我打电话给爸妈，他们分别和我说不要臆想，大家多少都有点的（然后想到我的家境和父母的经历，我一下就老实了）。父母在这一点上还是意见一致的，他们虽然已经完全不有瓜葛，但是当在我身上有一些重要事情的时候，会莫名其妙电话联系起来（当然貌似也不会很友好）。我一直坚信家庭的多样性，虽然我没有机会知道他人家庭的真实样貌，但是我的家庭的模式一定是独一无二的。再往前类比，我会发现往往这个时候都会是我经历了很大的情绪&#x2F;情感波动。那么我也会发现历来每年可能都会有一个需要寻找情感寄托的人的活动或者叫波动。这应该可以理解为个人的特性，那么怎么去利用这种特性&#x2F;规则来实现自己的效益最大化才是关键。这个事情先放一下，来说高情绪。高情绪其实就伴随着极度自律，精神极度强大，以及高效率，对于快乐的感知能力强，高能量。</p><p>我现在比较赞同我之前归纳的一点：我就是时刻得有一个人疯狂发消息，必须疯狂输出，才会产生高能量。那么这个人是什么样的就非常重要。有一个易错点就是千万要有多的备选方案，而不是过于单一的列表，久而久之会发现当某一两个人突然消失的时候，这种自动化运营的模式就会被打破，造成发送消息的空窗期。也许这么说会显得其他人有点像工具人了。要是有一些随机出现的人来问我问题还好，那我会发现我输出的嘎嘎猛，但是这就像做生意一样，有的时候生意就冷清掉了，那么这个时候一些稳定收入就显得尤为重要。在这里，就是一个“列表库”。</p><p>理论是懂得，但是在实操里面，会发现其实真正沟通多的只是工作上的人，而工作上的人如果要与其日常生活发生多少的联系，就显得尤为困难。这就需要探讨到我的性格特点。我似乎一直没有超级稳定的那么一个人去供我沟通（除了对象，但是这种也会因为沟通过度而产生关系恶化，然后负能量，造成反噬），换了环境会完全换了一批人，没有所谓友情这种可以随时出来约个饭局的感觉。</p><p>然后就想，有没有可能，写文章或者音乐创作能够替代这个事情？问题就在于读者和听众。我不善于想象虚无的观众，我希望的是真实的一切，真实的应用、实践、被认可和影响力。这让我再度怀疑mbti人格到底是什么，我好像每次测出来都不一样，难道是有点太复杂了（x）。但是这一些事情一定是可以调整生活节奏的，应该去拥抱。</p><h4 id="二"><a href="#二" class="headerlink" title="二"></a>二</h4><p>好像人生有一些事情看起来很值得悔恨，但是自嘲一下其实也就那样。比如挂了科，评不了发展对象；又比如没过六级；这些事情准确来说就是我也根本没有花时间，没水过去那是正常的，如果过了反而是一种走运。常在河边走，谁都不会天天走运。就比如昨天手动签到没发现我不在，比如中午吃饭的时候多给我打了半份肉。又比如找实习岗位之类的，全看hc够不够，而不是所谓个人实力。这天下比来比去，最后还是比了运气。人们总是这样，当优势在自己的时候，就觉得是自己的努力，是实力，是牛杯；而当优势在他的时候，怨天尤人，世间不公，宣泄不满，不是自己的问题，全是世界的问题……</p><p>很多时候可能自己努力的东西是不会被外化的。而常规的路径（绩点、比赛、证书）就会有，甚至不需要多努力，而是通过手段。这就是为什么这么多人去争取，去成为。</p><p>或者，当有些事情变得迷茫，可能是因为目标感被自己瓦解了（比如完成了太多，或者完全忙不过来），造成摆烂。</p><h4 id="三"><a href="#三" class="headerlink" title="三"></a>三</h4><p>究竟是什么驱使人一直思考一些情爱话题，为什么人们总是对八卦这么感兴趣，为什么人们总是喜欢围观小情侣。</p><p>但是也有人完全到了另一个极端，爆炸的反感。</p><p>就是一个让人又爱又恨的东西，一定有它绝妙的地方。其实就像热恋情侣分开之后都会恨到骨子里，仿佛这辈子不再有这人存在。这种事情意义在于，捧得高，摔得惨——幻想会太过美好，而失望也会异常无情。</p><p>一些东西暂时讲不明白，因为我也处于摔得惨的阶段。但是为什么提起来，那是因为我又陷入了一个轮回，我又想把它捧起来了。幽默，但是这是客观事实，我只能评论，却没什么办法阻止这种很麻烦的思想紊乱。</p><h4 id="四"><a href="#四" class="headerlink" title="四"></a>四</h4><p>如果没有获得感，人会觉得自己是一坨泥淖，我现在就是这个状态。</p><p>哪怕说上班吧，我可能也没有什么目标感。好像如果那里有一个task，但是我好像不管努力还是不努力，我的结果都摆在那里，而且这是未知，我不知道我完成之后会获得什么。环境不错，像一个全程是自习的学校。但是另一方面，学校里的“指标”被我大面积舍弃了。挂科带了的不良影响还在扩大，把一些本来可以轻松水到的外化title都驱逐了。但这也是一些有前因后果的事情，需要耐得住。既客观又合理。</p><p>但是起码还是得给这个世界来点小小的震撼。首先得提升精力。现在的睡眠时间肯定是不够的，五小时加不午睡加不喝功能饮料。</p><p>说回那种疯疯癫癫的状态。过了的话就会被叫做小丑，叫做幼稚；少了的话就会被叫做古板，冷漠。这有一个度要把握，但是有没有可能做自己是最好的。就比如如果最舒服、最真性情的样子就是会被别人觉得是小丑、幼稚，那就叫就好了，大不了之后再改，但是为什么要自己本来就是小丑、幼稚还要刻意隐瞒呢？而且也有人最后把疯疯癫癫变成了影响力，带动了一众信徒。我并不觉得一昧听信所谓“忠言逆耳”会让人变智慧，让人变得善于决策的永远是一个带来重大失败的“南墙”。</p><p>记住，别去做愚蠢的事情，与其与自我缠斗，还是不如去毁灭世界吧。</p>]]></content:encoded>
      
      
      <category domain="https://cjliblog.top/categories/%E6%95%A3%E6%96%87/">散文</category>
      
      
      <category domain="https://cjliblog.top/tags/%E6%95%A3%E6%96%87/">散文</category>
      
      
      <comments>https://cjliblog.top/2024/10/30/%E5%AF%86%E7%A0%81%E7%9A%84%E8%BD%AE%E5%9B%9E%E5%92%8C%E5%9B%A0%E6%9E%9C%E6%8A%A5%E5%BA%94/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>第零周学习笔记</title>
      <link>https://cjliblog.top/2024/10/23/%E7%AC%AC0%E5%91%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <guid>https://cjliblog.top/2024/10/23/%E7%AC%AC0%E5%91%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <pubDate>Tue, 22 Oct 2024 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;把10-23当做我开始学习打卡的第一天。以后日更博客，每周新开一篇。看看能坚持多久~&lt;/p&gt;
&lt;h2 id=&quot;uber阅读&quot;&gt;&lt;a href</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>把10-23当做我开始学习打卡的第一天。以后日更博客，每周新开一篇。看看能坚持多久~</p><h2 id="uber阅读"><a href="#uber阅读" class="headerlink" title="uber阅读"></a>uber阅读</h2><h3 id="interface"><a href="#interface" class="headerlink" title="interface"></a>interface</h3><p>1.接口类型本身就是指针。如果需要修改其存储的值，需要用指针传递，这样就可以修改原值，否则只能修改拷贝值。进一步说，读可以不用指针，写的话要用指针。</p><p>2.防御性编程。由于go的规则是struct去实现interface的所有func才称作implement，因此存在可能我们漏实现了某个函数却没发现，那么原本构建的逻辑将会被打乱。而添加了一个</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var 接口=空结构体</span><br></pre></td></tr></table></figure><p>的判断，如果结构体未implement接口，则编译的时候会报错，因为他们是接不上的。这样就利用人工标注有效地弥补了机制上编译器无法弥补的东西。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Handler <span class="keyword">struct</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _ http.Handler = (*Handler)(<span class="literal">nil</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *Handler)</span></span> ServeHTTP(</span><br><span class="line">  w http.ResponseWriter,</span><br><span class="line">  r *http.Request,</span><br><span class="line">) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.接口被implement的时候，receiver可以是值receiver也可以是pointer receiver。</p><p>4.互斥锁sync.Mutex。由于Mutex的零值是有效地，这代表着var比new声明更好，new浪费内存。因为var是直接在栈上分配变量，而new要在堆上分配对象。如果我们要在结构体里面使用Mutex，建议是建立一个变量。</p><p>如</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> SMap <span class="keyword">struct</span> &#123;</span><br><span class="line">  mu sync.Mutex</span><br><span class="line"></span><br><span class="line">  data <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而不是</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> SMap <span class="keyword">struct</span> &#123;</span><br><span class="line">  sync.Mutex</span><br><span class="line"></span><br><span class="line">  data <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后者的Lock()方法，变成了SMap的方法，而前者的Lock方法是SMap.mu的方法。</p><p>5.切片与数组。因为slice和map的底层实现应该是一个指针操作者一篇底层地址。因此，他的本质也是指针。如果我们把它当成值操作容易出问题。如果是复制一个切片，记得重新开辟一片内存。</p><p>6.使用defer：这个设计纯为了防止遗忘。功能强大，不用还容易让代码变复杂。</p><p>7.channel。channel的size应该是1或0，有无缓冲的区别。这样比较干净，而且1经过设计后可以达到和所有非零数字的效果。</p><p>8.iota。Enum中常量自增神器。注意，要从1开始计数。0属于一个默认值，如果是一个正常状态，建议使用0。</p><p>9.error。</p><ul><li>最好用static定义，这样我们可以case讨论，同时省略一些同质化的内存。</li><li>error返回动态值，我们用fmt的sprintf。</li><li>报错保持上下文简介，避免“failed to “这种语义冗余。</li><li>把Err作为前缀，可以用于区分这个err是否导出。如果上一行log了就不要再return err。</li></ul><p>10.panic。不要滥用恐慌，因为不容易排查错误。</p><h2 id="k3s的pod调度"><a href="#k3s的pod调度" class="headerlink" title="k3s的pod调度"></a>k3s的pod调度</h2><p>主要是利用tag。先给某个机子打上tag，然后让其他set去绑定就可以。</p><h2 id="产品阅读"><a href="#产品阅读" class="headerlink" title="产品阅读"></a>产品阅读</h2><h3 id="引导式设计——用户第一关"><a href="#引导式设计——用户第一关" class="headerlink" title="引导式设计——用户第一关"></a>引导式设计——用户第一关</h3><p>对于产品的引导式设计。我们知道很多互联网产品，都会有开局《新手教程》类似的东西，但是这种很烦，其实用户不喜欢一些乱七八糟的指导一下子涌上来，而是喜欢自己探索。apple公司喜欢采用非引导式的隐藏设计，比如左滑右滑。这会让用户在不知不觉学会这汇总用法，或者通过人与人的沟通习得一个《小妙招》。这简洁而精妙。</p><p>然后可以看到最近hz的奖学金系统。给大家做了一堆培训，却老是出现制度方面有钻漏洞行为的事情，被各种举报。首先这个是技术人员没有考虑到产品的易上手性，这也是产品设计环节没考虑清楚用户-系统之间交互而诞生的问题。辅导员不一定都是计算机毕业的，所以可能有的人压根没有那么调理清晰的工程思维来处理一些树；就算有这样的思维他也需要花很多成本去学习期中的规则，那有时候甚至不如人力excel表。这样用户会感到操作复杂，学习或使用投入成本大，不乐意花时间，把权力交给学生，所以强制使用就会出现非常多的问题。甚至差点被叫停。</p><h3 id="关于职场"><a href="#关于职场" class="headerlink" title="关于职场"></a>关于职场</h3><p>要显得弱势，不要解释而是服从。多问多送礼。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>作为一个对奖项最忌恨的人，居然在搬上先进班集体荧幕的时候变成了只靠奖项出彩的人。回去读了之前写的《黑神话》一文，深有感慨。一是感慨就过了一个月居然都忘了之前写了什么，感觉读了新文章的感觉，震撼我居然能写出这样的句子；二是感慨我狂喷奖项，疯狂做自己热爱的事，如今已经初步完成了当初的执念，然而却在荧幕上成为了我很抵制的人。也可能有些名誉是随热爱而来的吧。进一步诠释热爱的强势。</p>]]></content:encoded>
      
      
      <category domain="https://cjliblog.top/categories/%E5%AD%A6%E4%B9%A0%E6%89%93%E5%8D%A1/">学习打卡</category>
      
      
      
      <comments>https://cjliblog.top/2024/10/23/%E7%AC%AC0%E5%91%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>踩坑记录Windows 删除文件/文件夹提示“找不到该项目</title>
      <link>https://cjliblog.top/2024/10/22/%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95Windows%20%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6%E6%96%87%E4%BB%B6%E5%A4%B9%E6%8F%90%E7%A4%BA%E2%80%9C%E6%89%BE%E4%B8%8D%E5%88%B0%E8%AF%A5%E9%A1%B9%E7%9B%AE/</link>
      <guid>https://cjliblog.top/2024/10/22/%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95Windows%20%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6%E6%96%87%E4%BB%B6%E5%A4%B9%E6%8F%90%E7%A4%BA%E2%80%9C%E6%89%BE%E4%B8%8D%E5%88%B0%E8%AF%A5%E9%A1%B9%E7%9B%AE/</guid>
      <pubDate>Mon, 21 Oct 2024 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;p&gt;删除文件夹时，发现其中存在一个顽固文件，不管怎么删除都会提示”&lt;strong&gt;找不到该项目&lt;/strong&gt;“，无法删除。&lt;</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>删除文件夹时，发现其中存在一个顽固文件，不管怎么删除都会提示”<strong>找不到该项目</strong>“，无法删除。</p><p>根据网络所见，貌似文件夹也存在这种情况。</p><h2 id="问题猜想"><a href="#问题猜想" class="headerlink" title="问题猜想"></a>问题猜想</h2><p>我这里存在的问题推测是因为文件名末尾多带了一个 <code>.</code>，即类似于 <code>example.file.txt.</code>，正常操作是无法创建这样的文件的，貌似我这里是由于旧版本 adb 的 bug 所产生。</p><p>该文件并非无拓展名，具体肯定是属于异常情况，但这里不深究。</p><p>据说文件夹也存在这样的异常。</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>这里提供我试验过后的成功方法。</p><p>创建一个 <code>del.bat</code>：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">del /f /a /q \\?\%1</span><br><span class="line">rd /s /q \\?\%1</span><br></pre></td></tr></table></figure><p>然后<strong>将要删除的东西拖到这个批处理文件</strong>上即可。</p><p>我这里直接拖入顽固文件不起作用，但是<strong>将顽固文件所在的文件夹直接拖入</strong>就删除成功了。</p><p>如果连正常文件都无法起作用，重新创建批处理文件并将编码修改为 ANSI。</p><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>右键，选择 Winrar 的添加到压缩文件，并勾选删除源文件（或者叫”压缩后删除原来的文件“）。</p><p>我这里直接对顽固文件进行操作未能成功，没有对所在文件夹尝试过，一些网友说有用，故也记录下来。</p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ol><li><a href="https://blog.csdn.net/qq_41042595/article/details/112576438">Windows桌面文件夹删除被提示“找不到该项目”——顽固目录、文件的删除_电脑桌面文件夹删除提示找不到该项目-CSDN博客</a></li></ol><h3 id="版权信息"><a href="#版权信息" class="headerlink" title="版权信息"></a>版权信息</h3><p>本文原载于 <a href="https://blog.reincarnatey.net/">reincarnatey.net</a>，遵循 CC BY-NC-SA 4.0 协议，复制请保留原文出处。</p>]]></content:encoded>
      
      
      <category domain="https://cjliblog.top/categories/%E8%BD%AC%E8%BD%BD/">转载</category>
      
      
      
      <comments>https://cjliblog.top/2024/10/22/%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95Windows%20%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6%E6%96%87%E4%BB%B6%E5%A4%B9%E6%8F%90%E7%A4%BA%E2%80%9C%E6%89%BE%E4%B8%8D%E5%88%B0%E8%AF%A5%E9%A1%B9%E7%9B%AE/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>爬虫笔记</title>
      <link>https://cjliblog.top/2024/08/31/%E5%8D%9A%E5%AE%A2%E6%A8%A1%E6%9D%BF/</link>
      <guid>https://cjliblog.top/2024/08/31/%E5%8D%9A%E5%AE%A2%E6%A8%A1%E6%9D%BF/</guid>
      <pubDate>Fri, 30 Aug 2024 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h3 id=&quot;昨日爬虫学习与改造记录&quot;&gt;&lt;a href=&quot;#昨日爬虫学习与改造记录&quot; class=&quot;headerlink&quot; title=&quot;昨日爬虫学习与改造记录&quot;&gt;&lt;/a&gt;昨日爬虫学习与改造记录&lt;/h3&gt;&lt;p&gt;在今天的学习与实践中，我对一个使用 Selenium 进行招聘信息抓</description>
        
      
      
      
      <content:encoded><![CDATA[<h3 id="昨日爬虫学习与改造记录"><a href="#昨日爬虫学习与改造记录" class="headerlink" title="昨日爬虫学习与改造记录"></a>昨日爬虫学习与改造记录</h3><p>在今天的学习与实践中，我对一个使用 Selenium 进行招聘信息抓取的爬虫脚本进行了深入改造。通过代码优化与问题解决，我对如何设计、优化和调试爬虫有了更深入的理解。本文将详细记录今天的学习过程、遇到的问题以及改进后的代码。</p><h4 id="1-初步爬虫脚本构建"><a href="#1-初步爬虫脚本构建" class="headerlink" title="1. 初步爬虫脚本构建"></a>1. 初步爬虫脚本构建</h4><p>最初的爬虫脚本结构相对简单，主要实现了以下功能：</p><ul><li><strong>页面加载与点击</strong>：通过 Selenium 模拟浏览器操作，访问目标招聘网站并点击分类页面。</li><li><strong>数据提取</strong>：逐一遍历分类页面，提取每个职位的详细信息，包括职位名称、公司、地点、薪资等，并保存到数据库。</li><li><strong>数据库操作</strong>：每获取到一个职位信息，都会连接数据库并插入数据。</li></ul><h4 id="初始代码（部分摘录）"><a href="#初始代码（部分摘录）" class="headerlink" title="初始代码（部分摘录）"></a>初始代码（部分摘录）</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">browser = webdriver.Edge()</span><br><span class="line">index_url = <span class="string">&#x27;https://www.zhipin.com/?city=100010000&amp;ka=city-sites-100010000&#x27;</span></span><br><span class="line">browser.get(index_url)</span><br><span class="line"></span><br><span class="line">show_ele = browser.find_element(by=By.XPATH, value=<span class="string">&#x27;//*[@id=&quot;main&quot;]/div/div[1]/div/div[1]/dl[1]/dd/b&#x27;</span>)</span><br><span class="line">show_ele.click()</span><br><span class="line"></span><br><span class="line">today = datetime.date.today().strftime(<span class="string">&#x27;%Y-%m-%d&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">85</span>):</span><br><span class="line">    current_a = browser.find_elements(by=By.XPATH, value=<span class="string">&#x27;//*[@id=&quot;main&quot;]/div/div[1]/div/div[1]/dl[1]/div/ul/li/div/a&#x27;</span>)[i]</span><br><span class="line">    current_category = current_a.find_element(by=By.XPATH, value=<span class="string">&#x27;../../h4&#x27;</span>).text</span><br><span class="line">    sub_category = current_a.text</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&#123;&#125;正在抓取&#123;&#125;--&#123;&#125;&quot;</span>.<span class="built_in">format</span>(today, current_category, sub_category))</span><br><span class="line">    current_a.click()</span><br><span class="line">    time.sleep(<span class="number">5</span>)</span><br><span class="line">    browser.execute_script(<span class="string">&quot;window.scrollTo(0, document.body.scrollHeight);&quot;</span>)</span><br><span class="line">    time.sleep(<span class="number">10</span>)</span><br><span class="line">    browser.execute_script(<span class="string">&quot;window.scrollTo(0, document.body.scrollHeight);&quot;</span>)</span><br><span class="line">    <span class="comment"># 提取并保存职位数据...</span></span><br></pre></td></tr></table></figure><p>这个代码的问题在于：</p><ol><li><strong>页面元素加载问题</strong>：在页面元素尚未完全加载时，Selenium 可能无法找到目标元素，从而导致失败。</li><li><strong>StaleElementReferenceException</strong>：当页面刷新或 DOM 结构发生变化时，Selenium 引用的元素会失效，导致操作失败。</li><li><strong>频繁的数据库连接</strong>：每获取一个职位信息都会新建一次数据库连接，导致效率低下。</li><li><strong>手动处理验证码</strong>：当网站检测到异常行为时，可能会触发验证码验证，这会中断爬虫运行。</li></ol><h4 id="2-改进与优化"><a href="#2-改进与优化" class="headerlink" title="2. 改进与优化"></a>2. 改进与优化</h4><p>针对上述问题，我进行了多方面的改进，以下是主要的优化措施和相应的代码改变。</p><h5 id="2-1-引入重试机制"><a href="#2-1-引入重试机制" class="headerlink" title="2.1 引入重试机制"></a>2.1 引入重试机制</h5><p>为了应对页面元素加载失败或 DOM 变化带来的问题，我增加了一个 <code>retry_on_failure</code> 函数。该函数允许在遇到 <code>StaleElementReferenceException</code> 或 <code>TimeoutException</code> 时，自动重试指定次数，提高脚本的稳定性。</p><p><strong>代码示例：</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.common.exceptions <span class="keyword">import</span> StaleElementReferenceException, TimeoutException</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">retry_on_failure</span>(<span class="params">max_retries, function, *args, **kwargs</span>):</span><br><span class="line">    retries = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> retries &lt; max_retries:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> function(*args, **kwargs)</span><br><span class="line">        <span class="keyword">except</span> (StaleElementReferenceException, TimeoutException) <span class="keyword">as</span> e:</span><br><span class="line">            retries += <span class="number">1</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Error: <span class="subst">&#123;e&#125;</span>. Retrying <span class="subst">&#123;retries&#125;</span>/<span class="subst">&#123;max_retries&#125;</span>...&quot;</span>)</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">raise</span> Exception(<span class="string">f&quot;Failed after <span class="subst">&#123;max_retries&#125;</span> retries&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>使用示例：</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">current_a = retry_on_failure(<span class="number">3</span>, browser.find_elements, By.XPATH, <span class="string">&#x27;//*[@id=&quot;main&quot;]/div/div[1]/div/div[1]/dl[1]/div/ul/li/div/a&#x27;</span>)[i]</span><br></pre></td></tr></table></figure><h5 id="2-2-优化页面跳转与元素定位"><a href="#2-2-优化页面跳转与元素定位" class="headerlink" title="2.2 优化页面跳转与元素定位"></a>2.2 优化页面跳转与元素定位</h5><p>为了减少页面跳转带来的定位失效问题，我在点击元素前引入了显式等待，并结合了动作链（ActionChains）来确保元素能够正确点击。这有效减少了 <code>StaleElementReferenceException</code> 发生的概率。</p><p>同时，为了避免在复杂的页面场景中可能出现的点击失效问题，我将一些关键点击操作改为使用 JavaScript 强制执行。这种方式在某些情况下比 Selenium 的普通点击操作更为可靠。</p><p><strong>代码示例：</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.action_chains <span class="keyword">import</span> ActionChains</span><br><span class="line"></span><br><span class="line">show_ele = WebDriverWait(browser, <span class="number">10</span>).until(</span><br><span class="line">    EC.element_to_be_clickable((By.XPATH, <span class="string">&#x27;//*[@id=&quot;main&quot;]/div/div[1]/div/div[1]/dl[1]/dd/b&#x27;</span>))</span><br><span class="line">)</span><br><span class="line">actions = ActionChains(browser)</span><br><span class="line">actions.move_to_element(show_ele).perform()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 JavaScript 强制执行点击</span></span><br><span class="line">browser.execute_script(<span class="string">&quot;arguments[0].click();&quot;</span>, current_a)</span><br></pre></td></tr></table></figure><h5 id="2-3-增加-sleep-等待"><a href="#2-3-增加-sleep-等待" class="headerlink" title="2.3 增加 sleep 等待"></a>2.3 增加 <code>sleep</code> 等待</h5><p>为了确保页面元素完全加载，我在一些关键步骤前增加了 <code>sleep</code> 等待。这种方式虽然简单，但在处理需要等待页面完全渲染的场景时非常有效。</p><p><strong>代码示例：</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 等待页面加载</span></span><br><span class="line">time.sleep(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 滚动页面以加载更多内容</span></span><br><span class="line">browser.execute_script(<span class="string">&quot;window.scrollTo(0, document.body.scrollHeight);&quot;</span>)</span><br><span class="line">time.sleep(<span class="number">10</span>)</span><br><span class="line">browser.execute_script(<span class="string">&quot;window.scrollTo(0, document.body.scrollHeight);&quot;</span>)</span><br></pre></td></tr></table></figure><h5 id="2-4-优化数据库连接"><a href="#2-4-优化数据库连接" class="headerlink" title="2.4 优化数据库连接"></a>2.4 优化数据库连接</h5><p>为了提高数据库操作的效率，我在程序启动时建立了一次数据库连接，并在整个脚本运行过程中复用该连接。这样做不仅减少了每次操作时的连接开销，还提升了程序的整体性能。</p><p><strong>代码示例：</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动时建立数据库连接</span></span><br><span class="line">db = DBUtils(<span class="string">&#x27;数据库地址&#x27;</span>, <span class="string">&#x27;用户名&#x27;</span>, <span class="string">&#x27;密码&#x27;</span>, <span class="string">&#x27;数据库名&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在后续操作中复用该连接，而不是每次都新建连接</span></span><br><span class="line">db.insert_data(</span><br><span class="line">    <span class="string">&quot;insert into job_info(category, sub_category, job_title, province, job_location, job_company, job_industry, job_finance, job_scale, job_welfare, job_salary_range, job_experience, job_education, job_skills, create_time) values(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)&quot;</span>,</span><br><span class="line">    args=(current_category, sub_category, job_title, province, job_location, job_company, job_industry, job_finance, job_scale, job_welfare, job_salary_range, job_experience, job_education, job_skills, today)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h5 id="2-5-处理验证码与异常页面"><a href="#2-5-处理验证码与异常页面" class="headerlink" title="2.5 处理验证码与异常页面"></a>2.5 处理验证码与异常页面</h5><p>在爬虫运行过程中，有时会遇到页面弹出验证码的情况。为了确保爬虫的持续运行，我增加了一个等待用户手动操作的功能，使得用户可以在需要时手动完成验证，然后继续自动化抓取。</p><p><strong>代码示例：</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">wait_for_user</span>():</span><br><span class="line">    <span class="built_in">input</span>(<span class="string">&quot;请手动完成操作后在控制台输入 &#x27;ok&#x27; 继续: &quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在需要时调用</span></span><br><span class="line">wait_for_user()</span><br></pre></td></tr></table></figure><h5 id="2-6-日志记录与进度反馈"><a href="#2-6-日志记录与进度反馈" class="headerlink" title="2.6 日志记录与进度反馈"></a>2.6 日志记录与进度反馈</h5><p>为了更好地监控爬虫的运行状态，我在脚本中增加了详细的日志输出，每个关键步骤都会记录日志，以便在发生问题时能够快速定位。此外，还增加了进度反馈，使得用户可以清楚地了解脚本的处理进度。</p><p><strong>代码示例：</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;正在处理第 <span class="subst">&#123;i&#125;</span> 个分类（咱程序员喜欢从0开始数你懂得...）&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;today&#125;</span> 正在抓取 <span class="subst">&#123;current_category&#125;</span> -- <span class="subst">&#123;sub_category&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="3-改造后的爬虫运行效果"><a href="#3-改造后的爬虫运行效果" class="headerlink" title="3. 改造后的爬虫运行效果"></a>3. 改造后的爬虫运行效果</h4><p>经过优化后的爬虫，运行更加稳定高效，处理数据的速度有了明显提升，并且在应对复杂页面场景时表现更佳。以下是改造后脚本的一些显著优点：</p><ul><li><strong>稳定性提升</strong>：通过重试机制和显式等待，有效减少了因元素定位失败导致的脚本中断。</li><li><strong>效率提升</strong>：通过优化数据库连接和减少页面跳转次数，大幅提高了数据抓取的效率。</li><li><strong>更好的用户交互</strong>：增加的日志输出和手动操作提示，使得脚本在自动化与人工干预之间达到了更好的平衡。</li></ul>]]></content:encoded>
      
      
      <category domain="https://cjliblog.top/categories/%E7%AC%94%E8%AE%B0/">笔记</category>
      
      
      <category domain="https://cjliblog.top/tags/%E7%AC%94%E8%AE%B0/">笔记</category>
      
      
      <comments>https://cjliblog.top/2024/08/31/%E5%8D%9A%E5%AE%A2%E6%A8%A1%E6%9D%BF/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>黑神话悟空日与我无关但是我没睡着天就亮了</title>
      <link>https://cjliblog.top/2024/08/20/%E9%BB%91%E7%A5%9E%E8%AF%9D%E6%82%9F%E7%A9%BA%E6%97%A5%E4%B8%8E%E6%88%91%E6%97%A0%E5%85%B3%E4%BD%86%E6%98%AF%E6%88%91%E6%B2%A1%E7%9D%A1%E7%9D%80%E5%A4%A9%E5%B0%B1%E4%BA%AE%E4%BA%86/</link>
      <guid>https://cjliblog.top/2024/08/20/%E9%BB%91%E7%A5%9E%E8%AF%9D%E6%82%9F%E7%A9%BA%E6%97%A5%E4%B8%8E%E6%88%91%E6%97%A0%E5%85%B3%E4%BD%86%E6%98%AF%E6%88%91%E6%B2%A1%E7%9D%A1%E7%9D%80%E5%A4%A9%E5%B0%B1%E4%BA%AE%E4%BA%86/</guid>
      <pubDate>Mon, 19 Aug 2024 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h4 id=&quot;一&quot;&gt;&lt;a href=&quot;#一&quot; class=&quot;headerlink&quot; title=&quot;一&quot;&gt;&lt;/a&gt;一&lt;/h4&gt;&lt;p&gt;有时候感觉时间就挺多的，如果不睡觉的话，还有心情写点儿日记。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;白天就感觉时间挺少的，如果睡到十点左右，起来刷一会儿手机</description>
        
      
      
      
      <content:encoded><![CDATA[<h4 id="一"><a href="#一" class="headerlink" title="一"></a>一</h4><p>有时候感觉时间就挺多的，如果不睡觉的话，还有心情写点儿日记。</p><p><strong>白天就感觉时间挺少的，如果睡到十点左右，起来刷一会儿手机就中午了。</strong>中午边娱乐边吃饭，下午又睡满了。晚上在电脑前做些杂七杂八的动作，好像是在水群其实，断断续续看点教学视频，感觉生活好像要有点起色了，但一会儿就九点了，然后就醒悟过来，视频时长合起来可能就只有半个小时，倒是娱乐视频看了超过一个小时。</p><p>半夜玩起小游戏，前端又来和我对接口了，但是我啥都没动，准备装睡。</p><p>躺了好久，在幻想自己的一场华丽的演讲和讲得头头是道的无数的人生哲理，仿佛自己就是赢家。哎，都没做梦，只是夜晚做了个白日梦。哪怕是在完美的幻想里，满嘴说着“他妈的”也让自己的形象显得非常的帅。</p><h4 id="二"><a href="#二" class="headerlink" title="二"></a>二</h4><p>还有一副横幅，气势磅礴，and座无虚席——“千里逢迎，高朋满座”。</p><p>一种江湖的气派。我要告诉世人，从古至今，真正的技艺都是传承，拜师求学，用心传授，才是学习本来的样子。这种每个学生被迫分配一个老师，一个老师被迫分配一堆学生，没有产生吸引和匹配，就是一堆工具的相互利用，像是社会机器的运转。</p><p><strong>人好为人师，可以美其名费曼学习法。</strong>说先天的，就是装逼。说没有的，就是吹逼。而说自己最近学到的、想到的，还真可以叫费曼学习法。逻辑自洽，也不无赖。</p><p>思维的“滞后”，其实就是脱节嘛。那就在于身边的人并不“先进”嘛。那又凭什么说“牛逼的人到哪都牛逼”？那是因为他先前就已经有了丰厚的见识和资源，或者有某股力量在暗中助力，别人不知道。</p><p>“中学生思维“就三种：”绩优主义务虚主义天天奋斗爱当奴隶逆来顺受型“、”我很牛逼但是人生不得志可是看到大佬我又疯狂跪舔型“、”智商决定一切我就是不行上天不公平叫苦连篇型“。三种不沾一种，恭喜你，你成熟了，但只是相对成熟，进入了”大学生思维“。对于社会人士，你还是太年轻。</p><h4 id="三"><a href="#三" class="headerlink" title="三"></a>三</h4><p>年轻的梦想其实都可以实现，没有什么时间不够，时间都是被自己夺走了。</p><p>少参加点比赛，少看点没营养的网络内容，少在社交平台当显眼包，不就好了。甚至还可以剥夺睡眠。</p><p>二十四小时的一天，让人感到自在，仿佛我每天也可以抽点时间出来练习文笔和思想，当个文艺青年。</p><p>甚至感觉写了大半天，噢哟喝，才过了三十来分钟呢，才五点多，也太早了吧，放在高中室友也都还没起床呢。</p><p>一些心理作用是在无形压垮一些傻逼的。整天胡乱参加比赛，胡乱参加活动，任何的作业也要做的天衣无缝，所有的比赛、活动、作业、科研都要把自己的面子工程做到极致，整天想当励志逆袭的典范，整天把绩点之类的形式上的评价奉为圭臬，整天想当人上人，整天以为自己写论文做科研就是大神，整天以为自己学一点别人不知道的技术就是帅，整天把自己偷偷卷一些事情当成嘲笑他人的了不起的资本，整天胡乱接收一些是非信息然后开始评价别人评价世界，整天因为情绪不稳定和别人逼逼赖赖或者心里把自己想成一个悲情主角。。。这不是某个人，这是好几类人的画像。“太忙”好像变成了一个装逼词汇，但是没有人真正思考过这有没有可能是一个贬义词，是不懂得自己应该如何为自己争取时间价值的代名词，随着自己的事情被“B事”填满而变得麻木又自豪，一边嘴上骂着事情多，一边享受这种忙碌给自己带来的莫名自信的荣誉感，在绩优主义的评价体系下，“呵呵又努力了一天”的阿Q精神。</p><p>哎，消愁的小丑。</p><p><strong>而当凌晨清脆鸟声伴随着的青涩阳光和稀薄的空气弥漫过房间，一切的思绪都是如纸张那般不可掂量的轻。</strong></p><p><img src="https://ice.frostsky.com/2024/08/20/8756ece81515642011d8dfb1c222db82.png" alt="而当凌晨清脆鸟声伴随着的青涩阳光和稀薄的空气弥漫过房间，一切的思绪都是如纸张那般不可掂量的轻。"></p><p><strong>有个即兴的词组叫胜利的曙光。</strong></p><h4 id="四"><a href="#四" class="headerlink" title="四"></a>四</h4><p>就是啊，谁不曾有个自己曾经期望的自己呢，凭什么给外界的传统评价体系定义了自己。</p><p>外界也可以创造出多元的评价。艺术再小，总有受众。哲学再冷，也成门派。一切皆有可能。</p><p>不必把自己做成一台机器，或者一部工具，像火车空笼闶阆运转个不停，一班接着一班。</p><p><strong>再享受一下宁静，再感受一下生命存在的意义。</strong>再走进人群，也许此刻又会有不一样的决定，还有仍然被称作年少的这个时刻的一个少年的梦。</p><p><img src="https://ice.frostsky.com/2024/08/20/bf7ed7aa2d636048c8cfb63daa30f2ac.png" alt="再享受一下宁静，再感受一下生命存在的意义。"></p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">morningSunrise</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;The morning sunrise... A new beginning.&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://cjliblog.top/categories/%E6%95%A3%E6%96%87/">散文</category>
      
      
      <category domain="https://cjliblog.top/tags/%E6%95%A3%E6%96%87/">散文</category>
      
      
      <comments>https://cjliblog.top/2024/08/20/%E9%BB%91%E7%A5%9E%E8%AF%9D%E6%82%9F%E7%A9%BA%E6%97%A5%E4%B8%8E%E6%88%91%E6%97%A0%E5%85%B3%E4%BD%86%E6%98%AF%E6%88%91%E6%B2%A1%E7%9D%A1%E7%9D%80%E5%A4%A9%E5%B0%B1%E4%BA%AE%E4%BA%86/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
